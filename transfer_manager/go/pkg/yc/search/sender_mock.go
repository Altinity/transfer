// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/yc/search/sender.go

// Package search is a generated GoMock package.
package search

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSearchable is a mock of Searchable interface.
type MockSearchable struct {
	ctrl     *gomock.Controller
	recorder *MockSearchableMockRecorder
}

// MockSearchableMockRecorder is the mock recorder for MockSearchable.
type MockSearchableMockRecorder struct {
	mock *MockSearchable
}

// NewMockSearchable creates a new mock instance.
func NewMockSearchable(ctrl *gomock.Controller) *MockSearchable {
	mock := &MockSearchable{ctrl: ctrl}
	mock.recorder = &MockSearchableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchable) EXPECT() *MockSearchableMockRecorder {
	return m.recorder
}

// SearchResource mocks base method.
func (m *MockSearchable) SearchResource() (*SearchResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchResource")
	ret0, _ := ret[0].(*SearchResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchResource indicates an expected call of SearchResource.
func (mr *MockSearchableMockRecorder) SearchResource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResource", reflect.TypeOf((*MockSearchable)(nil).SearchResource))
}

// MockResourceSender is a mock of ResourceSender interface.
type MockResourceSender struct {
	ctrl     *gomock.Controller
	recorder *MockResourceSenderMockRecorder
}

// MockResourceSenderMockRecorder is the mock recorder for MockResourceSender.
type MockResourceSenderMockRecorder struct {
	mock *MockResourceSender
}

// NewMockResourceSender creates a new mock instance.
func NewMockResourceSender(ctrl *gomock.Controller) *MockResourceSender {
	mock := &MockResourceSender{ctrl: ctrl}
	mock.recorder = &MockResourceSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceSender) EXPECT() *MockResourceSenderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockResourceSender) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockResourceSenderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockResourceSender)(nil).Close))
}

// Send mocks base method.
func (m *MockResourceSender) Send(ctx context.Context, res *SearchResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockResourceSenderMockRecorder) Send(ctx, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockResourceSender)(nil).Send), ctx, res)
}
