// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.3
// source: yandex/cloud/priv/kms/v1/symmetric_crypto_service.proto

package kms

import (
	_ "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv"
	asymmetricencryption "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/kms/v1/asymmetricencryption"
	asymmetricsignature "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/kms/v1/asymmetricsignature"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GenerateAsymmetricDataKeyRequest_KeyType int32

const (
	GenerateAsymmetricDataKeyRequest_KEY_TYPE_UNSPECIFIED GenerateAsymmetricDataKeyRequest_KeyType = 0
	GenerateAsymmetricDataKeyRequest_ENCRYPTION           GenerateAsymmetricDataKeyRequest_KeyType = 1
	GenerateAsymmetricDataKeyRequest_SIGNATURE            GenerateAsymmetricDataKeyRequest_KeyType = 2
)

// Enum value maps for GenerateAsymmetricDataKeyRequest_KeyType.
var (
	GenerateAsymmetricDataKeyRequest_KeyType_name = map[int32]string{
		0: "KEY_TYPE_UNSPECIFIED",
		1: "ENCRYPTION",
		2: "SIGNATURE",
	}
	GenerateAsymmetricDataKeyRequest_KeyType_value = map[string]int32{
		"KEY_TYPE_UNSPECIFIED": 0,
		"ENCRYPTION":           1,
		"SIGNATURE":            2,
	}
)

func (x GenerateAsymmetricDataKeyRequest_KeyType) Enum() *GenerateAsymmetricDataKeyRequest_KeyType {
	p := new(GenerateAsymmetricDataKeyRequest_KeyType)
	*p = x
	return p
}

func (x GenerateAsymmetricDataKeyRequest_KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerateAsymmetricDataKeyRequest_KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_enumTypes[0].Descriptor()
}

func (GenerateAsymmetricDataKeyRequest_KeyType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_enumTypes[0]
}

func (x GenerateAsymmetricDataKeyRequest_KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerateAsymmetricDataKeyRequest_KeyType.Descriptor instead.
func (GenerateAsymmetricDataKeyRequest_KeyType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{14, 0}
}

type SymmetricEncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Version ID, defaults to primary version if not given
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Additional authenticated data, optional
	AadContext []byte `protobuf:"bytes,3,opt,name=aad_context,json=aadContext,proto3" json:"aad_context,omitempty"`
	// Plaintext to be encrypted
	Plaintext []byte `protobuf:"bytes,4,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
}

func (x *SymmetricEncryptRequest) Reset() {
	*x = SymmetricEncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricEncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricEncryptRequest) ProtoMessage() {}

func (x *SymmetricEncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricEncryptRequest.ProtoReflect.Descriptor instead.
func (*SymmetricEncryptRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{0}
}

func (x *SymmetricEncryptRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricEncryptRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *SymmetricEncryptRequest) GetAadContext() []byte {
	if x != nil {
		return x.AadContext
	}
	return nil
}

func (x *SymmetricEncryptRequest) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

type SymmetricEncryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId      string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	VersionId  string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"` // version was used for encryption
	Ciphertext []byte `protobuf:"bytes,3,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`                // encrypted text
}

func (x *SymmetricEncryptResponse) Reset() {
	*x = SymmetricEncryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricEncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricEncryptResponse) ProtoMessage() {}

func (x *SymmetricEncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricEncryptResponse.ProtoReflect.Descriptor instead.
func (*SymmetricEncryptResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{1}
}

func (x *SymmetricEncryptResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricEncryptResponse) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *SymmetricEncryptResponse) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type SymmetricDecryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Additional authenticated data, same as in corresponding EncryptRequest
	AadContext []byte `protobuf:"bytes,2,opt,name=aad_context,json=aadContext,proto3" json:"aad_context,omitempty"`
	// Encrypted text to be decrypted
	Ciphertext []byte `protobuf:"bytes,3,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *SymmetricDecryptRequest) Reset() {
	*x = SymmetricDecryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricDecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricDecryptRequest) ProtoMessage() {}

func (x *SymmetricDecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricDecryptRequest.ProtoReflect.Descriptor instead.
func (*SymmetricDecryptRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{2}
}

func (x *SymmetricDecryptRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricDecryptRequest) GetAadContext() []byte {
	if x != nil {
		return x.AadContext
	}
	return nil
}

func (x *SymmetricDecryptRequest) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type SymmetricDecryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId     string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"` // version was used for decryption
	Plaintext []byte `protobuf:"bytes,3,opt,name=plaintext,proto3" json:"plaintext,omitempty"`                  // decrypted text
}

func (x *SymmetricDecryptResponse) Reset() {
	*x = SymmetricDecryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricDecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricDecryptResponse) ProtoMessage() {}

func (x *SymmetricDecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricDecryptResponse.ProtoReflect.Descriptor instead.
func (*SymmetricDecryptResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{3}
}

func (x *SymmetricDecryptResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricDecryptResponse) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *SymmetricDecryptResponse) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

type SymmetricBatchEncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Items to encrypt
	Items []*SymmetricBatchEncryptRequest_Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SymmetricBatchEncryptRequest) Reset() {
	*x = SymmetricBatchEncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricBatchEncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricBatchEncryptRequest) ProtoMessage() {}

func (x *SymmetricBatchEncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricBatchEncryptRequest.ProtoReflect.Descriptor instead.
func (*SymmetricBatchEncryptRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{4}
}

func (x *SymmetricBatchEncryptRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricBatchEncryptRequest) GetItems() []*SymmetricBatchEncryptRequest_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type SymmetricBatchEncryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string                                `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Items []*SymmetricBatchEncryptResponse_Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"` // encrypted items
}

func (x *SymmetricBatchEncryptResponse) Reset() {
	*x = SymmetricBatchEncryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricBatchEncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricBatchEncryptResponse) ProtoMessage() {}

func (x *SymmetricBatchEncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricBatchEncryptResponse.ProtoReflect.Descriptor instead.
func (*SymmetricBatchEncryptResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{5}
}

func (x *SymmetricBatchEncryptResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricBatchEncryptResponse) GetItems() []*SymmetricBatchEncryptResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type SymmetricBatchDecryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Items to decrypt
	Items []*SymmetricBatchDecryptRequest_Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SymmetricBatchDecryptRequest) Reset() {
	*x = SymmetricBatchDecryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricBatchDecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricBatchDecryptRequest) ProtoMessage() {}

func (x *SymmetricBatchDecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricBatchDecryptRequest.ProtoReflect.Descriptor instead.
func (*SymmetricBatchDecryptRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{6}
}

func (x *SymmetricBatchDecryptRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricBatchDecryptRequest) GetItems() []*SymmetricBatchDecryptRequest_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type SymmetricBatchDecryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string                                `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Items []*SymmetricBatchDecryptResponse_Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"` // decrypted items
}

func (x *SymmetricBatchDecryptResponse) Reset() {
	*x = SymmetricBatchDecryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricBatchDecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricBatchDecryptResponse) ProtoMessage() {}

func (x *SymmetricBatchDecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricBatchDecryptResponse.ProtoReflect.Descriptor instead.
func (*SymmetricBatchDecryptResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{7}
}

func (x *SymmetricBatchDecryptResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricBatchDecryptResponse) GetItems() []*SymmetricBatchDecryptResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type GenerateDataKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Version ID, defaults to primary version if not given
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Additional authenticated data to be used by encryption algorithm (optional)
	AadContext []byte `protobuf:"bytes,3,opt,name=aad_context,json=aadContext,proto3" json:"aad_context,omitempty"`
	// Encryption algorithm create data key for
	DataKeySpec SymmetricAlgorithm `protobuf:"varint,4,opt,name=data_key_spec,json=dataKeySpec,proto3,enum=yandex.cloud.priv.kms.v1.SymmetricAlgorithm" json:"data_key_spec,omitempty"`
	// Plaintext for data key won't be returned if this parameter is true
	SkipPlaintext bool `protobuf:"varint,5,opt,name=skip_plaintext,json=skipPlaintext,proto3" json:"skip_plaintext,omitempty"`
}

func (x *GenerateDataKeyRequest) Reset() {
	*x = GenerateDataKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateDataKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDataKeyRequest) ProtoMessage() {}

func (x *GenerateDataKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDataKeyRequest.ProtoReflect.Descriptor instead.
func (*GenerateDataKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{8}
}

func (x *GenerateDataKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *GenerateDataKeyRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *GenerateDataKeyRequest) GetAadContext() []byte {
	if x != nil {
		return x.AadContext
	}
	return nil
}

func (x *GenerateDataKeyRequest) GetDataKeySpec() SymmetricAlgorithm {
	if x != nil {
		return x.DataKeySpec
	}
	return SymmetricAlgorithm_SYMMETRIC_ALGORITHM_UNSPECIFIED
}

func (x *GenerateDataKeyRequest) GetSkipPlaintext() bool {
	if x != nil {
		return x.SkipPlaintext
	}
	return false
}

type GenerateDataKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId             string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	VersionId         string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`                           // key version used for encryption of data key, optional
	DataKeyPlaintext  []byte `protobuf:"bytes,3,opt,name=data_key_plaintext,json=dataKeyPlaintext,proto3" json:"data_key_plaintext,omitempty"`    // data key in plaintext
	DataKeyCiphertext []byte `protobuf:"bytes,4,opt,name=data_key_ciphertext,json=dataKeyCiphertext,proto3" json:"data_key_ciphertext,omitempty"` // ciphered data key
}

func (x *GenerateDataKeyResponse) Reset() {
	*x = GenerateDataKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateDataKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDataKeyResponse) ProtoMessage() {}

func (x *GenerateDataKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDataKeyResponse.ProtoReflect.Descriptor instead.
func (*GenerateDataKeyResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{9}
}

func (x *GenerateDataKeyResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *GenerateDataKeyResponse) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *GenerateDataKeyResponse) GetDataKeyPlaintext() []byte {
	if x != nil {
		return x.DataKeyPlaintext
	}
	return nil
}

func (x *GenerateDataKeyResponse) GetDataKeyCiphertext() []byte {
	if x != nil {
		return x.DataKeyCiphertext
	}
	return nil
}

type SymmetricReEncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target key id
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Target key version id, optional, defaults to primary
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Target additional authenticated data, optional
	AadContext []byte `protobuf:"bytes,3,opt,name=aad_context,json=aadContext,proto3" json:"aad_context,omitempty"`
	// Source key id, may be equal to target key id
	SourceKeyId string `protobuf:"bytes,4,opt,name=source_key_id,json=sourceKeyId,proto3" json:"source_key_id,omitempty"`
	// Source add-context, may differ from target add-context
	SourceAadContext []byte `protobuf:"bytes,5,opt,name=source_aad_context,json=sourceAadContext,proto3" json:"source_aad_context,omitempty"`
	// Encrypted text to re-encrypt
	Ciphertext []byte `protobuf:"bytes,6,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *SymmetricReEncryptRequest) Reset() {
	*x = SymmetricReEncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricReEncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricReEncryptRequest) ProtoMessage() {}

func (x *SymmetricReEncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricReEncryptRequest.ProtoReflect.Descriptor instead.
func (*SymmetricReEncryptRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{10}
}

func (x *SymmetricReEncryptRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricReEncryptRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *SymmetricReEncryptRequest) GetAadContext() []byte {
	if x != nil {
		return x.AadContext
	}
	return nil
}

func (x *SymmetricReEncryptRequest) GetSourceKeyId() string {
	if x != nil {
		return x.SourceKeyId
	}
	return ""
}

func (x *SymmetricReEncryptRequest) GetSourceAadContext() []byte {
	if x != nil {
		return x.SourceAadContext
	}
	return nil
}

func (x *SymmetricReEncryptRequest) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type SymmetricReEncryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId           string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                                 // target key id
	VersionId       string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`                     // target key version id used for encryption
	SourceKeyId     string `protobuf:"bytes,3,opt,name=source_key_id,json=sourceKeyId,proto3" json:"source_key_id,omitempty"`             // source key id
	SourceVersionId string `protobuf:"bytes,4,opt,name=source_version_id,json=sourceVersionId,proto3" json:"source_version_id,omitempty"` // source key version used for decryption
	Ciphertext      []byte `protobuf:"bytes,5,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`                                    // re-encrypted text
}

func (x *SymmetricReEncryptResponse) Reset() {
	*x = SymmetricReEncryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricReEncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricReEncryptResponse) ProtoMessage() {}

func (x *SymmetricReEncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricReEncryptResponse.ProtoReflect.Descriptor instead.
func (*SymmetricReEncryptResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{11}
}

func (x *SymmetricReEncryptResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricReEncryptResponse) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *SymmetricReEncryptResponse) GetSourceKeyId() string {
	if x != nil {
		return x.SourceKeyId
	}
	return ""
}

func (x *SymmetricReEncryptResponse) GetSourceVersionId() string {
	if x != nil {
		return x.SourceVersionId
	}
	return ""
}

func (x *SymmetricReEncryptResponse) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type GenerateRandomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The folder id to identify and charge customer
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The size of the generated random bytes.
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GenerateRandomRequest) Reset() {
	*x = GenerateRandomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateRandomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRandomRequest) ProtoMessage() {}

func (x *GenerateRandomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRandomRequest.ProtoReflect.Descriptor instead.
func (*GenerateRandomRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{12}
}

func (x *GenerateRandomRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *GenerateRandomRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type GenerateRandomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Random []byte `protobuf:"bytes,1,opt,name=random,proto3" json:"random,omitempty"`
}

func (x *GenerateRandomResponse) Reset() {
	*x = GenerateRandomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateRandomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRandomResponse) ProtoMessage() {}

func (x *GenerateRandomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRandomResponse.ProtoReflect.Descriptor instead.
func (*GenerateRandomResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{13}
}

func (x *GenerateRandomResponse) GetRandom() []byte {
	if x != nil {
		return x.Random
	}
	return nil
}

type GenerateAsymmetricDataKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId      string                                   `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	VersionId  string                                   `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	AadContext []byte                                   `protobuf:"bytes,3,opt,name=aad_context,json=aadContext,proto3" json:"aad_context,omitempty"`
	KeyType    GenerateAsymmetricDataKeyRequest_KeyType `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3,enum=yandex.cloud.priv.kms.v1.GenerateAsymmetricDataKeyRequest_KeyType" json:"key_type,omitempty"`
	// Types that are assignable to KeySpec:
	//
	//	*GenerateAsymmetricDataKeyRequest_EncryptionKeySpec
	//	*GenerateAsymmetricDataKeyRequest_SignatureKeySpec
	KeySpec       isGenerateAsymmetricDataKeyRequest_KeySpec `protobuf_oneof:"key_spec"`
	SkipPlaintext bool                                       `protobuf:"varint,7,opt,name=skip_plaintext,json=skipPlaintext,proto3" json:"skip_plaintext,omitempty"`
}

func (x *GenerateAsymmetricDataKeyRequest) Reset() {
	*x = GenerateAsymmetricDataKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateAsymmetricDataKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAsymmetricDataKeyRequest) ProtoMessage() {}

func (x *GenerateAsymmetricDataKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAsymmetricDataKeyRequest.ProtoReflect.Descriptor instead.
func (*GenerateAsymmetricDataKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{14}
}

func (x *GenerateAsymmetricDataKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *GenerateAsymmetricDataKeyRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *GenerateAsymmetricDataKeyRequest) GetAadContext() []byte {
	if x != nil {
		return x.AadContext
	}
	return nil
}

func (x *GenerateAsymmetricDataKeyRequest) GetKeyType() GenerateAsymmetricDataKeyRequest_KeyType {
	if x != nil {
		return x.KeyType
	}
	return GenerateAsymmetricDataKeyRequest_KEY_TYPE_UNSPECIFIED
}

func (m *GenerateAsymmetricDataKeyRequest) GetKeySpec() isGenerateAsymmetricDataKeyRequest_KeySpec {
	if m != nil {
		return m.KeySpec
	}
	return nil
}

func (x *GenerateAsymmetricDataKeyRequest) GetEncryptionKeySpec() asymmetricencryption.AsymmetricEncryptionAlgorithm {
	if x, ok := x.GetKeySpec().(*GenerateAsymmetricDataKeyRequest_EncryptionKeySpec); ok {
		return x.EncryptionKeySpec
	}
	return asymmetricencryption.AsymmetricEncryptionAlgorithm(0)
}

func (x *GenerateAsymmetricDataKeyRequest) GetSignatureKeySpec() asymmetricsignature.AsymmetricSignatureAlgorithm {
	if x, ok := x.GetKeySpec().(*GenerateAsymmetricDataKeyRequest_SignatureKeySpec); ok {
		return x.SignatureKeySpec
	}
	return asymmetricsignature.AsymmetricSignatureAlgorithm(0)
}

func (x *GenerateAsymmetricDataKeyRequest) GetSkipPlaintext() bool {
	if x != nil {
		return x.SkipPlaintext
	}
	return false
}

type isGenerateAsymmetricDataKeyRequest_KeySpec interface {
	isGenerateAsymmetricDataKeyRequest_KeySpec()
}

type GenerateAsymmetricDataKeyRequest_EncryptionKeySpec struct {
	EncryptionKeySpec asymmetricencryption.AsymmetricEncryptionAlgorithm `protobuf:"varint,5,opt,name=encryption_key_spec,json=encryptionKeySpec,proto3,enum=yandex.cloud.priv.kms.v1.asymmetricencryption.AsymmetricEncryptionAlgorithm,oneof"`
}

type GenerateAsymmetricDataKeyRequest_SignatureKeySpec struct {
	SignatureKeySpec asymmetricsignature.AsymmetricSignatureAlgorithm `protobuf:"varint,6,opt,name=signature_key_spec,json=signatureKeySpec,proto3,enum=yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureAlgorithm,oneof"`
}

func (*GenerateAsymmetricDataKeyRequest_EncryptionKeySpec) isGenerateAsymmetricDataKeyRequest_KeySpec() {
}

func (*GenerateAsymmetricDataKeyRequest_SignatureKeySpec) isGenerateAsymmetricDataKeyRequest_KeySpec() {
}

type GenerateAsymmetricDataKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId                       string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	VersionId                   string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"` // key version used for encryption of data key, optional
	AsymmetricDataKeyPlaintext  []byte `protobuf:"bytes,3,opt,name=asymmetric_data_key_plaintext,json=asymmetricDataKeyPlaintext,proto3" json:"asymmetric_data_key_plaintext,omitempty"`
	AsymmetricDataKeyCiphertext []byte `protobuf:"bytes,4,opt,name=asymmetric_data_key_ciphertext,json=asymmetricDataKeyCiphertext,proto3" json:"asymmetric_data_key_ciphertext,omitempty"`
}

func (x *GenerateAsymmetricDataKeyResponse) Reset() {
	*x = GenerateAsymmetricDataKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateAsymmetricDataKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAsymmetricDataKeyResponse) ProtoMessage() {}

func (x *GenerateAsymmetricDataKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAsymmetricDataKeyResponse.ProtoReflect.Descriptor instead.
func (*GenerateAsymmetricDataKeyResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateAsymmetricDataKeyResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *GenerateAsymmetricDataKeyResponse) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *GenerateAsymmetricDataKeyResponse) GetAsymmetricDataKeyPlaintext() []byte {
	if x != nil {
		return x.AsymmetricDataKeyPlaintext
	}
	return nil
}

func (x *GenerateAsymmetricDataKeyResponse) GetAsymmetricDataKeyCiphertext() []byte {
	if x != nil {
		return x.AsymmetricDataKeyCiphertext
	}
	return nil
}

type SymmetricBatchEncryptRequest_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version ID, defaults to primary version if not given
	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Additional authenticated data, optional
	AadContext []byte `protobuf:"bytes,2,opt,name=aad_context,json=aadContext,proto3" json:"aad_context,omitempty"`
	// Plaintext to be encrypted
	Plaintext []byte `protobuf:"bytes,3,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
}

func (x *SymmetricBatchEncryptRequest_Item) Reset() {
	*x = SymmetricBatchEncryptRequest_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricBatchEncryptRequest_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricBatchEncryptRequest_Item) ProtoMessage() {}

func (x *SymmetricBatchEncryptRequest_Item) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricBatchEncryptRequest_Item.ProtoReflect.Descriptor instead.
func (*SymmetricBatchEncryptRequest_Item) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{4, 0}
}

func (x *SymmetricBatchEncryptRequest_Item) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *SymmetricBatchEncryptRequest_Item) GetAadContext() []byte {
	if x != nil {
		return x.AadContext
	}
	return nil
}

func (x *SymmetricBatchEncryptRequest_Item) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

type SymmetricBatchEncryptResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*SymmetricBatchEncryptResponse_Item_Success
	//	*SymmetricBatchEncryptResponse_Item_Failure
	Data isSymmetricBatchEncryptResponse_Item_Data `protobuf_oneof:"data"`
}

func (x *SymmetricBatchEncryptResponse_Item) Reset() {
	*x = SymmetricBatchEncryptResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricBatchEncryptResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricBatchEncryptResponse_Item) ProtoMessage() {}

func (x *SymmetricBatchEncryptResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricBatchEncryptResponse_Item.ProtoReflect.Descriptor instead.
func (*SymmetricBatchEncryptResponse_Item) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{5, 0}
}

func (m *SymmetricBatchEncryptResponse_Item) GetData() isSymmetricBatchEncryptResponse_Item_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SymmetricBatchEncryptResponse_Item) GetSuccess() *SymmetricBatchEncryptResponse_Success {
	if x, ok := x.GetData().(*SymmetricBatchEncryptResponse_Item_Success); ok {
		return x.Success
	}
	return nil
}

func (x *SymmetricBatchEncryptResponse_Item) GetFailure() *SymmetricBatchEncryptResponse_Failure {
	if x, ok := x.GetData().(*SymmetricBatchEncryptResponse_Item_Failure); ok {
		return x.Failure
	}
	return nil
}

type isSymmetricBatchEncryptResponse_Item_Data interface {
	isSymmetricBatchEncryptResponse_Item_Data()
}

type SymmetricBatchEncryptResponse_Item_Success struct {
	Success *SymmetricBatchEncryptResponse_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type SymmetricBatchEncryptResponse_Item_Failure struct {
	Failure *SymmetricBatchEncryptResponse_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*SymmetricBatchEncryptResponse_Item_Success) isSymmetricBatchEncryptResponse_Item_Data() {}

func (*SymmetricBatchEncryptResponse_Item_Failure) isSymmetricBatchEncryptResponse_Item_Data() {}

type SymmetricBatchEncryptResponse_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId  string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"` // version used for encryption
	Ciphertext []byte `protobuf:"bytes,2,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`                // encrypted text
}

func (x *SymmetricBatchEncryptResponse_Success) Reset() {
	*x = SymmetricBatchEncryptResponse_Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricBatchEncryptResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricBatchEncryptResponse_Success) ProtoMessage() {}

func (x *SymmetricBatchEncryptResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricBatchEncryptResponse_Success.ProtoReflect.Descriptor instead.
func (*SymmetricBatchEncryptResponse_Success) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{5, 1}
}

func (x *SymmetricBatchEncryptResponse_Success) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *SymmetricBatchEncryptResponse_Success) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type SymmetricBatchEncryptResponse_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // error message
}

func (x *SymmetricBatchEncryptResponse_Failure) Reset() {
	*x = SymmetricBatchEncryptResponse_Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricBatchEncryptResponse_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricBatchEncryptResponse_Failure) ProtoMessage() {}

func (x *SymmetricBatchEncryptResponse_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricBatchEncryptResponse_Failure.ProtoReflect.Descriptor instead.
func (*SymmetricBatchEncryptResponse_Failure) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{5, 2}
}

func (x *SymmetricBatchEncryptResponse_Failure) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type SymmetricBatchDecryptRequest_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Additional authenticated data, same as in corresponding EncryptRequest
	AadContext []byte `protobuf:"bytes,1,opt,name=aad_context,json=aadContext,proto3" json:"aad_context,omitempty"`
	// Encrypted text to be decrypted
	Ciphertext []byte `protobuf:"bytes,2,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *SymmetricBatchDecryptRequest_Item) Reset() {
	*x = SymmetricBatchDecryptRequest_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricBatchDecryptRequest_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricBatchDecryptRequest_Item) ProtoMessage() {}

func (x *SymmetricBatchDecryptRequest_Item) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricBatchDecryptRequest_Item.ProtoReflect.Descriptor instead.
func (*SymmetricBatchDecryptRequest_Item) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SymmetricBatchDecryptRequest_Item) GetAadContext() []byte {
	if x != nil {
		return x.AadContext
	}
	return nil
}

func (x *SymmetricBatchDecryptRequest_Item) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type SymmetricBatchDecryptResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*SymmetricBatchDecryptResponse_Item_Success
	//	*SymmetricBatchDecryptResponse_Item_Failure
	Data isSymmetricBatchDecryptResponse_Item_Data `protobuf_oneof:"data"`
}

func (x *SymmetricBatchDecryptResponse_Item) Reset() {
	*x = SymmetricBatchDecryptResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricBatchDecryptResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricBatchDecryptResponse_Item) ProtoMessage() {}

func (x *SymmetricBatchDecryptResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricBatchDecryptResponse_Item.ProtoReflect.Descriptor instead.
func (*SymmetricBatchDecryptResponse_Item) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{7, 0}
}

func (m *SymmetricBatchDecryptResponse_Item) GetData() isSymmetricBatchDecryptResponse_Item_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SymmetricBatchDecryptResponse_Item) GetSuccess() *SymmetricBatchDecryptResponse_Success {
	if x, ok := x.GetData().(*SymmetricBatchDecryptResponse_Item_Success); ok {
		return x.Success
	}
	return nil
}

func (x *SymmetricBatchDecryptResponse_Item) GetFailure() *SymmetricBatchDecryptResponse_Failure {
	if x, ok := x.GetData().(*SymmetricBatchDecryptResponse_Item_Failure); ok {
		return x.Failure
	}
	return nil
}

type isSymmetricBatchDecryptResponse_Item_Data interface {
	isSymmetricBatchDecryptResponse_Item_Data()
}

type SymmetricBatchDecryptResponse_Item_Success struct {
	Success *SymmetricBatchDecryptResponse_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type SymmetricBatchDecryptResponse_Item_Failure struct {
	Failure *SymmetricBatchDecryptResponse_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*SymmetricBatchDecryptResponse_Item_Success) isSymmetricBatchDecryptResponse_Item_Data() {}

func (*SymmetricBatchDecryptResponse_Item_Failure) isSymmetricBatchDecryptResponse_Item_Data() {}

type SymmetricBatchDecryptResponse_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"` // version used for decryption
	Plaintext []byte `protobuf:"bytes,2,opt,name=plaintext,proto3" json:"plaintext,omitempty"`                  // decrypted text
}

func (x *SymmetricBatchDecryptResponse_Success) Reset() {
	*x = SymmetricBatchDecryptResponse_Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricBatchDecryptResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricBatchDecryptResponse_Success) ProtoMessage() {}

func (x *SymmetricBatchDecryptResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricBatchDecryptResponse_Success.ProtoReflect.Descriptor instead.
func (*SymmetricBatchDecryptResponse_Success) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{7, 1}
}

func (x *SymmetricBatchDecryptResponse_Success) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *SymmetricBatchDecryptResponse_Success) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

type SymmetricBatchDecryptResponse_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // error message
}

func (x *SymmetricBatchDecryptResponse_Failure) Reset() {
	*x = SymmetricBatchDecryptResponse_Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricBatchDecryptResponse_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricBatchDecryptResponse_Failure) ProtoMessage() {}

func (x *SymmetricBatchDecryptResponse_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricBatchDecryptResponse_Failure.ProtoReflect.Descriptor instead.
func (*SymmetricBatchDecryptResponse_Failure) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{7, 2}
}

func (x *SymmetricBatchDecryptResponse_Failure) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDesc = []byte{
	0x0a, 0x37, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x2c, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x72, 0x69, 0x76, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x6b, 0x6d, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4b, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x17, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c,
	0x3d, 0x35, 0x30, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x0b, 0x61, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x0e, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x38, 0x31, 0x39, 0x32, 0xc8,
	0x8f, 0x31, 0x01, 0x52, 0x0a, 0x61, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x31, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x13, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x07, 0x3c, 0x3d, 0x33, 0x32,
	0x37, 0x36, 0x38, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x76, 0x0a, 0x18, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x0a,
	0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x53,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04,
	0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0b, 0x61,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x0e, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x38, 0x31, 0x39, 0x32, 0xc8, 0x8f, 0x31, 0x01,
	0x52, 0x0a, 0x61, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0a,
	0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x08, 0xa8, 0x89, 0x31, 0x01, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0x74, 0x0a, 0x18, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xc8, 0x8f, 0x31,
	0x01, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb0, 0x02, 0x0a,
	0x1c, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8,
	0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x51, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x97, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x27,
	0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x12, 0xca, 0x89,
	0x31, 0x06, 0x3c, 0x3d, 0x38, 0x31, 0x39, 0x32, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x03,
	0x52, 0x0a, 0x61, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x13, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x07, 0x3c, 0x3d, 0x33, 0x32, 0x37, 0x36, 0x38,
	0xc8, 0x8f, 0x31, 0x01, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0xcf, 0x03, 0x0a, 0x1d, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xc8, 0x01, 0x0a,
	0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x5b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x48, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x1a, 0x2e, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xf9, 0x01, 0x0a, 0x1c, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x61, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x12, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x38,
	0x31, 0x39, 0x32, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x03, 0x52, 0x0a, 0x61, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xa8, 0x89, 0x31,
	0x01, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0xd3, 0x03,
	0x0a, 0x1d, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x5b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x5b, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x1a, 0x2e, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35,
	0x30, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0b,
	0x61, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x0e, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x38, 0x31, 0x39, 0x32, 0xc8, 0x8f, 0x31,
	0x01, 0x52, 0x0a, 0x61, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x50, 0x0a,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x13,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52,
	0x11, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xb4, 0x02, 0x0a, 0x19, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c,
	0x3d, 0x35, 0x30, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x0b, 0x61, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x0e, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x38, 0x31, 0x39, 0x32, 0xc8,
	0x8f, 0x31, 0x01, 0x52, 0x0a, 0x61, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x30, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04,
	0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xca,
	0x89, 0x31, 0x06, 0x3c, 0x3d, 0x38, 0x31, 0x39, 0x32, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x10, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x28, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x08, 0xa8, 0x89, 0x31, 0x01, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x0a, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x1a, 0x53, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x5a, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xa8, 0x89, 0x31, 0x01, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a,
	0xba, 0x89, 0x31, 0x06, 0x31, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x22, 0x36, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01,
	0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22, 0xf3, 0x04, 0x0a, 0x20, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8,
	0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0b, 0x61,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x0e, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x38, 0x31, 0x39, 0x32, 0xc8, 0x8f, 0x31, 0x01,
	0x52, 0x0a, 0x61, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5d, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7e, 0x0a, 0x13, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x7a, 0x0a, 0x12, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x48, 0x00, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x42,
	0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x45, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x42, 0x0a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22, 0xed,
	0x01, 0x0a, 0x21, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x1d, 0x61, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x1a, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x1e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xc8, 0x8f, 0x31,
	0x01, 0x52, 0x1b, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x32, 0xfa,
	0x07, 0x0a, 0x16, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x07, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x12, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x07, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a,
	0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x36, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f,
	0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x36,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x76, 0x0a, 0x09, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x33, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b,
	0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x73, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x12, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4b,
	0x65, 0x79, 0x12, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x51, 0x42, 0x04, 0x50,
	0x53, 0x43, 0x53, 0x5a, 0x49, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x74, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6b, 0x6d, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescData = file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDesc
)

func file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescData)
	})
	return file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDescData
}

var file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_goTypes = []interface{}{
	(GenerateAsymmetricDataKeyRequest_KeyType)(0),           // 0: yandex.cloud.priv.kms.v1.GenerateAsymmetricDataKeyRequest.KeyType
	(*SymmetricEncryptRequest)(nil),                         // 1: yandex.cloud.priv.kms.v1.SymmetricEncryptRequest
	(*SymmetricEncryptResponse)(nil),                        // 2: yandex.cloud.priv.kms.v1.SymmetricEncryptResponse
	(*SymmetricDecryptRequest)(nil),                         // 3: yandex.cloud.priv.kms.v1.SymmetricDecryptRequest
	(*SymmetricDecryptResponse)(nil),                        // 4: yandex.cloud.priv.kms.v1.SymmetricDecryptResponse
	(*SymmetricBatchEncryptRequest)(nil),                    // 5: yandex.cloud.priv.kms.v1.SymmetricBatchEncryptRequest
	(*SymmetricBatchEncryptResponse)(nil),                   // 6: yandex.cloud.priv.kms.v1.SymmetricBatchEncryptResponse
	(*SymmetricBatchDecryptRequest)(nil),                    // 7: yandex.cloud.priv.kms.v1.SymmetricBatchDecryptRequest
	(*SymmetricBatchDecryptResponse)(nil),                   // 8: yandex.cloud.priv.kms.v1.SymmetricBatchDecryptResponse
	(*GenerateDataKeyRequest)(nil),                          // 9: yandex.cloud.priv.kms.v1.GenerateDataKeyRequest
	(*GenerateDataKeyResponse)(nil),                         // 10: yandex.cloud.priv.kms.v1.GenerateDataKeyResponse
	(*SymmetricReEncryptRequest)(nil),                       // 11: yandex.cloud.priv.kms.v1.SymmetricReEncryptRequest
	(*SymmetricReEncryptResponse)(nil),                      // 12: yandex.cloud.priv.kms.v1.SymmetricReEncryptResponse
	(*GenerateRandomRequest)(nil),                           // 13: yandex.cloud.priv.kms.v1.GenerateRandomRequest
	(*GenerateRandomResponse)(nil),                          // 14: yandex.cloud.priv.kms.v1.GenerateRandomResponse
	(*GenerateAsymmetricDataKeyRequest)(nil),                // 15: yandex.cloud.priv.kms.v1.GenerateAsymmetricDataKeyRequest
	(*GenerateAsymmetricDataKeyResponse)(nil),               // 16: yandex.cloud.priv.kms.v1.GenerateAsymmetricDataKeyResponse
	(*SymmetricBatchEncryptRequest_Item)(nil),               // 17: yandex.cloud.priv.kms.v1.SymmetricBatchEncryptRequest.Item
	(*SymmetricBatchEncryptResponse_Item)(nil),              // 18: yandex.cloud.priv.kms.v1.SymmetricBatchEncryptResponse.Item
	(*SymmetricBatchEncryptResponse_Success)(nil),           // 19: yandex.cloud.priv.kms.v1.SymmetricBatchEncryptResponse.Success
	(*SymmetricBatchEncryptResponse_Failure)(nil),           // 20: yandex.cloud.priv.kms.v1.SymmetricBatchEncryptResponse.Failure
	(*SymmetricBatchDecryptRequest_Item)(nil),               // 21: yandex.cloud.priv.kms.v1.SymmetricBatchDecryptRequest.Item
	(*SymmetricBatchDecryptResponse_Item)(nil),              // 22: yandex.cloud.priv.kms.v1.SymmetricBatchDecryptResponse.Item
	(*SymmetricBatchDecryptResponse_Success)(nil),           // 23: yandex.cloud.priv.kms.v1.SymmetricBatchDecryptResponse.Success
	(*SymmetricBatchDecryptResponse_Failure)(nil),           // 24: yandex.cloud.priv.kms.v1.SymmetricBatchDecryptResponse.Failure
	(SymmetricAlgorithm)(0),                                 // 25: yandex.cloud.priv.kms.v1.SymmetricAlgorithm
	(asymmetricencryption.AsymmetricEncryptionAlgorithm)(0), // 26: yandex.cloud.priv.kms.v1.asymmetricencryption.AsymmetricEncryptionAlgorithm
	(asymmetricsignature.AsymmetricSignatureAlgorithm)(0),   // 27: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureAlgorithm
}
var file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_depIdxs = []int32{
	17, // 0: yandex.cloud.priv.kms.v1.SymmetricBatchEncryptRequest.items:type_name -> yandex.cloud.priv.kms.v1.SymmetricBatchEncryptRequest.Item
	18, // 1: yandex.cloud.priv.kms.v1.SymmetricBatchEncryptResponse.items:type_name -> yandex.cloud.priv.kms.v1.SymmetricBatchEncryptResponse.Item
	21, // 2: yandex.cloud.priv.kms.v1.SymmetricBatchDecryptRequest.items:type_name -> yandex.cloud.priv.kms.v1.SymmetricBatchDecryptRequest.Item
	22, // 3: yandex.cloud.priv.kms.v1.SymmetricBatchDecryptResponse.items:type_name -> yandex.cloud.priv.kms.v1.SymmetricBatchDecryptResponse.Item
	25, // 4: yandex.cloud.priv.kms.v1.GenerateDataKeyRequest.data_key_spec:type_name -> yandex.cloud.priv.kms.v1.SymmetricAlgorithm
	0,  // 5: yandex.cloud.priv.kms.v1.GenerateAsymmetricDataKeyRequest.key_type:type_name -> yandex.cloud.priv.kms.v1.GenerateAsymmetricDataKeyRequest.KeyType
	26, // 6: yandex.cloud.priv.kms.v1.GenerateAsymmetricDataKeyRequest.encryption_key_spec:type_name -> yandex.cloud.priv.kms.v1.asymmetricencryption.AsymmetricEncryptionAlgorithm
	27, // 7: yandex.cloud.priv.kms.v1.GenerateAsymmetricDataKeyRequest.signature_key_spec:type_name -> yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureAlgorithm
	19, // 8: yandex.cloud.priv.kms.v1.SymmetricBatchEncryptResponse.Item.success:type_name -> yandex.cloud.priv.kms.v1.SymmetricBatchEncryptResponse.Success
	20, // 9: yandex.cloud.priv.kms.v1.SymmetricBatchEncryptResponse.Item.failure:type_name -> yandex.cloud.priv.kms.v1.SymmetricBatchEncryptResponse.Failure
	23, // 10: yandex.cloud.priv.kms.v1.SymmetricBatchDecryptResponse.Item.success:type_name -> yandex.cloud.priv.kms.v1.SymmetricBatchDecryptResponse.Success
	24, // 11: yandex.cloud.priv.kms.v1.SymmetricBatchDecryptResponse.Item.failure:type_name -> yandex.cloud.priv.kms.v1.SymmetricBatchDecryptResponse.Failure
	1,  // 12: yandex.cloud.priv.kms.v1.SymmetricCryptoService.Encrypt:input_type -> yandex.cloud.priv.kms.v1.SymmetricEncryptRequest
	3,  // 13: yandex.cloud.priv.kms.v1.SymmetricCryptoService.Decrypt:input_type -> yandex.cloud.priv.kms.v1.SymmetricDecryptRequest
	5,  // 14: yandex.cloud.priv.kms.v1.SymmetricCryptoService.BatchEncrypt:input_type -> yandex.cloud.priv.kms.v1.SymmetricBatchEncryptRequest
	7,  // 15: yandex.cloud.priv.kms.v1.SymmetricCryptoService.BatchDecrypt:input_type -> yandex.cloud.priv.kms.v1.SymmetricBatchDecryptRequest
	11, // 16: yandex.cloud.priv.kms.v1.SymmetricCryptoService.ReEncrypt:input_type -> yandex.cloud.priv.kms.v1.SymmetricReEncryptRequest
	9,  // 17: yandex.cloud.priv.kms.v1.SymmetricCryptoService.GenerateDataKey:input_type -> yandex.cloud.priv.kms.v1.GenerateDataKeyRequest
	13, // 18: yandex.cloud.priv.kms.v1.SymmetricCryptoService.GenerateRandom:input_type -> yandex.cloud.priv.kms.v1.GenerateRandomRequest
	15, // 19: yandex.cloud.priv.kms.v1.SymmetricCryptoService.GenerateAsymmetricDataKey:input_type -> yandex.cloud.priv.kms.v1.GenerateAsymmetricDataKeyRequest
	2,  // 20: yandex.cloud.priv.kms.v1.SymmetricCryptoService.Encrypt:output_type -> yandex.cloud.priv.kms.v1.SymmetricEncryptResponse
	4,  // 21: yandex.cloud.priv.kms.v1.SymmetricCryptoService.Decrypt:output_type -> yandex.cloud.priv.kms.v1.SymmetricDecryptResponse
	6,  // 22: yandex.cloud.priv.kms.v1.SymmetricCryptoService.BatchEncrypt:output_type -> yandex.cloud.priv.kms.v1.SymmetricBatchEncryptResponse
	8,  // 23: yandex.cloud.priv.kms.v1.SymmetricCryptoService.BatchDecrypt:output_type -> yandex.cloud.priv.kms.v1.SymmetricBatchDecryptResponse
	12, // 24: yandex.cloud.priv.kms.v1.SymmetricCryptoService.ReEncrypt:output_type -> yandex.cloud.priv.kms.v1.SymmetricReEncryptResponse
	10, // 25: yandex.cloud.priv.kms.v1.SymmetricCryptoService.GenerateDataKey:output_type -> yandex.cloud.priv.kms.v1.GenerateDataKeyResponse
	14, // 26: yandex.cloud.priv.kms.v1.SymmetricCryptoService.GenerateRandom:output_type -> yandex.cloud.priv.kms.v1.GenerateRandomResponse
	16, // 27: yandex.cloud.priv.kms.v1.SymmetricCryptoService.GenerateAsymmetricDataKey:output_type -> yandex.cloud.priv.kms.v1.GenerateAsymmetricDataKeyResponse
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_init() }
func file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_init() {
	if File_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto != nil {
		return
	}
	file_yandex_cloud_priv_kms_v1_symmetric_key_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricEncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricEncryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricDecryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricDecryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricBatchEncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricBatchEncryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricBatchDecryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricBatchDecryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateDataKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateDataKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricReEncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricReEncryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateRandomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateRandomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateAsymmetricDataKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateAsymmetricDataKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricBatchEncryptRequest_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricBatchEncryptResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricBatchEncryptResponse_Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricBatchEncryptResponse_Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricBatchDecryptRequest_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricBatchDecryptResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricBatchDecryptResponse_Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricBatchDecryptResponse_Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*GenerateAsymmetricDataKeyRequest_EncryptionKeySpec)(nil),
		(*GenerateAsymmetricDataKeyRequest_SignatureKeySpec)(nil),
	}
	file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*SymmetricBatchEncryptResponse_Item_Success)(nil),
		(*SymmetricBatchEncryptResponse_Item_Failure)(nil),
	}
	file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*SymmetricBatchDecryptResponse_Item_Success)(nil),
		(*SymmetricBatchDecryptResponse_Item_Failure)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto = out.File
	file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_rawDesc = nil
	file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_goTypes = nil
	file_yandex_cloud_priv_kms_v1_symmetric_crypto_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SymmetricCryptoServiceClient is the client API for SymmetricCryptoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SymmetricCryptoServiceClient interface {
	Encrypt(ctx context.Context, in *SymmetricEncryptRequest, opts ...grpc.CallOption) (*SymmetricEncryptResponse, error)
	Decrypt(ctx context.Context, in *SymmetricDecryptRequest, opts ...grpc.CallOption) (*SymmetricDecryptResponse, error)
	BatchEncrypt(ctx context.Context, in *SymmetricBatchEncryptRequest, opts ...grpc.CallOption) (*SymmetricBatchEncryptResponse, error)
	BatchDecrypt(ctx context.Context, in *SymmetricBatchDecryptRequest, opts ...grpc.CallOption) (*SymmetricBatchDecryptResponse, error)
	ReEncrypt(ctx context.Context, in *SymmetricReEncryptRequest, opts ...grpc.CallOption) (*SymmetricReEncryptResponse, error)
	GenerateDataKey(ctx context.Context, in *GenerateDataKeyRequest, opts ...grpc.CallOption) (*GenerateDataKeyResponse, error)
	GenerateRandom(ctx context.Context, in *GenerateRandomRequest, opts ...grpc.CallOption) (*GenerateRandomResponse, error)
	GenerateAsymmetricDataKey(ctx context.Context, in *GenerateAsymmetricDataKeyRequest, opts ...grpc.CallOption) (*GenerateAsymmetricDataKeyResponse, error)
}

type symmetricCryptoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSymmetricCryptoServiceClient(cc grpc.ClientConnInterface) SymmetricCryptoServiceClient {
	return &symmetricCryptoServiceClient{cc}
}

func (c *symmetricCryptoServiceClient) Encrypt(ctx context.Context, in *SymmetricEncryptRequest, opts ...grpc.CallOption) (*SymmetricEncryptResponse, error) {
	out := new(SymmetricEncryptResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricCryptoServiceClient) Decrypt(ctx context.Context, in *SymmetricDecryptRequest, opts ...grpc.CallOption) (*SymmetricDecryptResponse, error) {
	out := new(SymmetricDecryptResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricCryptoServiceClient) BatchEncrypt(ctx context.Context, in *SymmetricBatchEncryptRequest, opts ...grpc.CallOption) (*SymmetricBatchEncryptResponse, error) {
	out := new(SymmetricBatchEncryptResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/BatchEncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricCryptoServiceClient) BatchDecrypt(ctx context.Context, in *SymmetricBatchDecryptRequest, opts ...grpc.CallOption) (*SymmetricBatchDecryptResponse, error) {
	out := new(SymmetricBatchDecryptResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/BatchDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricCryptoServiceClient) ReEncrypt(ctx context.Context, in *SymmetricReEncryptRequest, opts ...grpc.CallOption) (*SymmetricReEncryptResponse, error) {
	out := new(SymmetricReEncryptResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/ReEncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricCryptoServiceClient) GenerateDataKey(ctx context.Context, in *GenerateDataKeyRequest, opts ...grpc.CallOption) (*GenerateDataKeyResponse, error) {
	out := new(GenerateDataKeyResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/GenerateDataKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricCryptoServiceClient) GenerateRandom(ctx context.Context, in *GenerateRandomRequest, opts ...grpc.CallOption) (*GenerateRandomResponse, error) {
	out := new(GenerateRandomResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/GenerateRandom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricCryptoServiceClient) GenerateAsymmetricDataKey(ctx context.Context, in *GenerateAsymmetricDataKeyRequest, opts ...grpc.CallOption) (*GenerateAsymmetricDataKeyResponse, error) {
	out := new(GenerateAsymmetricDataKeyResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/GenerateAsymmetricDataKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SymmetricCryptoServiceServer is the server API for SymmetricCryptoService service.
type SymmetricCryptoServiceServer interface {
	Encrypt(context.Context, *SymmetricEncryptRequest) (*SymmetricEncryptResponse, error)
	Decrypt(context.Context, *SymmetricDecryptRequest) (*SymmetricDecryptResponse, error)
	BatchEncrypt(context.Context, *SymmetricBatchEncryptRequest) (*SymmetricBatchEncryptResponse, error)
	BatchDecrypt(context.Context, *SymmetricBatchDecryptRequest) (*SymmetricBatchDecryptResponse, error)
	ReEncrypt(context.Context, *SymmetricReEncryptRequest) (*SymmetricReEncryptResponse, error)
	GenerateDataKey(context.Context, *GenerateDataKeyRequest) (*GenerateDataKeyResponse, error)
	GenerateRandom(context.Context, *GenerateRandomRequest) (*GenerateRandomResponse, error)
	GenerateAsymmetricDataKey(context.Context, *GenerateAsymmetricDataKeyRequest) (*GenerateAsymmetricDataKeyResponse, error)
}

// UnimplementedSymmetricCryptoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSymmetricCryptoServiceServer struct {
}

func (*UnimplementedSymmetricCryptoServiceServer) Encrypt(context.Context, *SymmetricEncryptRequest) (*SymmetricEncryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (*UnimplementedSymmetricCryptoServiceServer) Decrypt(context.Context, *SymmetricDecryptRequest) (*SymmetricDecryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (*UnimplementedSymmetricCryptoServiceServer) BatchEncrypt(context.Context, *SymmetricBatchEncryptRequest) (*SymmetricBatchEncryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchEncrypt not implemented")
}
func (*UnimplementedSymmetricCryptoServiceServer) BatchDecrypt(context.Context, *SymmetricBatchDecryptRequest) (*SymmetricBatchDecryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDecrypt not implemented")
}
func (*UnimplementedSymmetricCryptoServiceServer) ReEncrypt(context.Context, *SymmetricReEncryptRequest) (*SymmetricReEncryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReEncrypt not implemented")
}
func (*UnimplementedSymmetricCryptoServiceServer) GenerateDataKey(context.Context, *GenerateDataKeyRequest) (*GenerateDataKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDataKey not implemented")
}
func (*UnimplementedSymmetricCryptoServiceServer) GenerateRandom(context.Context, *GenerateRandomRequest) (*GenerateRandomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRandom not implemented")
}
func (*UnimplementedSymmetricCryptoServiceServer) GenerateAsymmetricDataKey(context.Context, *GenerateAsymmetricDataKeyRequest) (*GenerateAsymmetricDataKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAsymmetricDataKey not implemented")
}

func RegisterSymmetricCryptoServiceServer(s *grpc.Server, srv SymmetricCryptoServiceServer) {
	s.RegisterService(&_SymmetricCryptoService_serviceDesc, srv)
}

func _SymmetricCryptoService_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymmetricEncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricCryptoServiceServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricCryptoServiceServer).Encrypt(ctx, req.(*SymmetricEncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricCryptoService_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymmetricDecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricCryptoServiceServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricCryptoServiceServer).Decrypt(ctx, req.(*SymmetricDecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricCryptoService_BatchEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymmetricBatchEncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricCryptoServiceServer).BatchEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/BatchEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricCryptoServiceServer).BatchEncrypt(ctx, req.(*SymmetricBatchEncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricCryptoService_BatchDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymmetricBatchDecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricCryptoServiceServer).BatchDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/BatchDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricCryptoServiceServer).BatchDecrypt(ctx, req.(*SymmetricBatchDecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricCryptoService_ReEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymmetricReEncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricCryptoServiceServer).ReEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/ReEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricCryptoServiceServer).ReEncrypt(ctx, req.(*SymmetricReEncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricCryptoService_GenerateDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDataKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricCryptoServiceServer).GenerateDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/GenerateDataKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricCryptoServiceServer).GenerateDataKey(ctx, req.(*GenerateDataKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricCryptoService_GenerateRandom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRandomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricCryptoServiceServer).GenerateRandom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/GenerateRandom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricCryptoServiceServer).GenerateRandom(ctx, req.(*GenerateRandomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricCryptoService_GenerateAsymmetricDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAsymmetricDataKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricCryptoServiceServer).GenerateAsymmetricDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricCryptoService/GenerateAsymmetricDataKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricCryptoServiceServer).GenerateAsymmetricDataKey(ctx, req.(*GenerateAsymmetricDataKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SymmetricCryptoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.priv.kms.v1.SymmetricCryptoService",
	HandlerType: (*SymmetricCryptoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encrypt",
			Handler:    _SymmetricCryptoService_Encrypt_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _SymmetricCryptoService_Decrypt_Handler,
		},
		{
			MethodName: "BatchEncrypt",
			Handler:    _SymmetricCryptoService_BatchEncrypt_Handler,
		},
		{
			MethodName: "BatchDecrypt",
			Handler:    _SymmetricCryptoService_BatchDecrypt_Handler,
		},
		{
			MethodName: "ReEncrypt",
			Handler:    _SymmetricCryptoService_ReEncrypt_Handler,
		},
		{
			MethodName: "GenerateDataKey",
			Handler:    _SymmetricCryptoService_GenerateDataKey_Handler,
		},
		{
			MethodName: "GenerateRandom",
			Handler:    _SymmetricCryptoService_GenerateRandom_Handler,
		},
		{
			MethodName: "GenerateAsymmetricDataKey",
			Handler:    _SymmetricCryptoService_GenerateAsymmetricDataKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/priv/kms/v1/symmetric_crypto_service.proto",
}
