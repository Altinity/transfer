// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.3
// source: yandex/cloud/priv/kms/v1/symmetric_key_service.proto

package kms

import (
	_ "github.com/doublecloud/tross/cloud/bitbucket/common-api/yandex/cloud/api"
	_ "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv"
	access "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/access"
	operation "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/operation"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This enum is needed to specify possible values of Violation.type of com.google.rpc.PreconditionFailure
// in the methods SetupDelegation and RevokeDelegation.
// Violation.type value will be a string representation of DelegationFailureType enum value.
// This type is related to ServiceControlFailureType.
type DelegationFailureType int32

const (
	DelegationFailureType_DELEGATION_FAILURE_TYPE_UNSPECIFIED DelegationFailureType = 0
	DelegationFailureType_SERVICE_NOT_FOUND                   DelegationFailureType = 1
	DelegationFailureType_BAD_SERVICE_STATUS                  DelegationFailureType = 2 // service control is probably disabled
	DelegationFailureType_DELEGATION_REFERENCE_ALREADY_EXISTS DelegationFailureType = 3
	DelegationFailureType_DELEGATION_REFERENCE_NOT_FOUND      DelegationFailureType = 4
	DelegationFailureType_BAD_DELEGATION_REFERENCE_STATUS     DelegationFailureType = 5 // setup/revoke delegation in progress for service+key
)

// Enum value maps for DelegationFailureType.
var (
	DelegationFailureType_name = map[int32]string{
		0: "DELEGATION_FAILURE_TYPE_UNSPECIFIED",
		1: "SERVICE_NOT_FOUND",
		2: "BAD_SERVICE_STATUS",
		3: "DELEGATION_REFERENCE_ALREADY_EXISTS",
		4: "DELEGATION_REFERENCE_NOT_FOUND",
		5: "BAD_DELEGATION_REFERENCE_STATUS",
	}
	DelegationFailureType_value = map[string]int32{
		"DELEGATION_FAILURE_TYPE_UNSPECIFIED": 0,
		"SERVICE_NOT_FOUND":                   1,
		"BAD_SERVICE_STATUS":                  2,
		"DELEGATION_REFERENCE_ALREADY_EXISTS": 3,
		"DELEGATION_REFERENCE_NOT_FOUND":      4,
		"BAD_DELEGATION_REFERENCE_STATUS":     5,
	}
)

func (x DelegationFailureType) Enum() *DelegationFailureType {
	p := new(DelegationFailureType)
	*p = x
	return p
}

func (x DelegationFailureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DelegationFailureType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_enumTypes[0].Descriptor()
}

func (DelegationFailureType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_enumTypes[0]
}

func (x DelegationFailureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DelegationFailureType.Descriptor instead.
func (DelegationFailureType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{0}
}

type CreateSymmetricKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId           string               `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	Name               string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels             map[string]string    `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefaultAlgorithm   SymmetricAlgorithm   `protobuf:"varint,5,opt,name=default_algorithm,json=defaultAlgorithm,proto3,enum=yandex.cloud.priv.kms.v1.SymmetricAlgorithm" json:"default_algorithm,omitempty"`
	RotationPeriod     *durationpb.Duration `protobuf:"bytes,6,opt,name=rotation_period,json=rotationPeriod,proto3" json:"rotation_period,omitempty"`
	DeletionProtection bool                 `protobuf:"varint,7,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
}

func (x *CreateSymmetricKeyRequest) Reset() {
	*x = CreateSymmetricKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSymmetricKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSymmetricKeyRequest) ProtoMessage() {}

func (x *CreateSymmetricKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSymmetricKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateSymmetricKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSymmetricKeyRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateSymmetricKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSymmetricKeyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSymmetricKeyRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateSymmetricKeyRequest) GetDefaultAlgorithm() SymmetricAlgorithm {
	if x != nil {
		return x.DefaultAlgorithm
	}
	return SymmetricAlgorithm_SYMMETRIC_ALGORITHM_UNSPECIFIED
}

func (x *CreateSymmetricKeyRequest) GetRotationPeriod() *durationpb.Duration {
	if x != nil {
		return x.RotationPeriod
	}
	return nil
}

func (x *CreateSymmetricKeyRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

type CreateWithIdSymmetricKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FolderId           string               `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	Name               string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description        string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Labels             map[string]string    `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefaultAlgorithm   SymmetricAlgorithm   `protobuf:"varint,6,opt,name=default_algorithm,json=defaultAlgorithm,proto3,enum=yandex.cloud.priv.kms.v1.SymmetricAlgorithm" json:"default_algorithm,omitempty"`
	RotationPeriod     *durationpb.Duration `protobuf:"bytes,7,opt,name=rotation_period,json=rotationPeriod,proto3" json:"rotation_period,omitempty"`
	DeletionProtection bool                 `protobuf:"varint,8,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
}

func (x *CreateWithIdSymmetricKeyRequest) Reset() {
	*x = CreateWithIdSymmetricKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWithIdSymmetricKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWithIdSymmetricKeyRequest) ProtoMessage() {}

func (x *CreateWithIdSymmetricKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWithIdSymmetricKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateWithIdSymmetricKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateWithIdSymmetricKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateWithIdSymmetricKeyRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateWithIdSymmetricKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWithIdSymmetricKeyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateWithIdSymmetricKeyRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateWithIdSymmetricKeyRequest) GetDefaultAlgorithm() SymmetricAlgorithm {
	if x != nil {
		return x.DefaultAlgorithm
	}
	return SymmetricAlgorithm_SYMMETRIC_ALGORITHM_UNSPECIFIED
}

func (x *CreateWithIdSymmetricKeyRequest) GetRotationPeriod() *durationpb.Duration {
	if x != nil {
		return x.RotationPeriod
	}
	return nil
}

func (x *CreateWithIdSymmetricKeyRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

type CreateSymmetricKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId            string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	PrimaryVersionId string `protobuf:"bytes,2,opt,name=primary_version_id,json=primaryVersionId,proto3" json:"primary_version_id,omitempty"`
}

func (x *CreateSymmetricKeyMetadata) Reset() {
	*x = CreateSymmetricKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSymmetricKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSymmetricKeyMetadata) ProtoMessage() {}

func (x *CreateSymmetricKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSymmetricKeyMetadata.ProtoReflect.Descriptor instead.
func (*CreateSymmetricKeyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSymmetricKeyMetadata) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *CreateSymmetricKeyMetadata) GetPrimaryVersionId() string {
	if x != nil {
		return x.PrimaryVersionId
	}
	return ""
}

type GetSymmetricKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *GetSymmetricKeyRequest) Reset() {
	*x = GetSymmetricKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSymmetricKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSymmetricKeyRequest) ProtoMessage() {}

func (x *GetSymmetricKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSymmetricKeyRequest.ProtoReflect.Descriptor instead.
func (*GetSymmetricKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetSymmetricKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type ListSymmetricKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId  string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	PageSize  int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Filter    string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy   string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListSymmetricKeysRequest) Reset() {
	*x = ListSymmetricKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSymmetricKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSymmetricKeysRequest) ProtoMessage() {}

func (x *ListSymmetricKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSymmetricKeysRequest.ProtoReflect.Descriptor instead.
func (*ListSymmetricKeysRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListSymmetricKeysRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListSymmetricKeysRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSymmetricKeysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSymmetricKeysRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListSymmetricKeysRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListSymmetricKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys          []*SymmetricKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	NextPageToken string          `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSymmetricKeysResponse) Reset() {
	*x = ListSymmetricKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSymmetricKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSymmetricKeysResponse) ProtoMessage() {}

func (x *ListSymmetricKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSymmetricKeysResponse.ProtoReflect.Descriptor instead.
func (*ListSymmetricKeysResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListSymmetricKeysResponse) GetKeys() []*SymmetricKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ListSymmetricKeysResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListSymmetricKeyVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId     string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	PageSize  int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Filter    string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy   string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListSymmetricKeyVersionsRequest) Reset() {
	*x = ListSymmetricKeyVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSymmetricKeyVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSymmetricKeyVersionsRequest) ProtoMessage() {}

func (x *ListSymmetricKeyVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSymmetricKeyVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListSymmetricKeyVersionsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListSymmetricKeyVersionsRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *ListSymmetricKeyVersionsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSymmetricKeyVersionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSymmetricKeyVersionsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListSymmetricKeyVersionsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListSymmetricKeyVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyVersions   []*SymmetricKeyVersion `protobuf:"bytes,1,rep,name=key_versions,json=keyVersions,proto3" json:"key_versions,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSymmetricKeyVersionsResponse) Reset() {
	*x = ListSymmetricKeyVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSymmetricKeyVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSymmetricKeyVersionsResponse) ProtoMessage() {}

func (x *ListSymmetricKeyVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSymmetricKeyVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListSymmetricKeyVersionsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListSymmetricKeyVersionsResponse) GetKeyVersions() []*SymmetricKeyVersion {
	if x != nil {
		return x.KeyVersions
	}
	return nil
}

func (x *ListSymmetricKeyVersionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateSymmetricKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId              string                 `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UpdateMask         *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	Name               string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status             SymmetricKey_Status    `protobuf:"varint,5,opt,name=status,proto3,enum=yandex.cloud.priv.kms.v1.SymmetricKey_Status" json:"status,omitempty"` // Only setting ACTIVE / INACTIVE statuses supported by this method
	Labels             map[string]string      `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefaultAlgorithm   SymmetricAlgorithm     `protobuf:"varint,7,opt,name=default_algorithm,json=defaultAlgorithm,proto3,enum=yandex.cloud.priv.kms.v1.SymmetricAlgorithm" json:"default_algorithm,omitempty"`
	RotationPeriod     *durationpb.Duration   `protobuf:"bytes,8,opt,name=rotation_period,json=rotationPeriod,proto3" json:"rotation_period,omitempty"` // period between two automatic rotations
	DeletionProtection bool                   `protobuf:"varint,9,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
}

func (x *UpdateSymmetricKeyRequest) Reset() {
	*x = UpdateSymmetricKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSymmetricKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSymmetricKeyRequest) ProtoMessage() {}

func (x *UpdateSymmetricKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSymmetricKeyRequest.ProtoReflect.Descriptor instead.
func (*UpdateSymmetricKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateSymmetricKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *UpdateSymmetricKeyRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateSymmetricKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSymmetricKeyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSymmetricKeyRequest) GetStatus() SymmetricKey_Status {
	if x != nil {
		return x.Status
	}
	return SymmetricKey_STATUS_UNSPECIFIED
}

func (x *UpdateSymmetricKeyRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateSymmetricKeyRequest) GetDefaultAlgorithm() SymmetricAlgorithm {
	if x != nil {
		return x.DefaultAlgorithm
	}
	return SymmetricAlgorithm_SYMMETRIC_ALGORITHM_UNSPECIFIED
}

func (x *UpdateSymmetricKeyRequest) GetRotationPeriod() *durationpb.Duration {
	if x != nil {
		return x.RotationPeriod
	}
	return nil
}

func (x *UpdateSymmetricKeyRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

type UpdateSymmetricKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *UpdateSymmetricKeyMetadata) Reset() {
	*x = UpdateSymmetricKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSymmetricKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSymmetricKeyMetadata) ProtoMessage() {}

func (x *UpdateSymmetricKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSymmetricKeyMetadata.ProtoReflect.Descriptor instead.
func (*UpdateSymmetricKeyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSymmetricKeyMetadata) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type DeleteSymmetricKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *DeleteSymmetricKeyRequest) Reset() {
	*x = DeleteSymmetricKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSymmetricKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSymmetricKeyRequest) ProtoMessage() {}

func (x *DeleteSymmetricKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSymmetricKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteSymmetricKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteSymmetricKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type DeleteSymmetricKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *DeleteSymmetricKeyMetadata) Reset() {
	*x = DeleteSymmetricKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSymmetricKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSymmetricKeyMetadata) ProtoMessage() {}

func (x *DeleteSymmetricKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSymmetricKeyMetadata.ProtoReflect.Descriptor instead.
func (*DeleteSymmetricKeyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteSymmetricKeyMetadata) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type CancelDeleteSymmetricKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *CancelDeleteSymmetricKeyRequest) Reset() {
	*x = CancelDeleteSymmetricKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelDeleteSymmetricKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelDeleteSymmetricKeyRequest) ProtoMessage() {}

func (x *CancelDeleteSymmetricKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelDeleteSymmetricKeyRequest.ProtoReflect.Descriptor instead.
func (*CancelDeleteSymmetricKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{12}
}

func (x *CancelDeleteSymmetricKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type CancelDeleteSymmetricKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *CancelDeleteSymmetricKeyMetadata) Reset() {
	*x = CancelDeleteSymmetricKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelDeleteSymmetricKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelDeleteSymmetricKeyMetadata) ProtoMessage() {}

func (x *CancelDeleteSymmetricKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelDeleteSymmetricKeyMetadata.ProtoReflect.Descriptor instead.
func (*CancelDeleteSymmetricKeyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{13}
}

func (x *CancelDeleteSymmetricKeyMetadata) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type SetPrimarySymmetricKeyVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId     string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *SetPrimarySymmetricKeyVersionRequest) Reset() {
	*x = SetPrimarySymmetricKeyVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPrimarySymmetricKeyVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrimarySymmetricKeyVersionRequest) ProtoMessage() {}

func (x *SetPrimarySymmetricKeyVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrimarySymmetricKeyVersionRequest.ProtoReflect.Descriptor instead.
func (*SetPrimarySymmetricKeyVersionRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{14}
}

func (x *SetPrimarySymmetricKeyVersionRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SetPrimarySymmetricKeyVersionRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type SetPrimarySymmetricKeyVersionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId     string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *SetPrimarySymmetricKeyVersionMetadata) Reset() {
	*x = SetPrimarySymmetricKeyVersionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPrimarySymmetricKeyVersionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrimarySymmetricKeyVersionMetadata) ProtoMessage() {}

func (x *SetPrimarySymmetricKeyVersionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrimarySymmetricKeyVersionMetadata.ProtoReflect.Descriptor instead.
func (*SetPrimarySymmetricKeyVersionMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{15}
}

func (x *SetPrimarySymmetricKeyVersionMetadata) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SetPrimarySymmetricKeyVersionMetadata) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type RotateSymmetricKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *RotateSymmetricKeyRequest) Reset() {
	*x = RotateSymmetricKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateSymmetricKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateSymmetricKeyRequest) ProtoMessage() {}

func (x *RotateSymmetricKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateSymmetricKeyRequest.ProtoReflect.Descriptor instead.
func (*RotateSymmetricKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{16}
}

func (x *RotateSymmetricKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type RotateSymmetricKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId               string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	NewPrimaryVersionId string `protobuf:"bytes,2,opt,name=new_primary_version_id,json=newPrimaryVersionId,proto3" json:"new_primary_version_id,omitempty"`
}

func (x *RotateSymmetricKeyMetadata) Reset() {
	*x = RotateSymmetricKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateSymmetricKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateSymmetricKeyMetadata) ProtoMessage() {}

func (x *RotateSymmetricKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateSymmetricKeyMetadata.ProtoReflect.Descriptor instead.
func (*RotateSymmetricKeyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{17}
}

func (x *RotateSymmetricKeyMetadata) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *RotateSymmetricKeyMetadata) GetNewPrimaryVersionId() string {
	if x != nil {
		return x.NewPrimaryVersionId
	}
	return ""
}

type ScheduleSymmetricKeyVersionDestructionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId     string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// The version will be destroyed after pending period has passed. Pending period defaults to 7 days
	PendingPeriod *durationpb.Duration `protobuf:"bytes,3,opt,name=pending_period,json=pendingPeriod,proto3" json:"pending_period,omitempty"`
}

func (x *ScheduleSymmetricKeyVersionDestructionRequest) Reset() {
	*x = ScheduleSymmetricKeyVersionDestructionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleSymmetricKeyVersionDestructionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleSymmetricKeyVersionDestructionRequest) ProtoMessage() {}

func (x *ScheduleSymmetricKeyVersionDestructionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleSymmetricKeyVersionDestructionRequest.ProtoReflect.Descriptor instead.
func (*ScheduleSymmetricKeyVersionDestructionRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{18}
}

func (x *ScheduleSymmetricKeyVersionDestructionRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *ScheduleSymmetricKeyVersionDestructionRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *ScheduleSymmetricKeyVersionDestructionRequest) GetPendingPeriod() *durationpb.Duration {
	if x != nil {
		return x.PendingPeriod
	}
	return nil
}

type ScheduleSymmetricKeyVersionDestructionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId     string                 `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	VersionId string                 `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	DestroyAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=destroy_at,json=destroyAt,proto3" json:"destroy_at,omitempty"`
}

func (x *ScheduleSymmetricKeyVersionDestructionMetadata) Reset() {
	*x = ScheduleSymmetricKeyVersionDestructionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleSymmetricKeyVersionDestructionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleSymmetricKeyVersionDestructionMetadata) ProtoMessage() {}

func (x *ScheduleSymmetricKeyVersionDestructionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleSymmetricKeyVersionDestructionMetadata.ProtoReflect.Descriptor instead.
func (*ScheduleSymmetricKeyVersionDestructionMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{19}
}

func (x *ScheduleSymmetricKeyVersionDestructionMetadata) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *ScheduleSymmetricKeyVersionDestructionMetadata) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *ScheduleSymmetricKeyVersionDestructionMetadata) GetDestroyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DestroyAt
	}
	return nil
}

type CancelSymmetricKeyVersionDestructionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId     string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *CancelSymmetricKeyVersionDestructionRequest) Reset() {
	*x = CancelSymmetricKeyVersionDestructionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSymmetricKeyVersionDestructionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSymmetricKeyVersionDestructionRequest) ProtoMessage() {}

func (x *CancelSymmetricKeyVersionDestructionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSymmetricKeyVersionDestructionRequest.ProtoReflect.Descriptor instead.
func (*CancelSymmetricKeyVersionDestructionRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{20}
}

func (x *CancelSymmetricKeyVersionDestructionRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *CancelSymmetricKeyVersionDestructionRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type CancelSymmetricKeyVersionDestructionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId     string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *CancelSymmetricKeyVersionDestructionMetadata) Reset() {
	*x = CancelSymmetricKeyVersionDestructionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSymmetricKeyVersionDestructionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSymmetricKeyVersionDestructionMetadata) ProtoMessage() {}

func (x *CancelSymmetricKeyVersionDestructionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSymmetricKeyVersionDestructionMetadata.ProtoReflect.Descriptor instead.
func (*CancelSymmetricKeyVersionDestructionMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{21}
}

func (x *CancelSymmetricKeyVersionDestructionMetadata) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *CancelSymmetricKeyVersionDestructionMetadata) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type ListSymmetricKeyOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Default value: 100.
	PageSize  int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSymmetricKeyOperationsRequest) Reset() {
	*x = ListSymmetricKeyOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSymmetricKeyOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSymmetricKeyOperationsRequest) ProtoMessage() {}

func (x *ListSymmetricKeyOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSymmetricKeyOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListSymmetricKeyOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{22}
}

func (x *ListSymmetricKeyOperationsRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *ListSymmetricKeyOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSymmetricKeyOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSymmetricKeyOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations    []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSymmetricKeyOperationsResponse) Reset() {
	*x = ListSymmetricKeyOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSymmetricKeyOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSymmetricKeyOperationsResponse) ProtoMessage() {}

func (x *ListSymmetricKeyOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSymmetricKeyOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListSymmetricKeyOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListSymmetricKeyOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListSymmetricKeyOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type SetupDelegationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId           string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	MicroserviceId      string `protobuf:"bytes,2,opt,name=microservice_id,json=microserviceId,proto3" json:"microservice_id,omitempty"`
	TargetKmsKeyId      string `protobuf:"bytes,3,opt,name=target_kms_key_id,json=targetKmsKeyId,proto3" json:"target_kms_key_id,omitempty"`
	Referrer            string `protobuf:"bytes,4,opt,name=referrer,proto3" json:"referrer,omitempty"`
	OnBehalfOfSubjectId string `protobuf:"bytes,5,opt,name=on_behalf_of_subject_id,json=onBehalfOfSubjectId,proto3" json:"on_behalf_of_subject_id,omitempty"`
}

func (x *SetupDelegationRequest) Reset() {
	*x = SetupDelegationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupDelegationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupDelegationRequest) ProtoMessage() {}

func (x *SetupDelegationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupDelegationRequest.ProtoReflect.Descriptor instead.
func (*SetupDelegationRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{24}
}

func (x *SetupDelegationRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *SetupDelegationRequest) GetMicroserviceId() string {
	if x != nil {
		return x.MicroserviceId
	}
	return ""
}

func (x *SetupDelegationRequest) GetTargetKmsKeyId() string {
	if x != nil {
		return x.TargetKmsKeyId
	}
	return ""
}

func (x *SetupDelegationRequest) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *SetupDelegationRequest) GetOnBehalfOfSubjectId() string {
	if x != nil {
		return x.OnBehalfOfSubjectId
	}
	return ""
}

type SetupDelegationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *SetupDelegationMetadata) Reset() {
	*x = SetupDelegationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupDelegationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupDelegationMetadata) ProtoMessage() {}

func (x *SetupDelegationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupDelegationMetadata.ProtoReflect.Descriptor instead.
func (*SetupDelegationMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{25}
}

func (x *SetupDelegationMetadata) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type RevokeDelegationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId      string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	MicroserviceId string `protobuf:"bytes,2,opt,name=microservice_id,json=microserviceId,proto3" json:"microservice_id,omitempty"`
	TargetKmsKeyId string `protobuf:"bytes,3,opt,name=target_kms_key_id,json=targetKmsKeyId,proto3" json:"target_kms_key_id,omitempty"`
	Referrer       string `protobuf:"bytes,4,opt,name=referrer,proto3" json:"referrer,omitempty"`
}

func (x *RevokeDelegationRequest) Reset() {
	*x = RevokeDelegationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeDelegationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeDelegationRequest) ProtoMessage() {}

func (x *RevokeDelegationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeDelegationRequest.ProtoReflect.Descriptor instead.
func (*RevokeDelegationRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{26}
}

func (x *RevokeDelegationRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *RevokeDelegationRequest) GetMicroserviceId() string {
	if x != nil {
		return x.MicroserviceId
	}
	return ""
}

func (x *RevokeDelegationRequest) GetTargetKmsKeyId() string {
	if x != nil {
		return x.TargetKmsKeyId
	}
	return ""
}

func (x *RevokeDelegationRequest) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

type RevokeDelegationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *RevokeDelegationMetadata) Reset() {
	*x = RevokeDelegationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeDelegationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeDelegationMetadata) ProtoMessage() {}

func (x *RevokeDelegationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeDelegationMetadata.ProtoReflect.Descriptor instead.
func (*RevokeDelegationMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{27}
}

func (x *RevokeDelegationMetadata) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

// mirrors IAM resource
type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP(), []int{28}
}

func (x *Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_yandex_cloud_priv_kms_v1_symmetric_key_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDesc = []byte{
	0x0a, 0x34, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x04, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89,
	0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xca, 0x89, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d,
	0x31, 0x30, 0x32, 0x34, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x94, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x3b, 0xb2, 0x89, 0x31, 0x0b, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x5d, 0x2a, 0xc2, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0xca, 0x89, 0x31, 0x04,
	0x3c, 0x3d, 0x36, 0x33, 0xf2, 0x89, 0x31, 0x18, 0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b,
	0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x1a, 0x04, 0x3c, 0x3d, 0x36, 0x33,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xdb, 0x04, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x64, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d,
	0x35, 0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x89, 0x31, 0x05,
	0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b,
	0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x3b, 0xb2, 0x89, 0x31, 0x0b, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x5d, 0x2a, 0xc2, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d,
	0x36, 0x33, 0xf2, 0x89, 0x31, 0x18, 0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x1a, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52,
	0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x61, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35,
	0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a,
	0xba, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x89, 0x31, 0x05, 0x3c, 0x3d,
	0x31, 0x30, 0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x22, 0x7f, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04,
	0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a,
	0xba, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x89, 0x31, 0x05, 0x3c, 0x3d,
	0x31, 0x30, 0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x22, 0x9c, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6b, 0x65, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xb9, 0x05, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x04, 0xa8, 0x89, 0x31, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x89, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0x89, 0x31, 0x06,
	0x3c, 0x3d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3b, 0xb2, 0x89,
	0x31, 0x0b, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0xc2, 0x89, 0x31,
	0x04, 0x3c, 0x3d, 0x36, 0x34, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0xf2, 0x89, 0x31,
	0x18, 0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x5d, 0x2a, 0x1a, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x59, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x42, 0x0a, 0x0f,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x22, 0x40, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31,
	0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x22, 0x39, 0x0a, 0x20, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x24, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35,
	0x30, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89,
	0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x25, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x19, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x1a, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x65, 0x77,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xc3, 0x01, 0x0a, 0x2d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31,
	0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x74, 0x22, 0x7f, 0x0a, 0x2b, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca,
	0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x2c, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x9b, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31,
	0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0a, 0xba, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x89, 0x31, 0x05, 0x3c,
	0x3d, 0x31, 0x30, 0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x94, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c,
	0x3d, 0x35, 0x30, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35,
	0x30, 0x52, 0x0e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x6d, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xa8, 0x89,
	0x31, 0x01, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x6d, 0x73, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x42,
	0x0a, 0x17, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x13, 0x6f,
	0x6e, 0x42, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x38, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xc6, 0x01, 0x0a,
	0x17, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89,
	0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xa8, 0x89, 0x31, 0x01, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x4a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89,
	0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89,
	0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0xe1, 0x01, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x02, 0x12, 0x27,
	0x0a, 0x23, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x4c, 0x45, 0x47,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x42,
	0x41, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x05,
	0x32, 0xcb, 0x16, 0x0a, 0x13, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x2e, 0xb2, 0xd2, 0x2a, 0x2a, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x0c, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0xb2, 0xd2, 0x2a, 0x2a, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x5f, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x6f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x95,
	0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0xb2, 0xd2, 0x2a, 0x2a, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x95, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e,
	0xb2, 0xd2, 0x2a, 0x2a, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x0c, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0xa7,
	0x01, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x34, 0xb2, 0xd2, 0x2a, 0x30, 0x0a, 0x20, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x53, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0xb6, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0xb2, 0xd2, 0x2a, 0x35, 0x0a, 0x25, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x0c, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0xd8, 0x01, 0x0a, 0x1a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x49, 0xb2, 0xd2, 0x2a, 0x45, 0x0a, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x13, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xd2, 0x01, 0x0a,
	0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0xb2, 0xd2, 0x2a, 0x43, 0x0a, 0x2c,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x13, 0x53, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x95, 0x01, 0x0a, 0x06, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0xb2, 0xd2, 0x2a, 0x2a, 0x0a,
	0x1a, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x53, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x33, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0xb2, 0xd2, 0x2a, 0x39,
	0x0a, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xb7, 0x01, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x40, 0xb2, 0xd2, 0x2a, 0x3c, 0x0a, 0x23, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x34, 0xb2, 0xd2, 0x2a, 0x30, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0xb2, 0xd2, 0x2a, 0x31, 0x0a, 0x18, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x51,
	0x42, 0x04, 0x50, 0x53, 0x4b, 0x53, 0x5a, 0x49, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6b, 0x6d,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescData = file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDesc
)

func file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescData)
	})
	return file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDescData
}

var file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_goTypes = []interface{}{
	(DelegationFailureType)(0),                             // 0: yandex.cloud.priv.kms.v1.DelegationFailureType
	(*CreateSymmetricKeyRequest)(nil),                      // 1: yandex.cloud.priv.kms.v1.CreateSymmetricKeyRequest
	(*CreateWithIdSymmetricKeyRequest)(nil),                // 2: yandex.cloud.priv.kms.v1.CreateWithIdSymmetricKeyRequest
	(*CreateSymmetricKeyMetadata)(nil),                     // 3: yandex.cloud.priv.kms.v1.CreateSymmetricKeyMetadata
	(*GetSymmetricKeyRequest)(nil),                         // 4: yandex.cloud.priv.kms.v1.GetSymmetricKeyRequest
	(*ListSymmetricKeysRequest)(nil),                       // 5: yandex.cloud.priv.kms.v1.ListSymmetricKeysRequest
	(*ListSymmetricKeysResponse)(nil),                      // 6: yandex.cloud.priv.kms.v1.ListSymmetricKeysResponse
	(*ListSymmetricKeyVersionsRequest)(nil),                // 7: yandex.cloud.priv.kms.v1.ListSymmetricKeyVersionsRequest
	(*ListSymmetricKeyVersionsResponse)(nil),               // 8: yandex.cloud.priv.kms.v1.ListSymmetricKeyVersionsResponse
	(*UpdateSymmetricKeyRequest)(nil),                      // 9: yandex.cloud.priv.kms.v1.UpdateSymmetricKeyRequest
	(*UpdateSymmetricKeyMetadata)(nil),                     // 10: yandex.cloud.priv.kms.v1.UpdateSymmetricKeyMetadata
	(*DeleteSymmetricKeyRequest)(nil),                      // 11: yandex.cloud.priv.kms.v1.DeleteSymmetricKeyRequest
	(*DeleteSymmetricKeyMetadata)(nil),                     // 12: yandex.cloud.priv.kms.v1.DeleteSymmetricKeyMetadata
	(*CancelDeleteSymmetricKeyRequest)(nil),                // 13: yandex.cloud.priv.kms.v1.CancelDeleteSymmetricKeyRequest
	(*CancelDeleteSymmetricKeyMetadata)(nil),               // 14: yandex.cloud.priv.kms.v1.CancelDeleteSymmetricKeyMetadata
	(*SetPrimarySymmetricKeyVersionRequest)(nil),           // 15: yandex.cloud.priv.kms.v1.SetPrimarySymmetricKeyVersionRequest
	(*SetPrimarySymmetricKeyVersionMetadata)(nil),          // 16: yandex.cloud.priv.kms.v1.SetPrimarySymmetricKeyVersionMetadata
	(*RotateSymmetricKeyRequest)(nil),                      // 17: yandex.cloud.priv.kms.v1.RotateSymmetricKeyRequest
	(*RotateSymmetricKeyMetadata)(nil),                     // 18: yandex.cloud.priv.kms.v1.RotateSymmetricKeyMetadata
	(*ScheduleSymmetricKeyVersionDestructionRequest)(nil),  // 19: yandex.cloud.priv.kms.v1.ScheduleSymmetricKeyVersionDestructionRequest
	(*ScheduleSymmetricKeyVersionDestructionMetadata)(nil), // 20: yandex.cloud.priv.kms.v1.ScheduleSymmetricKeyVersionDestructionMetadata
	(*CancelSymmetricKeyVersionDestructionRequest)(nil),    // 21: yandex.cloud.priv.kms.v1.CancelSymmetricKeyVersionDestructionRequest
	(*CancelSymmetricKeyVersionDestructionMetadata)(nil),   // 22: yandex.cloud.priv.kms.v1.CancelSymmetricKeyVersionDestructionMetadata
	(*ListSymmetricKeyOperationsRequest)(nil),              // 23: yandex.cloud.priv.kms.v1.ListSymmetricKeyOperationsRequest
	(*ListSymmetricKeyOperationsResponse)(nil),             // 24: yandex.cloud.priv.kms.v1.ListSymmetricKeyOperationsResponse
	(*SetupDelegationRequest)(nil),                         // 25: yandex.cloud.priv.kms.v1.SetupDelegationRequest
	(*SetupDelegationMetadata)(nil),                        // 26: yandex.cloud.priv.kms.v1.SetupDelegationMetadata
	(*RevokeDelegationRequest)(nil),                        // 27: yandex.cloud.priv.kms.v1.RevokeDelegationRequest
	(*RevokeDelegationMetadata)(nil),                       // 28: yandex.cloud.priv.kms.v1.RevokeDelegationMetadata
	(*Resource)(nil),                                       // 29: yandex.cloud.priv.kms.v1.Resource
	nil,                                                    // 30: yandex.cloud.priv.kms.v1.CreateSymmetricKeyRequest.LabelsEntry
	nil,                                                    // 31: yandex.cloud.priv.kms.v1.CreateWithIdSymmetricKeyRequest.LabelsEntry
	nil,                                                    // 32: yandex.cloud.priv.kms.v1.UpdateSymmetricKeyRequest.LabelsEntry
	(SymmetricAlgorithm)(0),                                // 33: yandex.cloud.priv.kms.v1.SymmetricAlgorithm
	(*durationpb.Duration)(nil),                            // 34: google.protobuf.Duration
	(*SymmetricKey)(nil),                                   // 35: yandex.cloud.priv.kms.v1.SymmetricKey
	(*SymmetricKeyVersion)(nil),                            // 36: yandex.cloud.priv.kms.v1.SymmetricKeyVersion
	(*fieldmaskpb.FieldMask)(nil),                          // 37: google.protobuf.FieldMask
	(SymmetricKey_Status)(0),                               // 38: yandex.cloud.priv.kms.v1.SymmetricKey.Status
	(*timestamppb.Timestamp)(nil),                          // 39: google.protobuf.Timestamp
	(*operation.Operation)(nil),                            // 40: yandex.cloud.priv.operation.Operation
	(*access.ListAccessBindingsRequest)(nil),               // 41: yandex.cloud.priv.access.ListAccessBindingsRequest
	(*access.SetAccessBindingsRequest)(nil),                // 42: yandex.cloud.priv.access.SetAccessBindingsRequest
	(*access.UpdateAccessBindingsRequest)(nil),             // 43: yandex.cloud.priv.access.UpdateAccessBindingsRequest
	(*access.ListAccessBindingsResponse)(nil),              // 44: yandex.cloud.priv.access.ListAccessBindingsResponse
}
var file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_depIdxs = []int32{
	30, // 0: yandex.cloud.priv.kms.v1.CreateSymmetricKeyRequest.labels:type_name -> yandex.cloud.priv.kms.v1.CreateSymmetricKeyRequest.LabelsEntry
	33, // 1: yandex.cloud.priv.kms.v1.CreateSymmetricKeyRequest.default_algorithm:type_name -> yandex.cloud.priv.kms.v1.SymmetricAlgorithm
	34, // 2: yandex.cloud.priv.kms.v1.CreateSymmetricKeyRequest.rotation_period:type_name -> google.protobuf.Duration
	31, // 3: yandex.cloud.priv.kms.v1.CreateWithIdSymmetricKeyRequest.labels:type_name -> yandex.cloud.priv.kms.v1.CreateWithIdSymmetricKeyRequest.LabelsEntry
	33, // 4: yandex.cloud.priv.kms.v1.CreateWithIdSymmetricKeyRequest.default_algorithm:type_name -> yandex.cloud.priv.kms.v1.SymmetricAlgorithm
	34, // 5: yandex.cloud.priv.kms.v1.CreateWithIdSymmetricKeyRequest.rotation_period:type_name -> google.protobuf.Duration
	35, // 6: yandex.cloud.priv.kms.v1.ListSymmetricKeysResponse.keys:type_name -> yandex.cloud.priv.kms.v1.SymmetricKey
	36, // 7: yandex.cloud.priv.kms.v1.ListSymmetricKeyVersionsResponse.key_versions:type_name -> yandex.cloud.priv.kms.v1.SymmetricKeyVersion
	37, // 8: yandex.cloud.priv.kms.v1.UpdateSymmetricKeyRequest.update_mask:type_name -> google.protobuf.FieldMask
	38, // 9: yandex.cloud.priv.kms.v1.UpdateSymmetricKeyRequest.status:type_name -> yandex.cloud.priv.kms.v1.SymmetricKey.Status
	32, // 10: yandex.cloud.priv.kms.v1.UpdateSymmetricKeyRequest.labels:type_name -> yandex.cloud.priv.kms.v1.UpdateSymmetricKeyRequest.LabelsEntry
	33, // 11: yandex.cloud.priv.kms.v1.UpdateSymmetricKeyRequest.default_algorithm:type_name -> yandex.cloud.priv.kms.v1.SymmetricAlgorithm
	34, // 12: yandex.cloud.priv.kms.v1.UpdateSymmetricKeyRequest.rotation_period:type_name -> google.protobuf.Duration
	34, // 13: yandex.cloud.priv.kms.v1.ScheduleSymmetricKeyVersionDestructionRequest.pending_period:type_name -> google.protobuf.Duration
	39, // 14: yandex.cloud.priv.kms.v1.ScheduleSymmetricKeyVersionDestructionMetadata.destroy_at:type_name -> google.protobuf.Timestamp
	40, // 15: yandex.cloud.priv.kms.v1.ListSymmetricKeyOperationsResponse.operations:type_name -> yandex.cloud.priv.operation.Operation
	1,  // 16: yandex.cloud.priv.kms.v1.SymmetricKeyService.Create:input_type -> yandex.cloud.priv.kms.v1.CreateSymmetricKeyRequest
	2,  // 17: yandex.cloud.priv.kms.v1.SymmetricKeyService.CreateWithId:input_type -> yandex.cloud.priv.kms.v1.CreateWithIdSymmetricKeyRequest
	4,  // 18: yandex.cloud.priv.kms.v1.SymmetricKeyService.Get:input_type -> yandex.cloud.priv.kms.v1.GetSymmetricKeyRequest
	5,  // 19: yandex.cloud.priv.kms.v1.SymmetricKeyService.List:input_type -> yandex.cloud.priv.kms.v1.ListSymmetricKeysRequest
	7,  // 20: yandex.cloud.priv.kms.v1.SymmetricKeyService.ListVersions:input_type -> yandex.cloud.priv.kms.v1.ListSymmetricKeyVersionsRequest
	9,  // 21: yandex.cloud.priv.kms.v1.SymmetricKeyService.Update:input_type -> yandex.cloud.priv.kms.v1.UpdateSymmetricKeyRequest
	11, // 22: yandex.cloud.priv.kms.v1.SymmetricKeyService.Delete:input_type -> yandex.cloud.priv.kms.v1.DeleteSymmetricKeyRequest
	13, // 23: yandex.cloud.priv.kms.v1.SymmetricKeyService.CancelDelete:input_type -> yandex.cloud.priv.kms.v1.CancelDeleteSymmetricKeyRequest
	15, // 24: yandex.cloud.priv.kms.v1.SymmetricKeyService.SetPrimaryVersion:input_type -> yandex.cloud.priv.kms.v1.SetPrimarySymmetricKeyVersionRequest
	19, // 25: yandex.cloud.priv.kms.v1.SymmetricKeyService.ScheduleVersionDestruction:input_type -> yandex.cloud.priv.kms.v1.ScheduleSymmetricKeyVersionDestructionRequest
	21, // 26: yandex.cloud.priv.kms.v1.SymmetricKeyService.CancelVersionDestruction:input_type -> yandex.cloud.priv.kms.v1.CancelSymmetricKeyVersionDestructionRequest
	17, // 27: yandex.cloud.priv.kms.v1.SymmetricKeyService.Rotate:input_type -> yandex.cloud.priv.kms.v1.RotateSymmetricKeyRequest
	23, // 28: yandex.cloud.priv.kms.v1.SymmetricKeyService.ListOperations:input_type -> yandex.cloud.priv.kms.v1.ListSymmetricKeyOperationsRequest
	41, // 29: yandex.cloud.priv.kms.v1.SymmetricKeyService.ListAccessBindings:input_type -> yandex.cloud.priv.access.ListAccessBindingsRequest
	42, // 30: yandex.cloud.priv.kms.v1.SymmetricKeyService.SetAccessBindings:input_type -> yandex.cloud.priv.access.SetAccessBindingsRequest
	43, // 31: yandex.cloud.priv.kms.v1.SymmetricKeyService.UpdateAccessBindings:input_type -> yandex.cloud.priv.access.UpdateAccessBindingsRequest
	25, // 32: yandex.cloud.priv.kms.v1.SymmetricKeyService.SetupDelegation:input_type -> yandex.cloud.priv.kms.v1.SetupDelegationRequest
	27, // 33: yandex.cloud.priv.kms.v1.SymmetricKeyService.RevokeDelegation:input_type -> yandex.cloud.priv.kms.v1.RevokeDelegationRequest
	40, // 34: yandex.cloud.priv.kms.v1.SymmetricKeyService.Create:output_type -> yandex.cloud.priv.operation.Operation
	40, // 35: yandex.cloud.priv.kms.v1.SymmetricKeyService.CreateWithId:output_type -> yandex.cloud.priv.operation.Operation
	35, // 36: yandex.cloud.priv.kms.v1.SymmetricKeyService.Get:output_type -> yandex.cloud.priv.kms.v1.SymmetricKey
	6,  // 37: yandex.cloud.priv.kms.v1.SymmetricKeyService.List:output_type -> yandex.cloud.priv.kms.v1.ListSymmetricKeysResponse
	8,  // 38: yandex.cloud.priv.kms.v1.SymmetricKeyService.ListVersions:output_type -> yandex.cloud.priv.kms.v1.ListSymmetricKeyVersionsResponse
	40, // 39: yandex.cloud.priv.kms.v1.SymmetricKeyService.Update:output_type -> yandex.cloud.priv.operation.Operation
	40, // 40: yandex.cloud.priv.kms.v1.SymmetricKeyService.Delete:output_type -> yandex.cloud.priv.operation.Operation
	40, // 41: yandex.cloud.priv.kms.v1.SymmetricKeyService.CancelDelete:output_type -> yandex.cloud.priv.operation.Operation
	40, // 42: yandex.cloud.priv.kms.v1.SymmetricKeyService.SetPrimaryVersion:output_type -> yandex.cloud.priv.operation.Operation
	40, // 43: yandex.cloud.priv.kms.v1.SymmetricKeyService.ScheduleVersionDestruction:output_type -> yandex.cloud.priv.operation.Operation
	40, // 44: yandex.cloud.priv.kms.v1.SymmetricKeyService.CancelVersionDestruction:output_type -> yandex.cloud.priv.operation.Operation
	40, // 45: yandex.cloud.priv.kms.v1.SymmetricKeyService.Rotate:output_type -> yandex.cloud.priv.operation.Operation
	24, // 46: yandex.cloud.priv.kms.v1.SymmetricKeyService.ListOperations:output_type -> yandex.cloud.priv.kms.v1.ListSymmetricKeyOperationsResponse
	44, // 47: yandex.cloud.priv.kms.v1.SymmetricKeyService.ListAccessBindings:output_type -> yandex.cloud.priv.access.ListAccessBindingsResponse
	40, // 48: yandex.cloud.priv.kms.v1.SymmetricKeyService.SetAccessBindings:output_type -> yandex.cloud.priv.operation.Operation
	40, // 49: yandex.cloud.priv.kms.v1.SymmetricKeyService.UpdateAccessBindings:output_type -> yandex.cloud.priv.operation.Operation
	40, // 50: yandex.cloud.priv.kms.v1.SymmetricKeyService.SetupDelegation:output_type -> yandex.cloud.priv.operation.Operation
	40, // 51: yandex.cloud.priv.kms.v1.SymmetricKeyService.RevokeDelegation:output_type -> yandex.cloud.priv.operation.Operation
	34, // [34:52] is the sub-list for method output_type
	16, // [16:34] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_init() }
func file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_init() {
	if File_yandex_cloud_priv_kms_v1_symmetric_key_service_proto != nil {
		return
	}
	file_yandex_cloud_priv_kms_v1_symmetric_key_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSymmetricKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWithIdSymmetricKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSymmetricKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSymmetricKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSymmetricKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSymmetricKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSymmetricKeyVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSymmetricKeyVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSymmetricKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSymmetricKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSymmetricKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSymmetricKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelDeleteSymmetricKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelDeleteSymmetricKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPrimarySymmetricKeyVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPrimarySymmetricKeyVersionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateSymmetricKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateSymmetricKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleSymmetricKeyVersionDestructionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleSymmetricKeyVersionDestructionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSymmetricKeyVersionDestructionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSymmetricKeyVersionDestructionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSymmetricKeyOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSymmetricKeyOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupDelegationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupDelegationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeDelegationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeDelegationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_kms_v1_symmetric_key_service_proto = out.File
	file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_rawDesc = nil
	file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_goTypes = nil
	file_yandex_cloud_priv_kms_v1_symmetric_key_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SymmetricKeyServiceClient is the client API for SymmetricKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SymmetricKeyServiceClient interface {
	Create(ctx context.Context, in *CreateSymmetricKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	CreateWithId(ctx context.Context, in *CreateWithIdSymmetricKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	Get(ctx context.Context, in *GetSymmetricKeyRequest, opts ...grpc.CallOption) (*SymmetricKey, error)
	List(ctx context.Context, in *ListSymmetricKeysRequest, opts ...grpc.CallOption) (*ListSymmetricKeysResponse, error)
	ListVersions(ctx context.Context, in *ListSymmetricKeyVersionsRequest, opts ...grpc.CallOption) (*ListSymmetricKeyVersionsResponse, error)
	Update(ctx context.Context, in *UpdateSymmetricKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// delete the key and schedule all its version for destruction
	Delete(ctx context.Context, in *DeleteSymmetricKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// cancel previously scheduled key deletion
	CancelDelete(ctx context.Context, in *CancelDeleteSymmetricKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	SetPrimaryVersion(ctx context.Context, in *SetPrimarySymmetricKeyVersionRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	ScheduleVersionDestruction(ctx context.Context, in *ScheduleSymmetricKeyVersionDestructionRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	CancelVersionDestruction(ctx context.Context, in *CancelSymmetricKeyVersionDestructionRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// rotates given key: create new key version and make it primary
	Rotate(ctx context.Context, in *RotateSymmetricKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Lists operations for the specified symmetric key.
	ListOperations(ctx context.Context, in *ListSymmetricKeyOperationsRequest, opts ...grpc.CallOption) (*ListSymmetricKeyOperationsResponse, error)
	ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	SetupDelegation(ctx context.Context, in *SetupDelegationRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	RevokeDelegation(ctx context.Context, in *RevokeDelegationRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type symmetricKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSymmetricKeyServiceClient(cc grpc.ClientConnInterface) SymmetricKeyServiceClient {
	return &symmetricKeyServiceClient{cc}
}

func (c *symmetricKeyServiceClient) Create(ctx context.Context, in *CreateSymmetricKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) CreateWithId(ctx context.Context, in *CreateWithIdSymmetricKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/CreateWithId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) Get(ctx context.Context, in *GetSymmetricKeyRequest, opts ...grpc.CallOption) (*SymmetricKey, error) {
	out := new(SymmetricKey)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) List(ctx context.Context, in *ListSymmetricKeysRequest, opts ...grpc.CallOption) (*ListSymmetricKeysResponse, error) {
	out := new(ListSymmetricKeysResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) ListVersions(ctx context.Context, in *ListSymmetricKeyVersionsRequest, opts ...grpc.CallOption) (*ListSymmetricKeyVersionsResponse, error) {
	out := new(ListSymmetricKeyVersionsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/ListVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) Update(ctx context.Context, in *UpdateSymmetricKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) Delete(ctx context.Context, in *DeleteSymmetricKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) CancelDelete(ctx context.Context, in *CancelDeleteSymmetricKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/CancelDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) SetPrimaryVersion(ctx context.Context, in *SetPrimarySymmetricKeyVersionRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/SetPrimaryVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) ScheduleVersionDestruction(ctx context.Context, in *ScheduleSymmetricKeyVersionDestructionRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/ScheduleVersionDestruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) CancelVersionDestruction(ctx context.Context, in *CancelSymmetricKeyVersionDestructionRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/CancelVersionDestruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) Rotate(ctx context.Context, in *RotateSymmetricKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/Rotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) ListOperations(ctx context.Context, in *ListSymmetricKeyOperationsRequest, opts ...grpc.CallOption) (*ListSymmetricKeyOperationsResponse, error) {
	out := new(ListSymmetricKeyOperationsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	out := new(access.ListAccessBindingsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/ListAccessBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/SetAccessBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/UpdateAccessBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) SetupDelegation(ctx context.Context, in *SetupDelegationRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/SetupDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *symmetricKeyServiceClient) RevokeDelegation(ctx context.Context, in *RevokeDelegationRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.SymmetricKeyService/RevokeDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SymmetricKeyServiceServer is the server API for SymmetricKeyService service.
type SymmetricKeyServiceServer interface {
	Create(context.Context, *CreateSymmetricKeyRequest) (*operation.Operation, error)
	CreateWithId(context.Context, *CreateWithIdSymmetricKeyRequest) (*operation.Operation, error)
	Get(context.Context, *GetSymmetricKeyRequest) (*SymmetricKey, error)
	List(context.Context, *ListSymmetricKeysRequest) (*ListSymmetricKeysResponse, error)
	ListVersions(context.Context, *ListSymmetricKeyVersionsRequest) (*ListSymmetricKeyVersionsResponse, error)
	Update(context.Context, *UpdateSymmetricKeyRequest) (*operation.Operation, error)
	// delete the key and schedule all its version for destruction
	Delete(context.Context, *DeleteSymmetricKeyRequest) (*operation.Operation, error)
	// cancel previously scheduled key deletion
	CancelDelete(context.Context, *CancelDeleteSymmetricKeyRequest) (*operation.Operation, error)
	SetPrimaryVersion(context.Context, *SetPrimarySymmetricKeyVersionRequest) (*operation.Operation, error)
	ScheduleVersionDestruction(context.Context, *ScheduleSymmetricKeyVersionDestructionRequest) (*operation.Operation, error)
	CancelVersionDestruction(context.Context, *CancelSymmetricKeyVersionDestructionRequest) (*operation.Operation, error)
	// rotates given key: create new key version and make it primary
	Rotate(context.Context, *RotateSymmetricKeyRequest) (*operation.Operation, error)
	// Lists operations for the specified symmetric key.
	ListOperations(context.Context, *ListSymmetricKeyOperationsRequest) (*ListSymmetricKeyOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error)
	SetupDelegation(context.Context, *SetupDelegationRequest) (*operation.Operation, error)
	RevokeDelegation(context.Context, *RevokeDelegationRequest) (*operation.Operation, error)
}

// UnimplementedSymmetricKeyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSymmetricKeyServiceServer struct {
}

func (*UnimplementedSymmetricKeyServiceServer) Create(context.Context, *CreateSymmetricKeyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) CreateWithId(context.Context, *CreateWithIdSymmetricKeyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithId not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) Get(context.Context, *GetSymmetricKeyRequest) (*SymmetricKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) List(context.Context, *ListSymmetricKeysRequest) (*ListSymmetricKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) ListVersions(context.Context, *ListSymmetricKeyVersionsRequest) (*ListSymmetricKeyVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVersions not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) Update(context.Context, *UpdateSymmetricKeyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) Delete(context.Context, *DeleteSymmetricKeyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) CancelDelete(context.Context, *CancelDeleteSymmetricKeyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDelete not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) SetPrimaryVersion(context.Context, *SetPrimarySymmetricKeyVersionRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrimaryVersion not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) ScheduleVersionDestruction(context.Context, *ScheduleSymmetricKeyVersionDestructionRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleVersionDestruction not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) CancelVersionDestruction(context.Context, *CancelSymmetricKeyVersionDestructionRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelVersionDestruction not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) Rotate(context.Context, *RotateSymmetricKeyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rotate not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) ListOperations(context.Context, *ListSymmetricKeyOperationsRequest) (*ListSymmetricKeyOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessBindings not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccessBindings not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessBindings not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) SetupDelegation(context.Context, *SetupDelegationRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupDelegation not implemented")
}
func (*UnimplementedSymmetricKeyServiceServer) RevokeDelegation(context.Context, *RevokeDelegationRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeDelegation not implemented")
}

func RegisterSymmetricKeyServiceServer(s *grpc.Server, srv SymmetricKeyServiceServer) {
	s.RegisterService(&_SymmetricKeyService_serviceDesc, srv)
}

func _SymmetricKeyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSymmetricKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).Create(ctx, req.(*CreateSymmetricKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_CreateWithId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithIdSymmetricKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).CreateWithId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/CreateWithId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).CreateWithId(ctx, req.(*CreateWithIdSymmetricKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSymmetricKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).Get(ctx, req.(*GetSymmetricKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSymmetricKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).List(ctx, req.(*ListSymmetricKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_ListVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSymmetricKeyVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).ListVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/ListVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).ListVersions(ctx, req.(*ListSymmetricKeyVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSymmetricKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).Update(ctx, req.(*UpdateSymmetricKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSymmetricKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).Delete(ctx, req.(*DeleteSymmetricKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_CancelDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDeleteSymmetricKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).CancelDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/CancelDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).CancelDelete(ctx, req.(*CancelDeleteSymmetricKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_SetPrimaryVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPrimarySymmetricKeyVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).SetPrimaryVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/SetPrimaryVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).SetPrimaryVersion(ctx, req.(*SetPrimarySymmetricKeyVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_ScheduleVersionDestruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleSymmetricKeyVersionDestructionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).ScheduleVersionDestruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/ScheduleVersionDestruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).ScheduleVersionDestruction(ctx, req.(*ScheduleSymmetricKeyVersionDestructionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_CancelVersionDestruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSymmetricKeyVersionDestructionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).CancelVersionDestruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/CancelVersionDestruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).CancelVersionDestruction(ctx, req.(*CancelSymmetricKeyVersionDestructionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_Rotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateSymmetricKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).Rotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/Rotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).Rotate(ctx, req.(*RotateSymmetricKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSymmetricKeyOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).ListOperations(ctx, req.(*ListSymmetricKeyOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_ListAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.ListAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).ListAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/ListAccessBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).ListAccessBindings(ctx, req.(*access.ListAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_SetAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.SetAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).SetAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/SetAccessBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).SetAccessBindings(ctx, req.(*access.SetAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_UpdateAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.UpdateAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).UpdateAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/UpdateAccessBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).UpdateAccessBindings(ctx, req.(*access.UpdateAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_SetupDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).SetupDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/SetupDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).SetupDelegation(ctx, req.(*SetupDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SymmetricKeyService_RevokeDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SymmetricKeyServiceServer).RevokeDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.SymmetricKeyService/RevokeDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SymmetricKeyServiceServer).RevokeDelegation(ctx, req.(*RevokeDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SymmetricKeyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.priv.kms.v1.SymmetricKeyService",
	HandlerType: (*SymmetricKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SymmetricKeyService_Create_Handler,
		},
		{
			MethodName: "CreateWithId",
			Handler:    _SymmetricKeyService_CreateWithId_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SymmetricKeyService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SymmetricKeyService_List_Handler,
		},
		{
			MethodName: "ListVersions",
			Handler:    _SymmetricKeyService_ListVersions_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SymmetricKeyService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SymmetricKeyService_Delete_Handler,
		},
		{
			MethodName: "CancelDelete",
			Handler:    _SymmetricKeyService_CancelDelete_Handler,
		},
		{
			MethodName: "SetPrimaryVersion",
			Handler:    _SymmetricKeyService_SetPrimaryVersion_Handler,
		},
		{
			MethodName: "ScheduleVersionDestruction",
			Handler:    _SymmetricKeyService_ScheduleVersionDestruction_Handler,
		},
		{
			MethodName: "CancelVersionDestruction",
			Handler:    _SymmetricKeyService_CancelVersionDestruction_Handler,
		},
		{
			MethodName: "Rotate",
			Handler:    _SymmetricKeyService_Rotate_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _SymmetricKeyService_ListOperations_Handler,
		},
		{
			MethodName: "ListAccessBindings",
			Handler:    _SymmetricKeyService_ListAccessBindings_Handler,
		},
		{
			MethodName: "SetAccessBindings",
			Handler:    _SymmetricKeyService_SetAccessBindings_Handler,
		},
		{
			MethodName: "UpdateAccessBindings",
			Handler:    _SymmetricKeyService_UpdateAccessBindings_Handler,
		},
		{
			MethodName: "SetupDelegation",
			Handler:    _SymmetricKeyService_SetupDelegation_Handler,
		},
		{
			MethodName: "RevokeDelegation",
			Handler:    _SymmetricKeyService_RevokeDelegation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/priv/kms/v1/symmetric_key_service.proto",
}
