// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.3
// source: yandex/cloud/priv/kms/v1/asymmetricsignature/asymmetric_signature_key_service.proto

package kms

import (
	_ "github.com/doublecloud/tross/cloud/bitbucket/common-api/yandex/cloud/api"
	_ "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv"
	access "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/access"
	operation "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/operation"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateAsymmetricSignatureKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId           string                       `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	Name               string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels             map[string]string            `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SignatureAlgorithm AsymmetricSignatureAlgorithm `protobuf:"varint,5,opt,name=signature_algorithm,json=signatureAlgorithm,proto3,enum=yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureAlgorithm" json:"signature_algorithm,omitempty"`
	DeletionProtection bool                         `protobuf:"varint,6,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
}

func (x *CreateAsymmetricSignatureKeyRequest) Reset() {
	*x = CreateAsymmetricSignatureKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAsymmetricSignatureKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAsymmetricSignatureKeyRequest) ProtoMessage() {}

func (x *CreateAsymmetricSignatureKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAsymmetricSignatureKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateAsymmetricSignatureKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAsymmetricSignatureKeyRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateAsymmetricSignatureKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAsymmetricSignatureKeyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateAsymmetricSignatureKeyRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateAsymmetricSignatureKeyRequest) GetSignatureAlgorithm() AsymmetricSignatureAlgorithm {
	if x != nil {
		return x.SignatureAlgorithm
	}
	return AsymmetricSignatureAlgorithm_ASYMMETRIC_SIGNATURE_ALGORITHM_UNSPECIFIED
}

func (x *CreateAsymmetricSignatureKeyRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

type CreateWithIdAsymmetricSignatureKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FolderId           string                       `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	Name               string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Labels             map[string]string            `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SignatureAlgorithm AsymmetricSignatureAlgorithm `protobuf:"varint,6,opt,name=signature_algorithm,json=signatureAlgorithm,proto3,enum=yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureAlgorithm" json:"signature_algorithm,omitempty"`
	DeletionProtection bool                         `protobuf:"varint,7,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
}

func (x *CreateWithIdAsymmetricSignatureKeyRequest) Reset() {
	*x = CreateWithIdAsymmetricSignatureKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWithIdAsymmetricSignatureKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWithIdAsymmetricSignatureKeyRequest) ProtoMessage() {}

func (x *CreateWithIdAsymmetricSignatureKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWithIdAsymmetricSignatureKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateWithIdAsymmetricSignatureKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateWithIdAsymmetricSignatureKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateWithIdAsymmetricSignatureKeyRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateWithIdAsymmetricSignatureKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWithIdAsymmetricSignatureKeyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateWithIdAsymmetricSignatureKeyRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateWithIdAsymmetricSignatureKeyRequest) GetSignatureAlgorithm() AsymmetricSignatureAlgorithm {
	if x != nil {
		return x.SignatureAlgorithm
	}
	return AsymmetricSignatureAlgorithm_ASYMMETRIC_SIGNATURE_ALGORITHM_UNSPECIFIED
}

func (x *CreateWithIdAsymmetricSignatureKeyRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

type CreateAsymmetricSignatureKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *CreateAsymmetricSignatureKeyMetadata) Reset() {
	*x = CreateAsymmetricSignatureKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAsymmetricSignatureKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAsymmetricSignatureKeyMetadata) ProtoMessage() {}

func (x *CreateAsymmetricSignatureKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAsymmetricSignatureKeyMetadata.ProtoReflect.Descriptor instead.
func (*CreateAsymmetricSignatureKeyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAsymmetricSignatureKeyMetadata) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type GetAsymmetricSignatureKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *GetAsymmetricSignatureKeyRequest) Reset() {
	*x = GetAsymmetricSignatureKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAsymmetricSignatureKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAsymmetricSignatureKeyRequest) ProtoMessage() {}

func (x *GetAsymmetricSignatureKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAsymmetricSignatureKeyRequest.ProtoReflect.Descriptor instead.
func (*GetAsymmetricSignatureKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetAsymmetricSignatureKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type ListAsymmetricSignatureKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId  string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	PageSize  int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Filter    string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy   string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListAsymmetricSignatureKeysRequest) Reset() {
	*x = ListAsymmetricSignatureKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAsymmetricSignatureKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAsymmetricSignatureKeysRequest) ProtoMessage() {}

func (x *ListAsymmetricSignatureKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAsymmetricSignatureKeysRequest.ProtoReflect.Descriptor instead.
func (*ListAsymmetricSignatureKeysRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListAsymmetricSignatureKeysRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListAsymmetricSignatureKeysRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAsymmetricSignatureKeysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListAsymmetricSignatureKeysRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListAsymmetricSignatureKeysRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListAsymmetricSignatureKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys          []*AsymmetricSignatureKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	NextPageToken string                    `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAsymmetricSignatureKeysResponse) Reset() {
	*x = ListAsymmetricSignatureKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAsymmetricSignatureKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAsymmetricSignatureKeysResponse) ProtoMessage() {}

func (x *ListAsymmetricSignatureKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAsymmetricSignatureKeysResponse.ProtoReflect.Descriptor instead.
func (*ListAsymmetricSignatureKeysResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListAsymmetricSignatureKeysResponse) GetKeys() []*AsymmetricSignatureKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ListAsymmetricSignatureKeysResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateAsymmetricSignatureKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId              string                        `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UpdateMask         *fieldmaskpb.FieldMask        `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	Name               string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                        `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status             AsymmetricSignatureKey_Status `protobuf:"varint,5,opt,name=status,proto3,enum=yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKey_Status" json:"status,omitempty"` // Only setting ACTIVE / INACTIVE statuses supported by this method
	Labels             map[string]string             `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DeletionProtection bool                          `protobuf:"varint,7,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
}

func (x *UpdateAsymmetricSignatureKeyRequest) Reset() {
	*x = UpdateAsymmetricSignatureKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAsymmetricSignatureKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAsymmetricSignatureKeyRequest) ProtoMessage() {}

func (x *UpdateAsymmetricSignatureKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAsymmetricSignatureKeyRequest.ProtoReflect.Descriptor instead.
func (*UpdateAsymmetricSignatureKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateAsymmetricSignatureKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *UpdateAsymmetricSignatureKeyRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateAsymmetricSignatureKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAsymmetricSignatureKeyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateAsymmetricSignatureKeyRequest) GetStatus() AsymmetricSignatureKey_Status {
	if x != nil {
		return x.Status
	}
	return AsymmetricSignatureKey_STATUS_UNSPECIFIED
}

func (x *UpdateAsymmetricSignatureKeyRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateAsymmetricSignatureKeyRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

type UpdateAsymmetricSignatureKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *UpdateAsymmetricSignatureKeyMetadata) Reset() {
	*x = UpdateAsymmetricSignatureKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAsymmetricSignatureKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAsymmetricSignatureKeyMetadata) ProtoMessage() {}

func (x *UpdateAsymmetricSignatureKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAsymmetricSignatureKeyMetadata.ProtoReflect.Descriptor instead.
func (*UpdateAsymmetricSignatureKeyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateAsymmetricSignatureKeyMetadata) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type DeleteAsymmetricSignatureKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *DeleteAsymmetricSignatureKeyRequest) Reset() {
	*x = DeleteAsymmetricSignatureKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAsymmetricSignatureKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAsymmetricSignatureKeyRequest) ProtoMessage() {}

func (x *DeleteAsymmetricSignatureKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAsymmetricSignatureKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteAsymmetricSignatureKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteAsymmetricSignatureKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type DeleteAsymmetricSignatureKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *DeleteAsymmetricSignatureKeyMetadata) Reset() {
	*x = DeleteAsymmetricSignatureKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAsymmetricSignatureKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAsymmetricSignatureKeyMetadata) ProtoMessage() {}

func (x *DeleteAsymmetricSignatureKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAsymmetricSignatureKeyMetadata.ProtoReflect.Descriptor instead.
func (*DeleteAsymmetricSignatureKeyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteAsymmetricSignatureKeyMetadata) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type CancelDeleteAsymmetricSignatureKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *CancelDeleteAsymmetricSignatureKeyRequest) Reset() {
	*x = CancelDeleteAsymmetricSignatureKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelDeleteAsymmetricSignatureKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelDeleteAsymmetricSignatureKeyRequest) ProtoMessage() {}

func (x *CancelDeleteAsymmetricSignatureKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelDeleteAsymmetricSignatureKeyRequest.ProtoReflect.Descriptor instead.
func (*CancelDeleteAsymmetricSignatureKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{10}
}

func (x *CancelDeleteAsymmetricSignatureKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type CancelDeleteAsymmetricSignatureKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *CancelDeleteAsymmetricSignatureKeyMetadata) Reset() {
	*x = CancelDeleteAsymmetricSignatureKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelDeleteAsymmetricSignatureKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelDeleteAsymmetricSignatureKeyMetadata) ProtoMessage() {}

func (x *CancelDeleteAsymmetricSignatureKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelDeleteAsymmetricSignatureKeyMetadata.ProtoReflect.Descriptor instead.
func (*CancelDeleteAsymmetricSignatureKeyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{11}
}

func (x *CancelDeleteAsymmetricSignatureKeyMetadata) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type ListAsymmetricSignatureKeyOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Default value: 100.
	PageSize  int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListAsymmetricSignatureKeyOperationsRequest) Reset() {
	*x = ListAsymmetricSignatureKeyOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAsymmetricSignatureKeyOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAsymmetricSignatureKeyOperationsRequest) ProtoMessage() {}

func (x *ListAsymmetricSignatureKeyOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAsymmetricSignatureKeyOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListAsymmetricSignatureKeyOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListAsymmetricSignatureKeyOperationsRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *ListAsymmetricSignatureKeyOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAsymmetricSignatureKeyOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListAsymmetricSignatureKeyOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations    []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAsymmetricSignatureKeyOperationsResponse) Reset() {
	*x = ListAsymmetricSignatureKeyOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAsymmetricSignatureKeyOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAsymmetricSignatureKeyOperationsResponse) ProtoMessage() {}

func (x *ListAsymmetricSignatureKeyOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAsymmetricSignatureKeyOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListAsymmetricSignatureKeyOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListAsymmetricSignatureKeyOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListAsymmetricSignatureKeyOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDesc = []byte{
	0x0a, 0x53, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61,
	0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69,
	0x76, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x4b, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72,
	0x69, 0x76, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x04, 0x0a,
	0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31,
	0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca,
	0x89, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x32, 0x34, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb2, 0x01, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3b, 0xb2, 0x89,
	0x31, 0x0b, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0xc2, 0x89, 0x31,
	0x04, 0x3c, 0x3d, 0x36, 0x34, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0xf2, 0x89, 0x31,
	0x18, 0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x5d, 0x2a, 0x1a, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x7b, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x2f,
	0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x04, 0x0a, 0x29, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41, 0x73, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c,
	0x3d, 0x35, 0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x89, 0x31,
	0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb8, 0x01, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x3b, 0xb2, 0x89, 0x31, 0x0b, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d,
	0x2a, 0xc2, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x36,
	0x33, 0xf2, 0x89, 0x31, 0x18, 0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x1a, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x7b, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x12,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d,
	0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x47, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xba, 0x89, 0x31,
	0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x89, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xa7,
	0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe0, 0x04, 0x0a, 0x23, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x04, 0xa8, 0x89, 0x31, 0x01, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x89, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30,
	0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0x89,
	0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3b, 0xb2, 0x89, 0x31, 0x0b,
	0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0xc2, 0x89, 0x31, 0x04, 0x3c,
	0x3d, 0x36, 0x34, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0xf2, 0x89, 0x31, 0x18, 0x12,
	0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d,
	0x2a, 0x1a, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x24, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x23, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x29, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x2a, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a,
	0x2b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89,
	0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xba, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xca, 0x89, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xb1, 0x10, 0x0a, 0x1d, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x51, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0xb2,
	0xd2, 0x2a, 0x3e, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x41, 0x73, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0xd3, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x57, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x41, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x42, 0xb2, 0xd2, 0x2a, 0x3e, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x9b, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x4e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x44, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41,
	0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xab, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x51, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x51,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0xb2, 0xd2, 0x2a, 0x3e, 0x0a,
	0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xc7, 0x01,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x51, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x42, 0xb2, 0xd2, 0x2a, 0x3e, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xd9, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x57, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0xb2, 0xd2, 0x2a, 0x44, 0x0a,
	0x2a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x41, 0x73, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0xc7, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x5a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xae,
	0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x3d, 0xb2, 0xd2, 0x2a, 0x39, 0x0a, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0xb7, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0xb2, 0xd2, 0x2a, 0x3c, 0x0a, 0x23, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x66, 0x42, 0x05, 0x50, 0x41, 0x53,
	0x4b, 0x53, 0x5a, 0x5d, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x74, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72,
	0x69, 0x76, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x6b, 0x6d,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescData = file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDesc
)

func file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescData)
	})
	return file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDescData
}

var file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_goTypes = []interface{}{
	(*CreateAsymmetricSignatureKeyRequest)(nil),          // 0: yandex.cloud.priv.kms.v1.asymmetricsignature.CreateAsymmetricSignatureKeyRequest
	(*CreateWithIdAsymmetricSignatureKeyRequest)(nil),    // 1: yandex.cloud.priv.kms.v1.asymmetricsignature.CreateWithIdAsymmetricSignatureKeyRequest
	(*CreateAsymmetricSignatureKeyMetadata)(nil),         // 2: yandex.cloud.priv.kms.v1.asymmetricsignature.CreateAsymmetricSignatureKeyMetadata
	(*GetAsymmetricSignatureKeyRequest)(nil),             // 3: yandex.cloud.priv.kms.v1.asymmetricsignature.GetAsymmetricSignatureKeyRequest
	(*ListAsymmetricSignatureKeysRequest)(nil),           // 4: yandex.cloud.priv.kms.v1.asymmetricsignature.ListAsymmetricSignatureKeysRequest
	(*ListAsymmetricSignatureKeysResponse)(nil),          // 5: yandex.cloud.priv.kms.v1.asymmetricsignature.ListAsymmetricSignatureKeysResponse
	(*UpdateAsymmetricSignatureKeyRequest)(nil),          // 6: yandex.cloud.priv.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest
	(*UpdateAsymmetricSignatureKeyMetadata)(nil),         // 7: yandex.cloud.priv.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyMetadata
	(*DeleteAsymmetricSignatureKeyRequest)(nil),          // 8: yandex.cloud.priv.kms.v1.asymmetricsignature.DeleteAsymmetricSignatureKeyRequest
	(*DeleteAsymmetricSignatureKeyMetadata)(nil),         // 9: yandex.cloud.priv.kms.v1.asymmetricsignature.DeleteAsymmetricSignatureKeyMetadata
	(*CancelDeleteAsymmetricSignatureKeyRequest)(nil),    // 10: yandex.cloud.priv.kms.v1.asymmetricsignature.CancelDeleteAsymmetricSignatureKeyRequest
	(*CancelDeleteAsymmetricSignatureKeyMetadata)(nil),   // 11: yandex.cloud.priv.kms.v1.asymmetricsignature.CancelDeleteAsymmetricSignatureKeyMetadata
	(*ListAsymmetricSignatureKeyOperationsRequest)(nil),  // 12: yandex.cloud.priv.kms.v1.asymmetricsignature.ListAsymmetricSignatureKeyOperationsRequest
	(*ListAsymmetricSignatureKeyOperationsResponse)(nil), // 13: yandex.cloud.priv.kms.v1.asymmetricsignature.ListAsymmetricSignatureKeyOperationsResponse
	nil,                                      // 14: yandex.cloud.priv.kms.v1.asymmetricsignature.CreateAsymmetricSignatureKeyRequest.LabelsEntry
	nil,                                      // 15: yandex.cloud.priv.kms.v1.asymmetricsignature.CreateWithIdAsymmetricSignatureKeyRequest.LabelsEntry
	nil,                                      // 16: yandex.cloud.priv.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest.LabelsEntry
	(AsymmetricSignatureAlgorithm)(0),        // 17: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureAlgorithm
	(*AsymmetricSignatureKey)(nil),           // 18: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKey
	(*fieldmaskpb.FieldMask)(nil),            // 19: google.protobuf.FieldMask
	(AsymmetricSignatureKey_Status)(0),       // 20: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKey.Status
	(*operation.Operation)(nil),              // 21: yandex.cloud.priv.operation.Operation
	(*access.ListAccessBindingsRequest)(nil), // 22: yandex.cloud.priv.access.ListAccessBindingsRequest
	(*access.SetAccessBindingsRequest)(nil),  // 23: yandex.cloud.priv.access.SetAccessBindingsRequest
	(*access.UpdateAccessBindingsRequest)(nil), // 24: yandex.cloud.priv.access.UpdateAccessBindingsRequest
	(*access.ListAccessBindingsResponse)(nil),  // 25: yandex.cloud.priv.access.ListAccessBindingsResponse
}
var file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_depIdxs = []int32{
	14, // 0: yandex.cloud.priv.kms.v1.asymmetricsignature.CreateAsymmetricSignatureKeyRequest.labels:type_name -> yandex.cloud.priv.kms.v1.asymmetricsignature.CreateAsymmetricSignatureKeyRequest.LabelsEntry
	17, // 1: yandex.cloud.priv.kms.v1.asymmetricsignature.CreateAsymmetricSignatureKeyRequest.signature_algorithm:type_name -> yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureAlgorithm
	15, // 2: yandex.cloud.priv.kms.v1.asymmetricsignature.CreateWithIdAsymmetricSignatureKeyRequest.labels:type_name -> yandex.cloud.priv.kms.v1.asymmetricsignature.CreateWithIdAsymmetricSignatureKeyRequest.LabelsEntry
	17, // 3: yandex.cloud.priv.kms.v1.asymmetricsignature.CreateWithIdAsymmetricSignatureKeyRequest.signature_algorithm:type_name -> yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureAlgorithm
	18, // 4: yandex.cloud.priv.kms.v1.asymmetricsignature.ListAsymmetricSignatureKeysResponse.keys:type_name -> yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKey
	19, // 5: yandex.cloud.priv.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest.update_mask:type_name -> google.protobuf.FieldMask
	20, // 6: yandex.cloud.priv.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest.status:type_name -> yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKey.Status
	16, // 7: yandex.cloud.priv.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest.labels:type_name -> yandex.cloud.priv.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest.LabelsEntry
	21, // 8: yandex.cloud.priv.kms.v1.asymmetricsignature.ListAsymmetricSignatureKeyOperationsResponse.operations:type_name -> yandex.cloud.priv.operation.Operation
	0,  // 9: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.Create:input_type -> yandex.cloud.priv.kms.v1.asymmetricsignature.CreateAsymmetricSignatureKeyRequest
	1,  // 10: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.CreateWithId:input_type -> yandex.cloud.priv.kms.v1.asymmetricsignature.CreateWithIdAsymmetricSignatureKeyRequest
	3,  // 11: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.Get:input_type -> yandex.cloud.priv.kms.v1.asymmetricsignature.GetAsymmetricSignatureKeyRequest
	4,  // 12: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.List:input_type -> yandex.cloud.priv.kms.v1.asymmetricsignature.ListAsymmetricSignatureKeysRequest
	6,  // 13: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.Update:input_type -> yandex.cloud.priv.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest
	8,  // 14: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.Delete:input_type -> yandex.cloud.priv.kms.v1.asymmetricsignature.DeleteAsymmetricSignatureKeyRequest
	10, // 15: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.CancelDelete:input_type -> yandex.cloud.priv.kms.v1.asymmetricsignature.CancelDeleteAsymmetricSignatureKeyRequest
	12, // 16: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.ListOperations:input_type -> yandex.cloud.priv.kms.v1.asymmetricsignature.ListAsymmetricSignatureKeyOperationsRequest
	22, // 17: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.ListAccessBindings:input_type -> yandex.cloud.priv.access.ListAccessBindingsRequest
	23, // 18: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.SetAccessBindings:input_type -> yandex.cloud.priv.access.SetAccessBindingsRequest
	24, // 19: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.UpdateAccessBindings:input_type -> yandex.cloud.priv.access.UpdateAccessBindingsRequest
	21, // 20: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.Create:output_type -> yandex.cloud.priv.operation.Operation
	21, // 21: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.CreateWithId:output_type -> yandex.cloud.priv.operation.Operation
	18, // 22: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.Get:output_type -> yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKey
	5,  // 23: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.List:output_type -> yandex.cloud.priv.kms.v1.asymmetricsignature.ListAsymmetricSignatureKeysResponse
	21, // 24: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.Update:output_type -> yandex.cloud.priv.operation.Operation
	21, // 25: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.Delete:output_type -> yandex.cloud.priv.operation.Operation
	21, // 26: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.CancelDelete:output_type -> yandex.cloud.priv.operation.Operation
	13, // 27: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.ListOperations:output_type -> yandex.cloud.priv.kms.v1.asymmetricsignature.ListAsymmetricSignatureKeyOperationsResponse
	25, // 28: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.ListAccessBindings:output_type -> yandex.cloud.priv.access.ListAccessBindingsResponse
	21, // 29: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.SetAccessBindings:output_type -> yandex.cloud.priv.operation.Operation
	21, // 30: yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.UpdateAccessBindings:output_type -> yandex.cloud.priv.operation.Operation
	20, // [20:31] is the sub-list for method output_type
	9,  // [9:20] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() {
	file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_init()
}
func file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_init() {
	if File_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto != nil {
		return
	}
	file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAsymmetricSignatureKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWithIdAsymmetricSignatureKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAsymmetricSignatureKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAsymmetricSignatureKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAsymmetricSignatureKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAsymmetricSignatureKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAsymmetricSignatureKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAsymmetricSignatureKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAsymmetricSignatureKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAsymmetricSignatureKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelDeleteAsymmetricSignatureKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelDeleteAsymmetricSignatureKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAsymmetricSignatureKeyOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAsymmetricSignatureKeyOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto = out.File
	file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_rawDesc = nil
	file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_goTypes = nil
	file_yandex_cloud_priv_kms_v1_asymmetricsignature_asymmetric_signature_key_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AsymmetricSignatureKeyServiceClient is the client API for AsymmetricSignatureKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsymmetricSignatureKeyServiceClient interface {
	// control plane
	Create(ctx context.Context, in *CreateAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	CreateWithId(ctx context.Context, in *CreateWithIdAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	Get(ctx context.Context, in *GetAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*AsymmetricSignatureKey, error)
	List(ctx context.Context, in *ListAsymmetricSignatureKeysRequest, opts ...grpc.CallOption) (*ListAsymmetricSignatureKeysResponse, error)
	Update(ctx context.Context, in *UpdateAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// delete the key and schedule all its version for destruction
	Delete(ctx context.Context, in *DeleteAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// cancel previously scheduled key deletion
	CancelDelete(ctx context.Context, in *CancelDeleteAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Lists operations for the specified symmetric key.
	ListOperations(ctx context.Context, in *ListAsymmetricSignatureKeyOperationsRequest, opts ...grpc.CallOption) (*ListAsymmetricSignatureKeyOperationsResponse, error)
	ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type asymmetricSignatureKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAsymmetricSignatureKeyServiceClient(cc grpc.ClientConnInterface) AsymmetricSignatureKeyServiceClient {
	return &asymmetricSignatureKeyServiceClient{cc}
}

func (c *asymmetricSignatureKeyServiceClient) Create(ctx context.Context, in *CreateAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asymmetricSignatureKeyServiceClient) CreateWithId(ctx context.Context, in *CreateWithIdAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/CreateWithId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asymmetricSignatureKeyServiceClient) Get(ctx context.Context, in *GetAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*AsymmetricSignatureKey, error) {
	out := new(AsymmetricSignatureKey)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asymmetricSignatureKeyServiceClient) List(ctx context.Context, in *ListAsymmetricSignatureKeysRequest, opts ...grpc.CallOption) (*ListAsymmetricSignatureKeysResponse, error) {
	out := new(ListAsymmetricSignatureKeysResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asymmetricSignatureKeyServiceClient) Update(ctx context.Context, in *UpdateAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asymmetricSignatureKeyServiceClient) Delete(ctx context.Context, in *DeleteAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asymmetricSignatureKeyServiceClient) CancelDelete(ctx context.Context, in *CancelDeleteAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/CancelDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asymmetricSignatureKeyServiceClient) ListOperations(ctx context.Context, in *ListAsymmetricSignatureKeyOperationsRequest, opts ...grpc.CallOption) (*ListAsymmetricSignatureKeyOperationsResponse, error) {
	out := new(ListAsymmetricSignatureKeyOperationsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asymmetricSignatureKeyServiceClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	out := new(access.ListAccessBindingsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/ListAccessBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asymmetricSignatureKeyServiceClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/SetAccessBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asymmetricSignatureKeyServiceClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/UpdateAccessBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsymmetricSignatureKeyServiceServer is the server API for AsymmetricSignatureKeyService service.
type AsymmetricSignatureKeyServiceServer interface {
	// control plane
	Create(context.Context, *CreateAsymmetricSignatureKeyRequest) (*operation.Operation, error)
	CreateWithId(context.Context, *CreateWithIdAsymmetricSignatureKeyRequest) (*operation.Operation, error)
	Get(context.Context, *GetAsymmetricSignatureKeyRequest) (*AsymmetricSignatureKey, error)
	List(context.Context, *ListAsymmetricSignatureKeysRequest) (*ListAsymmetricSignatureKeysResponse, error)
	Update(context.Context, *UpdateAsymmetricSignatureKeyRequest) (*operation.Operation, error)
	// delete the key and schedule all its version for destruction
	Delete(context.Context, *DeleteAsymmetricSignatureKeyRequest) (*operation.Operation, error)
	// cancel previously scheduled key deletion
	CancelDelete(context.Context, *CancelDeleteAsymmetricSignatureKeyRequest) (*operation.Operation, error)
	// Lists operations for the specified symmetric key.
	ListOperations(context.Context, *ListAsymmetricSignatureKeyOperationsRequest) (*ListAsymmetricSignatureKeyOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error)
}

// UnimplementedAsymmetricSignatureKeyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAsymmetricSignatureKeyServiceServer struct {
}

func (*UnimplementedAsymmetricSignatureKeyServiceServer) Create(context.Context, *CreateAsymmetricSignatureKeyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAsymmetricSignatureKeyServiceServer) CreateWithId(context.Context, *CreateWithIdAsymmetricSignatureKeyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithId not implemented")
}
func (*UnimplementedAsymmetricSignatureKeyServiceServer) Get(context.Context, *GetAsymmetricSignatureKeyRequest) (*AsymmetricSignatureKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAsymmetricSignatureKeyServiceServer) List(context.Context, *ListAsymmetricSignatureKeysRequest) (*ListAsymmetricSignatureKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedAsymmetricSignatureKeyServiceServer) Update(context.Context, *UpdateAsymmetricSignatureKeyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedAsymmetricSignatureKeyServiceServer) Delete(context.Context, *DeleteAsymmetricSignatureKeyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedAsymmetricSignatureKeyServiceServer) CancelDelete(context.Context, *CancelDeleteAsymmetricSignatureKeyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDelete not implemented")
}
func (*UnimplementedAsymmetricSignatureKeyServiceServer) ListOperations(context.Context, *ListAsymmetricSignatureKeyOperationsRequest) (*ListAsymmetricSignatureKeyOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (*UnimplementedAsymmetricSignatureKeyServiceServer) ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessBindings not implemented")
}
func (*UnimplementedAsymmetricSignatureKeyServiceServer) SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccessBindings not implemented")
}
func (*UnimplementedAsymmetricSignatureKeyServiceServer) UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessBindings not implemented")
}

func RegisterAsymmetricSignatureKeyServiceServer(s *grpc.Server, srv AsymmetricSignatureKeyServiceServer) {
	s.RegisterService(&_AsymmetricSignatureKeyService_serviceDesc, srv)
}

func _AsymmetricSignatureKeyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAsymmetricSignatureKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsymmetricSignatureKeyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsymmetricSignatureKeyServiceServer).Create(ctx, req.(*CreateAsymmetricSignatureKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsymmetricSignatureKeyService_CreateWithId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithIdAsymmetricSignatureKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsymmetricSignatureKeyServiceServer).CreateWithId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/CreateWithId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsymmetricSignatureKeyServiceServer).CreateWithId(ctx, req.(*CreateWithIdAsymmetricSignatureKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsymmetricSignatureKeyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAsymmetricSignatureKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsymmetricSignatureKeyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsymmetricSignatureKeyServiceServer).Get(ctx, req.(*GetAsymmetricSignatureKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsymmetricSignatureKeyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAsymmetricSignatureKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsymmetricSignatureKeyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsymmetricSignatureKeyServiceServer).List(ctx, req.(*ListAsymmetricSignatureKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsymmetricSignatureKeyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAsymmetricSignatureKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsymmetricSignatureKeyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsymmetricSignatureKeyServiceServer).Update(ctx, req.(*UpdateAsymmetricSignatureKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsymmetricSignatureKeyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAsymmetricSignatureKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsymmetricSignatureKeyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsymmetricSignatureKeyServiceServer).Delete(ctx, req.(*DeleteAsymmetricSignatureKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsymmetricSignatureKeyService_CancelDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDeleteAsymmetricSignatureKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsymmetricSignatureKeyServiceServer).CancelDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/CancelDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsymmetricSignatureKeyServiceServer).CancelDelete(ctx, req.(*CancelDeleteAsymmetricSignatureKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsymmetricSignatureKeyService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAsymmetricSignatureKeyOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsymmetricSignatureKeyServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsymmetricSignatureKeyServiceServer).ListOperations(ctx, req.(*ListAsymmetricSignatureKeyOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsymmetricSignatureKeyService_ListAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.ListAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsymmetricSignatureKeyServiceServer).ListAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/ListAccessBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsymmetricSignatureKeyServiceServer).ListAccessBindings(ctx, req.(*access.ListAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsymmetricSignatureKeyService_SetAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.SetAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsymmetricSignatureKeyServiceServer).SetAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/SetAccessBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsymmetricSignatureKeyServiceServer).SetAccessBindings(ctx, req.(*access.SetAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsymmetricSignatureKeyService_UpdateAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.UpdateAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsymmetricSignatureKeyServiceServer).UpdateAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService/UpdateAccessBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsymmetricSignatureKeyServiceServer).UpdateAccessBindings(ctx, req.(*access.UpdateAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsymmetricSignatureKeyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.priv.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService",
	HandlerType: (*AsymmetricSignatureKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AsymmetricSignatureKeyService_Create_Handler,
		},
		{
			MethodName: "CreateWithId",
			Handler:    _AsymmetricSignatureKeyService_CreateWithId_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AsymmetricSignatureKeyService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AsymmetricSignatureKeyService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AsymmetricSignatureKeyService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AsymmetricSignatureKeyService_Delete_Handler,
		},
		{
			MethodName: "CancelDelete",
			Handler:    _AsymmetricSignatureKeyService_CancelDelete_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _AsymmetricSignatureKeyService_ListOperations_Handler,
		},
		{
			MethodName: "ListAccessBindings",
			Handler:    _AsymmetricSignatureKeyService_ListAccessBindings_Handler,
		},
		{
			MethodName: "SetAccessBindings",
			Handler:    _AsymmetricSignatureKeyService_SetAccessBindings_Handler,
		},
		{
			MethodName: "UpdateAccessBindings",
			Handler:    _AsymmetricSignatureKeyService_UpdateAccessBindings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/priv/kms/v1/asymmetricsignature/asymmetric_signature_key_service.proto",
}
