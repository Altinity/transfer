// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.3
// source: yandex/cloud/priv/oauth/claims.proto

package oauth

import (
	_ "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubjectType int32

const (
	SubjectType_SUBJECT_TYPE_UNSPECIFIED SubjectType = 0
	SubjectType_USER_ACCOUNT             SubjectType = 1
	SubjectType_SERVICE_ACCOUNT          SubjectType = 2
	SubjectType_GROUP                    SubjectType = 3
	SubjectType_INVITEE                  SubjectType = 4
)

// Enum value maps for SubjectType.
var (
	SubjectType_name = map[int32]string{
		0: "SUBJECT_TYPE_UNSPECIFIED",
		1: "USER_ACCOUNT",
		2: "SERVICE_ACCOUNT",
		3: "GROUP",
		4: "INVITEE",
	}
	SubjectType_value = map[string]int32{
		"SUBJECT_TYPE_UNSPECIFIED": 0,
		"USER_ACCOUNT":             1,
		"SERVICE_ACCOUNT":          2,
		"GROUP":                    3,
		"INVITEE":                  4,
	}
)

func (x SubjectType) Enum() *SubjectType {
	p := new(SubjectType)
	*p = x
	return p
}

func (x SubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_oauth_claims_proto_enumTypes[0].Descriptor()
}

func (SubjectType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_oauth_claims_proto_enumTypes[0]
}

func (x SubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubjectType.Descriptor instead.
func (SubjectType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_claims_proto_rawDescGZIP(), []int{0}
}

// claims representation, see https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims for details
type SubjectClaims struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subject - Identifier for the End-User at the Issuer.
	Sub string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	// End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
	GivenName string `protobuf:"bytes,3,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	// Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
	FamilyName string `protobuf:"bytes,4,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe.
	// This value MAY be any valid JSON string including special characters such as @, /, or whitespace. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
	PreferredUsername string `protobuf:"bytes,7,opt,name=preferred_username,json=preferredUsername,proto3" json:"preferred_username,omitempty"`
	// URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file),
	// rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.
	Picture string `protobuf:"bytes,9,opt,name=picture,proto3" json:"picture,omitempty"`
	// End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax.
	// The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
	Email string `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	// End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
	Gender string `protobuf:"bytes,13,opt,name=gender,proto3" json:"gender,omitempty"`
	// String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.
	Zoneinfo string `protobuf:"bytes,15,opt,name=zoneinfo,proto3" json:"zoneinfo,omitempty"`
	// End-User's locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639-1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166-1] country code in uppercase, separated by a dash.
	// For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.
	Locale string `protobuf:"bytes,16,opt,name=locale,proto3" json:"locale,omitempty"`
	// End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400.
	// If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
	PhoneNumber string `protobuf:"bytes,17,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Subject type.
	SubType SubjectType `protobuf:"varint,99,opt,name=sub_type,json=subType,proto3,enum=yandex.cloud.priv.oauth.SubjectType" json:"sub_type,omitempty"`
	// non-empty only for federated users
	Federation *Federation `protobuf:"bytes,100,opt,name=federation,proto3" json:"federation,omitempty"`
	// An image content of the user. Typically a space-efficient format like JPEG or GIF encoded in base64-string.
	// The maximum size is limited to 100 Kib.
	PictureData string `protobuf:"bytes,101,opt,name=picture_data,json=pictureData,proto3" json:"picture_data,omitempty"`
	// Filled for service accounts only. Refers to a folder the service account is created in.
	ServiceAccountFolderId string `protobuf:"bytes,102,opt,name=service_account_folder_id,json=serviceAccountFolderId,proto3" json:"service_account_folder_id,omitempty"`
	// List of groups where subject is member
	Groups       []*Group      `protobuf:"bytes,103,rep,name=groups,proto3" json:"groups,omitempty"`
	YandexClaims *YandexClaims `protobuf:"bytes,200,opt,name=yandex_claims,json=yandexClaims,proto3" json:"yandex_claims,omitempty"`
}

func (x *SubjectClaims) Reset() {
	*x = SubjectClaims{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_claims_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectClaims) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectClaims) ProtoMessage() {}

func (x *SubjectClaims) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_claims_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectClaims.ProtoReflect.Descriptor instead.
func (*SubjectClaims) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_claims_proto_rawDescGZIP(), []int{0}
}

func (x *SubjectClaims) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *SubjectClaims) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubjectClaims) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *SubjectClaims) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *SubjectClaims) GetPreferredUsername() string {
	if x != nil {
		return x.PreferredUsername
	}
	return ""
}

func (x *SubjectClaims) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *SubjectClaims) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SubjectClaims) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *SubjectClaims) GetZoneinfo() string {
	if x != nil {
		return x.Zoneinfo
	}
	return ""
}

func (x *SubjectClaims) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *SubjectClaims) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SubjectClaims) GetSubType() SubjectType {
	if x != nil {
		return x.SubType
	}
	return SubjectType_SUBJECT_TYPE_UNSPECIFIED
}

func (x *SubjectClaims) GetFederation() *Federation {
	if x != nil {
		return x.Federation
	}
	return nil
}

func (x *SubjectClaims) GetPictureData() string {
	if x != nil {
		return x.PictureData
	}
	return ""
}

func (x *SubjectClaims) GetServiceAccountFolderId() string {
	if x != nil {
		return x.ServiceAccountFolderId
	}
	return ""
}

func (x *SubjectClaims) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *SubjectClaims) GetYandexClaims() *YandexClaims {
	if x != nil {
		return x.YandexClaims
	}
	return nil
}

// minimalistic analog of yandex.cloud.priv.iam.v1.saml.Federation
type Federation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the federation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the federation. The name is unique within the cloud or organization
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Whether the federation is global or not.
	IsGlobal bool `protobuf:"varint,5,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
	// An organization owning the federation.
	// It's empty if the federation is global.
	Organization *Organization `protobuf:"bytes,102,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *Federation) Reset() {
	*x = Federation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_claims_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Federation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Federation) ProtoMessage() {}

func (x *Federation) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_claims_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Federation.ProtoReflect.Descriptor instead.
func (*Federation) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_claims_proto_rawDescGZIP(), []int{1}
}

func (x *Federation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Federation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Federation) GetIsGlobal() bool {
	if x != nil {
		return x.IsGlobal
	}
	return false
}

func (x *Federation) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

// an organization view to represent the login-related organization in the SubjectClaims
type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the organization
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Display title of the organization
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_claims_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_claims_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_claims_proto_rawDescGZIP(), []int{2}
}

func (x *Organization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Organization) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type YandexClaims struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// staff.yandex-team.ru login - only for passport users
	StaffLogin string `protobuf:"bytes,1,opt,name=staff_login,json=staffLogin,proto3" json:"staff_login,omitempty"`
	// passport uid (external). default_uid for Yandex.Passport active multi-session.
	PassportUid int64 `protobuf:"varint,2,opt,name=passport_uid,json=passportUid,proto3" json:"passport_uid,omitempty"`
	// passport login
	Login string `protobuf:"bytes,3,opt,name=login,proto3" json:"login,omitempty"`
	// For size-specific avatar rendering purposes https://avatars.mds.yandex.net/get-yapic/<avatarId>/<avatarSize>
	// see https://doc.yandex-team.ru/blackbox/reference/method-sessionid-response-json.html#method-sessionid-response-json__display-name
	AvatarId string `protobuf:"bytes,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	// passport default email
	Email                          string               `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	TwoFactorAuthenticationEnabled bool                 `protobuf:"varint,6,opt,name=two_factor_authentication_enabled,json=twoFactorAuthenticationEnabled,proto3" json:"two_factor_authentication_enabled,omitempty"`
	Karma                          int64                `protobuf:"varint,7,opt,name=karma,proto3" json:"karma,omitempty"`
	Phones                         []string             `protobuf:"bytes,8,rep,name=phones,proto3" json:"phones,omitempty"`
	Domain                         *YandexClaims_Domain `protobuf:"bytes,9,opt,name=domain,proto3" json:"domain,omitempty"`
	LoginId                        string               `protobuf:"bytes,10,opt,name=login_id,json=loginId,proto3" json:"login_id,omitempty"`
}

func (x *YandexClaims) Reset() {
	*x = YandexClaims{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_claims_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YandexClaims) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YandexClaims) ProtoMessage() {}

func (x *YandexClaims) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_claims_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YandexClaims.ProtoReflect.Descriptor instead.
func (*YandexClaims) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_claims_proto_rawDescGZIP(), []int{3}
}

func (x *YandexClaims) GetStaffLogin() string {
	if x != nil {
		return x.StaffLogin
	}
	return ""
}

func (x *YandexClaims) GetPassportUid() int64 {
	if x != nil {
		return x.PassportUid
	}
	return 0
}

func (x *YandexClaims) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *YandexClaims) GetAvatarId() string {
	if x != nil {
		return x.AvatarId
	}
	return ""
}

func (x *YandexClaims) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *YandexClaims) GetTwoFactorAuthenticationEnabled() bool {
	if x != nil {
		return x.TwoFactorAuthenticationEnabled
	}
	return false
}

func (x *YandexClaims) GetKarma() int64 {
	if x != nil {
		return x.Karma
	}
	return 0
}

func (x *YandexClaims) GetPhones() []string {
	if x != nil {
		return x.Phones
	}
	return nil
}

func (x *YandexClaims) GetDomain() *YandexClaims_Domain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *YandexClaims) GetLoginId() string {
	if x != nil {
		return x.LoginId
	}
	return ""
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_claims_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_claims_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_claims_proto_rawDescGZIP(), []int{4}
}

func (x *Group) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Group) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type YandexClaims_Domain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Domid  string `protobuf:"bytes,2,opt,name=domid,proto3" json:"domid,omitempty"`
	Hosted bool   `protobuf:"varint,3,opt,name=hosted,proto3" json:"hosted,omitempty"`
}

func (x *YandexClaims_Domain) Reset() {
	*x = YandexClaims_Domain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_claims_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YandexClaims_Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YandexClaims_Domain) ProtoMessage() {}

func (x *YandexClaims_Domain) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_claims_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YandexClaims_Domain.ProtoReflect.Descriptor instead.
func (*YandexClaims_Domain) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_claims_proto_rawDescGZIP(), []int{3, 0}
}

func (x *YandexClaims_Domain) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *YandexClaims_Domain) GetDomid() string {
	if x != nil {
		return x.Domid
	}
	return ""
}

func (x *YandexClaims_Domain) GetHosted() bool {
	if x != nil {
		return x.Hosted
	}
	return false
}

var File_yandex_cloud_priv_oauth_claims_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_oauth_claims_proto_rawDesc = []byte{
	0x0a, 0x24, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x1a,
	0x22, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72,
	0x69, 0x76, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x06, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c,
	0x3d, 0x35, 0x30, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x09, 0x67, 0x69,
	0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f,
	0x31, 0x01, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01,
	0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x01, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x0b, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x67,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x0d,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x59,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x52, 0x0c, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d,
	0x35, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x49, 0x0a,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d,
	0x35, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x22, 0xf3, 0x03, 0x0a, 0x0c, 0x59, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f,
	0x31, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f,
	0x31, 0x01, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31,
	0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x49, 0x0a, 0x21, 0x74, 0x77, 0x6f, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x05, 0x6b, 0x61, 0x72, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x08, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x03, 0x52, 0x05, 0x6b, 0x61,
	0x72, 0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x59, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x49, 0x64, 0x1a, 0x54, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0x8f,
	0x31, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f,
	0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x6d, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x6a, 0x0a, 0x0b, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x55,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x45, 0x10, 0x04, 0x42, 0x54, 0x42, 0x06, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x5a, 0x4a, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69,
	0x76, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x3b, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_priv_oauth_claims_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_oauth_claims_proto_rawDescData = file_yandex_cloud_priv_oauth_claims_proto_rawDesc
)

func file_yandex_cloud_priv_oauth_claims_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_oauth_claims_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_oauth_claims_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_oauth_claims_proto_rawDescData)
	})
	return file_yandex_cloud_priv_oauth_claims_proto_rawDescData
}

var file_yandex_cloud_priv_oauth_claims_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_priv_oauth_claims_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_yandex_cloud_priv_oauth_claims_proto_goTypes = []interface{}{
	(SubjectType)(0),            // 0: yandex.cloud.priv.oauth.SubjectType
	(*SubjectClaims)(nil),       // 1: yandex.cloud.priv.oauth.SubjectClaims
	(*Federation)(nil),          // 2: yandex.cloud.priv.oauth.Federation
	(*Organization)(nil),        // 3: yandex.cloud.priv.oauth.Organization
	(*YandexClaims)(nil),        // 4: yandex.cloud.priv.oauth.YandexClaims
	(*Group)(nil),               // 5: yandex.cloud.priv.oauth.Group
	(*YandexClaims_Domain)(nil), // 6: yandex.cloud.priv.oauth.YandexClaims.Domain
}
var file_yandex_cloud_priv_oauth_claims_proto_depIdxs = []int32{
	0, // 0: yandex.cloud.priv.oauth.SubjectClaims.sub_type:type_name -> yandex.cloud.priv.oauth.SubjectType
	2, // 1: yandex.cloud.priv.oauth.SubjectClaims.federation:type_name -> yandex.cloud.priv.oauth.Federation
	5, // 2: yandex.cloud.priv.oauth.SubjectClaims.groups:type_name -> yandex.cloud.priv.oauth.Group
	4, // 3: yandex.cloud.priv.oauth.SubjectClaims.yandex_claims:type_name -> yandex.cloud.priv.oauth.YandexClaims
	3, // 4: yandex.cloud.priv.oauth.Federation.organization:type_name -> yandex.cloud.priv.oauth.Organization
	6, // 5: yandex.cloud.priv.oauth.YandexClaims.domain:type_name -> yandex.cloud.priv.oauth.YandexClaims.Domain
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_oauth_claims_proto_init() }
func file_yandex_cloud_priv_oauth_claims_proto_init() {
	if File_yandex_cloud_priv_oauth_claims_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_oauth_claims_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectClaims); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_claims_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Federation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_claims_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_claims_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YandexClaims); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_claims_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_claims_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YandexClaims_Domain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_oauth_claims_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_priv_oauth_claims_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_oauth_claims_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_priv_oauth_claims_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_priv_oauth_claims_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_oauth_claims_proto = out.File
	file_yandex_cloud_priv_oauth_claims_proto_rawDesc = nil
	file_yandex_cloud_priv_oauth_claims_proto_goTypes = nil
	file_yandex_cloud_priv_oauth_claims_proto_depIdxs = nil
}
