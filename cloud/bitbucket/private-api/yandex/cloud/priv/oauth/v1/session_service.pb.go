// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.3
// source: yandex/cloud/priv/oauth/v1/session_service.proto

package oauth

import (
	_ "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv"
	token "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/iam/v1/token"
	ts "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/iam/v1/ts"
	oauth "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/oauth"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GenerateAuthIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetRegionId string `protobuf:"bytes,1,opt,name=target_region_id,json=targetRegionId,proto3" json:"target_region_id,omitempty"`
}

func (x *GenerateAuthIntentRequest) Reset() {
	*x = GenerateAuthIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateAuthIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAuthIntentRequest) ProtoMessage() {}

func (x *GenerateAuthIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAuthIntentRequest.ProtoReflect.Descriptor instead.
func (*GenerateAuthIntentRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateAuthIntentRequest) GetTargetRegionId() string {
	if x != nil {
		return x.TargetRegionId
	}
	return ""
}

type GenerateAuthIntentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthIntent string `protobuf:"bytes,1,opt,name=auth_intent,json=authIntent,proto3" json:"auth_intent,omitempty"`
}

func (x *GenerateAuthIntentResponse) Reset() {
	*x = GenerateAuthIntentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateAuthIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAuthIntentResponse) ProtoMessage() {}

func (x *GenerateAuthIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAuthIntentResponse.ProtoReflect.Descriptor instead.
func (*GenerateAuthIntentResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateAuthIntentResponse) GetAuthIntent() string {
	if x != nil {
		return x.AuthIntent
	}
	return ""
}

type CheckAuthIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthIntent string `protobuf:"bytes,1,opt,name=auth_intent,json=authIntent,proto3" json:"auth_intent,omitempty"`
	// Service host address, for example "datalens.yandex.ru" or "tracker.yandex.com".
	// Used for authorize_url TLD calculation, Yandex.Passport cookie revalidation (Yandex.Passport cookie is TLD-specific)
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *CheckAuthIntentRequest) Reset() {
	*x = CheckAuthIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAuthIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAuthIntentRequest) ProtoMessage() {}

func (x *CheckAuthIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAuthIntentRequest.ProtoReflect.Descriptor instead.
func (*CheckAuthIntentRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{2}
}

func (x *CheckAuthIntentRequest) GetAuthIntent() string {
	if x != nil {
		return x.AuthIntent
	}
	return ""
}

func (x *CheckAuthIntentRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type CheckAuthIntentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdReference *SubjectReference `protobuf:"bytes,1,opt,name=id_reference,json=idReference,proto3" json:"id_reference,omitempty"`
	// authorize URL, e.g. URL for /authorize OpenID Connect endpoint.
	AuthorizeUrl string `protobuf:"bytes,2,opt,name=authorize_url,json=authorizeUrl,proto3" json:"authorize_url,omitempty"`
}

func (x *CheckAuthIntentResponse) Reset() {
	*x = CheckAuthIntentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAuthIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAuthIntentResponse) ProtoMessage() {}

func (x *CheckAuthIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAuthIntentResponse.ProtoReflect.Descriptor instead.
func (*CheckAuthIntentResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{3}
}

func (x *CheckAuthIntentResponse) GetIdReference() *SubjectReference {
	if x != nil {
		return x.IdReference
	}
	return nil
}

func (x *CheckAuthIntentResponse) GetAuthorizeUrl() string {
	if x != nil {
		return x.AuthorizeUrl
	}
	return ""
}

type SubjectReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iss string `protobuf:"bytes,1,opt,name=iss,proto3" json:"iss,omitempty"`
	Sub string `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
}

func (x *SubjectReference) Reset() {
	*x = SubjectReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectReference) ProtoMessage() {}

func (x *SubjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectReference.ProtoReflect.Descriptor instead.
func (*SubjectReference) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{4}
}

func (x *SubjectReference) GetIss() string {
	if x != nil {
		return x.Iss
	}
	return ""
}

func (x *SubjectReference) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

type AcceptEulaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP-header Cookie with required authentication cookie values (e.g. Session_id)
	CookieHeader string `protobuf:"bytes,1,opt,name=cookie_header,json=cookieHeader,proto3" json:"cookie_header,omitempty"`
	// Service host address, for example "datalens.yandex.ru" or "tracker.yandex.com".
	// Used for Yandex.Passport cookie validation (Yandex.Passport cookie is TLD-specific)
	Host            string                 `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	CloudAgreements *YandexCloudAgreements `protobuf:"bytes,3,opt,name=cloud_agreements,json=cloudAgreements,proto3" json:"cloud_agreements,omitempty"`
}

func (x *AcceptEulaRequest) Reset() {
	*x = AcceptEulaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptEulaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptEulaRequest) ProtoMessage() {}

func (x *AcceptEulaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptEulaRequest.ProtoReflect.Descriptor instead.
func (*AcceptEulaRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{5}
}

func (x *AcceptEulaRequest) GetCookieHeader() string {
	if x != nil {
		return x.CookieHeader
	}
	return ""
}

func (x *AcceptEulaRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AcceptEulaRequest) GetCloudAgreements() *YandexCloudAgreements {
	if x != nil {
		return x.CloudAgreements
	}
	return nil
}

type AcceptEulaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAgreements *YandexCloudAgreements `protobuf:"bytes,1,opt,name=cloud_agreements,json=cloudAgreements,proto3" json:"cloud_agreements,omitempty"`
}

func (x *AcceptEulaResponse) Reset() {
	*x = AcceptEulaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptEulaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptEulaResponse) ProtoMessage() {}

func (x *AcceptEulaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptEulaResponse.ProtoReflect.Descriptor instead.
func (*AcceptEulaResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{6}
}

func (x *AcceptEulaResponse) GetCloudAgreements() *YandexCloudAgreements {
	if x != nil {
		return x.CloudAgreements
	}
	return nil
}

// Yandex.Cloud agreements
type YandexCloudAgreements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current Yandex.Cloud EULA text is here https://yandex.ru/legal/cloud_termsofuse/
	Eula          bool `protobuf:"varint,1,opt,name=eula,proto3" json:"eula,omitempty"`
	PrivacyPolicy bool `protobuf:"varint,2,opt,name=privacy_policy,json=privacyPolicy,proto3" json:"privacy_policy,omitempty"`
	// Deny receiving advertising and other informational messages from the company Yandex.Cloud LLC (OGRN 1187746678580).
	DenyNotifications bool `protobuf:"varint,3,opt,name=deny_notifications,json=denyNotifications,proto3" json:"deny_notifications,omitempty"`
}

func (x *YandexCloudAgreements) Reset() {
	*x = YandexCloudAgreements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YandexCloudAgreements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YandexCloudAgreements) ProtoMessage() {}

func (x *YandexCloudAgreements) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YandexCloudAgreements.ProtoReflect.Descriptor instead.
func (*YandexCloudAgreements) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{7}
}

func (x *YandexCloudAgreements) GetEula() bool {
	if x != nil {
		return x.Eula
	}
	return false
}

func (x *YandexCloudAgreements) GetPrivacyPolicy() bool {
	if x != nil {
		return x.PrivacyPolicy
	}
	return false
}

func (x *YandexCloudAgreements) GetDenyNotifications() bool {
	if x != nil {
		return x.DenyNotifications
	}
	return false
}

type CheckSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP-header Cookie with required per-service cookie values (e.g. yc_session)
	CookieHeader string `protobuf:"bytes,1,opt,name=cookie_header,json=cookieHeader,proto3" json:"cookie_header,omitempty"`
	// Service host address, for example "datalens.yandex.ru" or "tracker.yandex.com".
	// Used for authorize_url TLD calculation, Yandex.Passport cookie revalidation (Yandex.Passport cookie is TLD-specific)
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// If present - specified federation id should be used for authorization
	// otherwise authorization IdP calculated from cookies.
	FederationId string `protobuf:"bytes,3,opt,name=federation_id,json=federationId,proto3" json:"federation_id,omitempty"`
}

func (x *CheckSessionRequest) Reset() {
	*x = CheckSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSessionRequest) ProtoMessage() {}

func (x *CheckSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSessionRequest.ProtoReflect.Descriptor instead.
func (*CheckSessionRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{8}
}

func (x *CheckSessionRequest) GetCookieHeader() string {
	if x != nil {
		return x.CookieHeader
	}
	return ""
}

func (x *CheckSessionRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CheckSessionRequest) GetFederationId() string {
	if x != nil {
		return x.FederationId
	}
	return ""
}

type CheckSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Authenticated subject claims.
	SubjectClaims *oauth.SubjectClaims `protobuf:"bytes,1,opt,name=subject_claims,json=subjectClaims,proto3" json:"subject_claims,omitempty"`
	// per-service cookie expiration time.
	ExpiresAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	CloudUserInfo *CloudUserInfo         `protobuf:"bytes,3,opt,name=cloud_user_info,json=cloudUserInfo,proto3" json:"cloud_user_info,omitempty"`
	IamToken      *token.IamToken        `protobuf:"bytes,4,opt,name=iam_token,json=iamToken,proto3" json:"iam_token,omitempty"`
	// Yandex.Passport active multisession.
	PassportSession *PassportSession `protobuf:"bytes,5,opt,name=passport_session,json=passportSession,proto3" json:"passport_session,omitempty"`
}

func (x *CheckSessionResponse) Reset() {
	*x = CheckSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSessionResponse) ProtoMessage() {}

func (x *CheckSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSessionResponse.ProtoReflect.Descriptor instead.
func (*CheckSessionResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{9}
}

func (x *CheckSessionResponse) GetSubjectClaims() *oauth.SubjectClaims {
	if x != nil {
		return x.SubjectClaims
	}
	return nil
}

func (x *CheckSessionResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *CheckSessionResponse) GetCloudUserInfo() *CloudUserInfo {
	if x != nil {
		return x.CloudUserInfo
	}
	return nil
}

func (x *CheckSessionResponse) GetIamToken() *token.IamToken {
	if x != nil {
		return x.IamToken
	}
	return nil
}

func (x *CheckSessionResponse) GetPassportSession() *PassportSession {
	if x != nil {
		return x.PassportSession
	}
	return nil
}

type CheckPassportSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP-header Cookie with required per-service cookie values (e.g. yc_session)
	CookieHeader string `protobuf:"bytes,1,opt,name=cookie_header,json=cookieHeader,proto3" json:"cookie_header,omitempty"`
	// Service host address, for example "datalens.yandex.ru" or "tracker.yandex.com".
	// Used for authorize_url TLD calculation, Yandex.Passport cookie revalidation (Yandex.Passport cookie is TLD-specific)
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// organization-manager.application ID that is used to authorize and issuer IAM-token
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *CheckPassportSessionRequest) Reset() {
	*x = CheckPassportSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPassportSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPassportSessionRequest) ProtoMessage() {}

func (x *CheckPassportSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPassportSessionRequest.ProtoReflect.Descriptor instead.
func (*CheckPassportSessionRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{10}
}

func (x *CheckPassportSessionRequest) GetCookieHeader() string {
	if x != nil {
		return x.CookieHeader
	}
	return ""
}

func (x *CheckPassportSessionRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CheckPassportSessionRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type CheckPassportSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Authenticated subject claims.
	SubjectClaims *oauth.SubjectClaims `protobuf:"bytes,1,opt,name=subject_claims,json=subjectClaims,proto3" json:"subject_claims,omitempty"`
	IamToken      *token.IamToken      `protobuf:"bytes,4,opt,name=iam_token,json=iamToken,proto3" json:"iam_token,omitempty"`
}

func (x *CheckPassportSessionResponse) Reset() {
	*x = CheckPassportSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPassportSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPassportSessionResponse) ProtoMessage() {}

func (x *CheckPassportSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPassportSessionResponse.ProtoReflect.Descriptor instead.
func (*CheckPassportSessionResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{11}
}

func (x *CheckPassportSessionResponse) GetSubjectClaims() *oauth.SubjectClaims {
	if x != nil {
		return x.SubjectClaims
	}
	return nil
}

func (x *CheckPassportSessionResponse) GetIamToken() *token.IamToken {
	if x != nil {
		return x.IamToken
	}
	return nil
}

type GetOpenIDConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *GetOpenIDConfigurationRequest) Reset() {
	*x = GetOpenIDConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenIDConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenIDConfigurationRequest) ProtoMessage() {}

func (x *GetOpenIDConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenIDConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetOpenIDConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetOpenIDConfigurationRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type GetOpenIDConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationEndpoint string `protobuf:"bytes,1,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
	LogoutEndpoint        string `protobuf:"bytes,2,opt,name=logout_endpoint,json=logoutEndpoint,proto3" json:"logout_endpoint,omitempty"`
	TokenEndpoint         string `protobuf:"bytes,3,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	UserinfoEndpoint      string `protobuf:"bytes,4,opt,name=userinfo_endpoint,json=userinfoEndpoint,proto3" json:"userinfo_endpoint,omitempty"`
	RevocationEndpoint    string `protobuf:"bytes,5,opt,name=revocation_endpoint,json=revocationEndpoint,proto3" json:"revocation_endpoint,omitempty"`
}

func (x *GetOpenIDConfigurationResponse) Reset() {
	*x = GetOpenIDConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenIDConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenIDConfigurationResponse) ProtoMessage() {}

func (x *GetOpenIDConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenIDConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetOpenIDConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetOpenIDConfigurationResponse) GetAuthorizationEndpoint() string {
	if x != nil {
		return x.AuthorizationEndpoint
	}
	return ""
}

func (x *GetOpenIDConfigurationResponse) GetLogoutEndpoint() string {
	if x != nil {
		return x.LogoutEndpoint
	}
	return ""
}

func (x *GetOpenIDConfigurationResponse) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *GetOpenIDConfigurationResponse) GetUserinfoEndpoint() string {
	if x != nil {
		return x.UserinfoEndpoint
	}
	return ""
}

func (x *GetOpenIDConfigurationResponse) GetRevocationEndpoint() string {
	if x != nil {
		return x.RevocationEndpoint
	}
	return ""
}

type PassportSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yandex.Passport active multisession user info (including default user)
	Users []*oauth.YandexClaims `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *PassportSession) Reset() {
	*x = PassportSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassportSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassportSession) ProtoMessage() {}

func (x *PassportSession) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassportSession.ProtoReflect.Descriptor instead.
func (*PassportSession) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{14}
}

func (x *PassportSession) GetUsers() []*oauth.YandexClaims {
	if x != nil {
		return x.Users
	}
	return nil
}

type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// access_token from successful token response, see https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse for details.
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// Which hosts are allowed to receive the cookie. In general - application should not send this parameter.
	// Domain should match one of the client_id redirect_uri. Unmatched domain parameter is ignored.
	// see http://www.rfcreader.com/#rfc6265_line474 for details.
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// HTTP-header Cookie with optional per-service cookie values (e.g. yc_device)
	CookieHeader string `protobuf:"bytes,3,opt,name=cookie_header,json=cookieHeader,proto3" json:"cookie_header,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{15}
}

func (x *CreateSessionRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *CreateSessionRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreateSessionRequest) GetCookieHeader() string {
	if x != nil {
		return x.CookieHeader
	}
	return ""
}

type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP-header Set-Cookie for End-User with required per-service cookies, e.g. yc_session
	SetCookieHeader []string `protobuf:"bytes,1,rep,name=set_cookie_header,json=setCookieHeader,proto3" json:"set_cookie_header,omitempty"`
	// per-service cookie expiration time.
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{16}
}

func (x *CreateSessionResponse) GetSetCookieHeader() []string {
	if x != nil {
		return x.SetCookieHeader
	}
	return nil
}

func (x *CreateSessionResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type LogoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP-header Cookie with required per-service cookie values (e.g. yc_session)
	CookieHeader string `protobuf:"bytes,1,opt,name=cookie_header,json=cookieHeader,proto3" json:"cookie_header,omitempty"`
	// Which hosts are allowed to receive the cookie. In general - application should not send this parameter.
	// Domain should match one of the client_id redirect_uri. Unmatched domain parameter is ignored.
	// see http://www.rfcreader.com/#rfc6265_line474 for details.
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{17}
}

func (x *LogoutRequest) GetCookieHeader() string {
	if x != nil {
		return x.CookieHeader
	}
	return ""
}

func (x *LogoutRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type LogoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject *ts.Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// HTTP-header Set-Cookie for End-User with required per-service cookies, e.g. yc_session
	// Cloud-specific user authentication cookies should be removed by Set-Cookie header.
	SetCookieHeader []string `protobuf:"bytes,2,rep,name=set_cookie_header,json=setCookieHeader,proto3" json:"set_cookie_header,omitempty"`
	// minimal subject claims
	SubjectClaims *oauth.SubjectClaims `protobuf:"bytes,3,opt,name=subject_claims,json=subjectClaims,proto3" json:"subject_claims,omitempty"`
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{18}
}

func (x *LogoutResponse) GetSubject() *ts.Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *LogoutResponse) GetSetCookieHeader() []string {
	if x != nil {
		return x.SetCookieHeader
	}
	return nil
}

func (x *LogoutResponse) GetSubjectClaims() *oauth.SubjectClaims {
	if x != nil {
		return x.SubjectClaims
	}
	return nil
}

type AuthorizationRequired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// authorize URL, e.g. URL for /authorize OpenID Connect endpoint.
	AuthorizeUrl string `protobuf:"bytes,1,opt,name=authorize_url,json=authorizeUrl,proto3" json:"authorize_url,omitempty"`
}

func (x *AuthorizationRequired) Reset() {
	*x = AuthorizationRequired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationRequired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationRequired) ProtoMessage() {}

func (x *AuthorizationRequired) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationRequired.ProtoReflect.Descriptor instead.
func (*AuthorizationRequired) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP(), []int{19}
}

func (x *AuthorizationRequired) GetAuthorizeUrl() string {
	if x != nil {
		return x.AuthorizeUrl
	}
	return ""
}

var File_yandex_cloud_priv_oauth_v1_session_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDesc = []byte{
	0x0a, 0x30, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72,
	0x69, 0x76, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x69, 0x61, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8,
	0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x1a, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x07, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x07, 0x3c, 0x3d, 0x33,
	0x32, 0x37, 0x36, 0x38, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x07, 0x52, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x89, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35,
	0x33, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x69, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x36, 0x0a, 0x10, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75,
	0x62, 0x22, 0xce, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x75, 0x6c, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xca, 0x89, 0x31, 0x07, 0x3c, 0x3d, 0x33, 0x32, 0x37, 0x36, 0x38, 0xc8, 0x8f, 0x31, 0x01, 0xd0,
	0x8f, 0x31, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x33, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x59, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x72, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x75, 0x6c, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x59, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x67, 0x72, 0x65,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x59, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x75, 0x6c, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x65, 0x75, 0x6c, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x64,
	0x65, 0x6e, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x65, 0x6e, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0x89, 0x31, 0x07, 0x3c,
	0x3d, 0x33, 0x32, 0x37, 0x36, 0x38, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x08, 0x52, 0x0c,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x89, 0x31, 0x05,
	0x3c, 0x3d, 0x32, 0x35, 0x33, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0c, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x92, 0x03, 0x0a, 0x14, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x42, 0x04, 0xa8, 0x89, 0x31, 0x01, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x41, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x09, 0x69, 0x61, 0x6d, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x08, 0x69,
	0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x56, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xa5, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x0d, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0x89, 0x31, 0x07, 0x3c, 0x3d, 0x33, 0x32,
	0x37, 0x36, 0x38, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31,
	0x05, 0x3c, 0x3d, 0x32, 0x35, 0x33, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x42, 0x04, 0xa8, 0x89, 0x31, 0x01, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x3f, 0x0a,
	0x09, 0x69, 0x61, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x61, 0x6d, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x08, 0x69, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x42,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xa8,
	0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x33, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x0f, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x59, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0x89, 0x31, 0x06, 0x3c,
	0x3d, 0x34, 0x30, 0x39, 0x36, 0xc8, 0x8f, 0x31, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x89, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35,
	0x33, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xca, 0x89, 0x31, 0x07, 0x3c, 0x3d, 0x33, 0x32, 0x37, 0x36, 0x38, 0xc8, 0x8f, 0x31,
	0x01, 0xd0, 0x8f, 0x31, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x11, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f,
	0x31, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x6c,
	0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x0d, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xca, 0x89, 0x31, 0x07, 0x3c, 0x3d, 0x33, 0x32,
	0x37, 0x36, 0x38, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x89, 0x31, 0x05, 0x3c,
	0x3d, 0x32, 0x35, 0x33, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xd5, 0x01, 0x0a,
	0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x34, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xc8, 0x8f, 0x31, 0x01,
	0xd0, 0x8f, 0x31, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x22, 0x4c, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x33, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d,
	0x32, 0x30, 0x34, 0x38, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x55,
	0x72, 0x6c, 0x32, 0xd2, 0x07, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2f,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12,
	0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x45, 0x75, 0x6c, 0x61, 0x12, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x0f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x56, 0x42, 0x05, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x5a, 0x4d, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescData = file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDesc
)

func file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescData)
	})
	return file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDescData
}

var file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_yandex_cloud_priv_oauth_v1_session_service_proto_goTypes = []interface{}{
	(*GenerateAuthIntentRequest)(nil),      // 0: yandex.cloud.priv.oauth.v1.GenerateAuthIntentRequest
	(*GenerateAuthIntentResponse)(nil),     // 1: yandex.cloud.priv.oauth.v1.GenerateAuthIntentResponse
	(*CheckAuthIntentRequest)(nil),         // 2: yandex.cloud.priv.oauth.v1.CheckAuthIntentRequest
	(*CheckAuthIntentResponse)(nil),        // 3: yandex.cloud.priv.oauth.v1.CheckAuthIntentResponse
	(*SubjectReference)(nil),               // 4: yandex.cloud.priv.oauth.v1.SubjectReference
	(*AcceptEulaRequest)(nil),              // 5: yandex.cloud.priv.oauth.v1.AcceptEulaRequest
	(*AcceptEulaResponse)(nil),             // 6: yandex.cloud.priv.oauth.v1.AcceptEulaResponse
	(*YandexCloudAgreements)(nil),          // 7: yandex.cloud.priv.oauth.v1.YandexCloudAgreements
	(*CheckSessionRequest)(nil),            // 8: yandex.cloud.priv.oauth.v1.CheckSessionRequest
	(*CheckSessionResponse)(nil),           // 9: yandex.cloud.priv.oauth.v1.CheckSessionResponse
	(*CheckPassportSessionRequest)(nil),    // 10: yandex.cloud.priv.oauth.v1.CheckPassportSessionRequest
	(*CheckPassportSessionResponse)(nil),   // 11: yandex.cloud.priv.oauth.v1.CheckPassportSessionResponse
	(*GetOpenIDConfigurationRequest)(nil),  // 12: yandex.cloud.priv.oauth.v1.GetOpenIDConfigurationRequest
	(*GetOpenIDConfigurationResponse)(nil), // 13: yandex.cloud.priv.oauth.v1.GetOpenIDConfigurationResponse
	(*PassportSession)(nil),                // 14: yandex.cloud.priv.oauth.v1.PassportSession
	(*CreateSessionRequest)(nil),           // 15: yandex.cloud.priv.oauth.v1.CreateSessionRequest
	(*CreateSessionResponse)(nil),          // 16: yandex.cloud.priv.oauth.v1.CreateSessionResponse
	(*LogoutRequest)(nil),                  // 17: yandex.cloud.priv.oauth.v1.LogoutRequest
	(*LogoutResponse)(nil),                 // 18: yandex.cloud.priv.oauth.v1.LogoutResponse
	(*AuthorizationRequired)(nil),          // 19: yandex.cloud.priv.oauth.v1.AuthorizationRequired
	(*oauth.SubjectClaims)(nil),            // 20: yandex.cloud.priv.oauth.SubjectClaims
	(*timestamppb.Timestamp)(nil),          // 21: google.protobuf.Timestamp
	(*CloudUserInfo)(nil),                  // 22: yandex.cloud.priv.oauth.v1.CloudUserInfo
	(*token.IamToken)(nil),                 // 23: yandex.cloud.priv.iam.v1.IamToken
	(*oauth.YandexClaims)(nil),             // 24: yandex.cloud.priv.oauth.YandexClaims
	(*ts.Subject)(nil),                     // 25: yandex.cloud.priv.iam.v1.ts.Subject
}
var file_yandex_cloud_priv_oauth_v1_session_service_proto_depIdxs = []int32{
	4,  // 0: yandex.cloud.priv.oauth.v1.CheckAuthIntentResponse.id_reference:type_name -> yandex.cloud.priv.oauth.v1.SubjectReference
	7,  // 1: yandex.cloud.priv.oauth.v1.AcceptEulaRequest.cloud_agreements:type_name -> yandex.cloud.priv.oauth.v1.YandexCloudAgreements
	7,  // 2: yandex.cloud.priv.oauth.v1.AcceptEulaResponse.cloud_agreements:type_name -> yandex.cloud.priv.oauth.v1.YandexCloudAgreements
	20, // 3: yandex.cloud.priv.oauth.v1.CheckSessionResponse.subject_claims:type_name -> yandex.cloud.priv.oauth.SubjectClaims
	21, // 4: yandex.cloud.priv.oauth.v1.CheckSessionResponse.expires_at:type_name -> google.protobuf.Timestamp
	22, // 5: yandex.cloud.priv.oauth.v1.CheckSessionResponse.cloud_user_info:type_name -> yandex.cloud.priv.oauth.v1.CloudUserInfo
	23, // 6: yandex.cloud.priv.oauth.v1.CheckSessionResponse.iam_token:type_name -> yandex.cloud.priv.iam.v1.IamToken
	14, // 7: yandex.cloud.priv.oauth.v1.CheckSessionResponse.passport_session:type_name -> yandex.cloud.priv.oauth.v1.PassportSession
	20, // 8: yandex.cloud.priv.oauth.v1.CheckPassportSessionResponse.subject_claims:type_name -> yandex.cloud.priv.oauth.SubjectClaims
	23, // 9: yandex.cloud.priv.oauth.v1.CheckPassportSessionResponse.iam_token:type_name -> yandex.cloud.priv.iam.v1.IamToken
	24, // 10: yandex.cloud.priv.oauth.v1.PassportSession.users:type_name -> yandex.cloud.priv.oauth.YandexClaims
	21, // 11: yandex.cloud.priv.oauth.v1.CreateSessionResponse.expires_at:type_name -> google.protobuf.Timestamp
	25, // 12: yandex.cloud.priv.oauth.v1.LogoutResponse.subject:type_name -> yandex.cloud.priv.iam.v1.ts.Subject
	20, // 13: yandex.cloud.priv.oauth.v1.LogoutResponse.subject_claims:type_name -> yandex.cloud.priv.oauth.SubjectClaims
	8,  // 14: yandex.cloud.priv.oauth.v1.SessionService.Check:input_type -> yandex.cloud.priv.oauth.v1.CheckSessionRequest
	10, // 15: yandex.cloud.priv.oauth.v1.SessionService.CheckPassport:input_type -> yandex.cloud.priv.oauth.v1.CheckPassportSessionRequest
	15, // 16: yandex.cloud.priv.oauth.v1.SessionService.Create:input_type -> yandex.cloud.priv.oauth.v1.CreateSessionRequest
	17, // 17: yandex.cloud.priv.oauth.v1.SessionService.Logout:input_type -> yandex.cloud.priv.oauth.v1.LogoutRequest
	5,  // 18: yandex.cloud.priv.oauth.v1.SessionService.AcceptEula:input_type -> yandex.cloud.priv.oauth.v1.AcceptEulaRequest
	12, // 19: yandex.cloud.priv.oauth.v1.SessionService.GetOpenIDConfiguration:input_type -> yandex.cloud.priv.oauth.v1.GetOpenIDConfigurationRequest
	0,  // 20: yandex.cloud.priv.oauth.v1.SessionService.GenerateAuthIntent:input_type -> yandex.cloud.priv.oauth.v1.GenerateAuthIntentRequest
	2,  // 21: yandex.cloud.priv.oauth.v1.SessionService.CheckAuthIntent:input_type -> yandex.cloud.priv.oauth.v1.CheckAuthIntentRequest
	9,  // 22: yandex.cloud.priv.oauth.v1.SessionService.Check:output_type -> yandex.cloud.priv.oauth.v1.CheckSessionResponse
	11, // 23: yandex.cloud.priv.oauth.v1.SessionService.CheckPassport:output_type -> yandex.cloud.priv.oauth.v1.CheckPassportSessionResponse
	16, // 24: yandex.cloud.priv.oauth.v1.SessionService.Create:output_type -> yandex.cloud.priv.oauth.v1.CreateSessionResponse
	18, // 25: yandex.cloud.priv.oauth.v1.SessionService.Logout:output_type -> yandex.cloud.priv.oauth.v1.LogoutResponse
	6,  // 26: yandex.cloud.priv.oauth.v1.SessionService.AcceptEula:output_type -> yandex.cloud.priv.oauth.v1.AcceptEulaResponse
	13, // 27: yandex.cloud.priv.oauth.v1.SessionService.GetOpenIDConfiguration:output_type -> yandex.cloud.priv.oauth.v1.GetOpenIDConfigurationResponse
	1,  // 28: yandex.cloud.priv.oauth.v1.SessionService.GenerateAuthIntent:output_type -> yandex.cloud.priv.oauth.v1.GenerateAuthIntentResponse
	3,  // 29: yandex.cloud.priv.oauth.v1.SessionService.CheckAuthIntent:output_type -> yandex.cloud.priv.oauth.v1.CheckAuthIntentResponse
	22, // [22:30] is the sub-list for method output_type
	14, // [14:22] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_oauth_v1_session_service_proto_init() }
func file_yandex_cloud_priv_oauth_v1_session_service_proto_init() {
	if File_yandex_cloud_priv_oauth_v1_session_service_proto != nil {
		return
	}
	file_yandex_cloud_priv_oauth_v1_cloud_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateAuthIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateAuthIntentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAuthIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAuthIntentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptEulaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptEulaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YandexCloudAgreements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPassportSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPassportSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenIDConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenIDConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassportSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationRequired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_priv_oauth_v1_session_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_oauth_v1_session_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_priv_oauth_v1_session_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_oauth_v1_session_service_proto = out.File
	file_yandex_cloud_priv_oauth_v1_session_service_proto_rawDesc = nil
	file_yandex_cloud_priv_oauth_v1_session_service_proto_goTypes = nil
	file_yandex_cloud_priv_oauth_v1_session_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SessionServiceClient is the client API for SessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionServiceClient interface {
	// Verify the identity of a subject for services, authenticated via Yandex.Cloud IdP.
	// IAM-token authorization is required.
	//
	// gRPC error codes
	//
	// Unauthenticated: authorization iam_token are invalid or may have expired.
	// InvalidArgument: the provided cookies are invalid or may have expired.
	//
	//	Additional information can be found in details at AuthorizationRequired message - in this case user should be redirected to specified URL
	Check(ctx context.Context, in *CheckSessionRequest, opts ...grpc.CallOption) (*CheckSessionResponse, error)
	// Verify the identity of a subject for services, authenticated via Yandex.ID (Yandex.Passport).
	// IAM-token authorization is required.
	// Usage of this API is limited and will be deprecated.
	//
	// gRPC error codes
	//
	// Unauthenticated: authorization iam_token are invalid or may have expired.
	// InvalidArgument: the provided cookies are invalid or may have expired.
	CheckPassport(ctx context.Context, in *CheckPassportSessionRequest, opts ...grpc.CallOption) (*CheckPassportSessionResponse, error)
	// Create per-service session
	//
	// gRPC error codes
	// Unauthenticated: authorization iam_token are invalid or may have expired.
	// InvalidArgument: the provided access_token is invalid or may have expired.
	//
	//	Additional information can be found in details at AuthorizationRequired message - in this case user should be redirected to specified URL
	//
	// FailedPrecondition: openid scope is missed for specified access_token
	Create(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// Logout from parent session
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// Accept EULA
	AcceptEula(ctx context.Context, in *AcceptEulaRequest, opts ...grpc.CallOption) (*AcceptEulaResponse, error)
	// Get urls of openid Oauth2 endpoints
	GetOpenIDConfiguration(ctx context.Context, in *GetOpenIDConfigurationRequest, opts ...grpc.CallOption) (*GetOpenIDConfigurationResponse, error)
	GenerateAuthIntent(ctx context.Context, in *GenerateAuthIntentRequest, opts ...grpc.CallOption) (*GenerateAuthIntentResponse, error)
	CheckAuthIntent(ctx context.Context, in *CheckAuthIntentRequest, opts ...grpc.CallOption) (*CheckAuthIntentResponse, error)
}

type sessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionServiceClient(cc grpc.ClientConnInterface) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) Check(ctx context.Context, in *CheckSessionRequest, opts ...grpc.CallOption) (*CheckSessionResponse, error) {
	out := new(CheckSessionResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.oauth.v1.SessionService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) CheckPassport(ctx context.Context, in *CheckPassportSessionRequest, opts ...grpc.CallOption) (*CheckPassportSessionResponse, error) {
	out := new(CheckPassportSessionResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.oauth.v1.SessionService/CheckPassport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) Create(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.oauth.v1.SessionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.oauth.v1.SessionService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) AcceptEula(ctx context.Context, in *AcceptEulaRequest, opts ...grpc.CallOption) (*AcceptEulaResponse, error) {
	out := new(AcceptEulaResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.oauth.v1.SessionService/AcceptEula", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GetOpenIDConfiguration(ctx context.Context, in *GetOpenIDConfigurationRequest, opts ...grpc.CallOption) (*GetOpenIDConfigurationResponse, error) {
	out := new(GetOpenIDConfigurationResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.oauth.v1.SessionService/GetOpenIDConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GenerateAuthIntent(ctx context.Context, in *GenerateAuthIntentRequest, opts ...grpc.CallOption) (*GenerateAuthIntentResponse, error) {
	out := new(GenerateAuthIntentResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.oauth.v1.SessionService/GenerateAuthIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) CheckAuthIntent(ctx context.Context, in *CheckAuthIntentRequest, opts ...grpc.CallOption) (*CheckAuthIntentResponse, error) {
	out := new(CheckAuthIntentResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.oauth.v1.SessionService/CheckAuthIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServiceServer is the server API for SessionService service.
type SessionServiceServer interface {
	// Verify the identity of a subject for services, authenticated via Yandex.Cloud IdP.
	// IAM-token authorization is required.
	//
	// gRPC error codes
	//
	// Unauthenticated: authorization iam_token are invalid or may have expired.
	// InvalidArgument: the provided cookies are invalid or may have expired.
	//
	//	Additional information can be found in details at AuthorizationRequired message - in this case user should be redirected to specified URL
	Check(context.Context, *CheckSessionRequest) (*CheckSessionResponse, error)
	// Verify the identity of a subject for services, authenticated via Yandex.ID (Yandex.Passport).
	// IAM-token authorization is required.
	// Usage of this API is limited and will be deprecated.
	//
	// gRPC error codes
	//
	// Unauthenticated: authorization iam_token are invalid or may have expired.
	// InvalidArgument: the provided cookies are invalid or may have expired.
	CheckPassport(context.Context, *CheckPassportSessionRequest) (*CheckPassportSessionResponse, error)
	// Create per-service session
	//
	// gRPC error codes
	// Unauthenticated: authorization iam_token are invalid or may have expired.
	// InvalidArgument: the provided access_token is invalid or may have expired.
	//
	//	Additional information can be found in details at AuthorizationRequired message - in this case user should be redirected to specified URL
	//
	// FailedPrecondition: openid scope is missed for specified access_token
	Create(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// Logout from parent session
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// Accept EULA
	AcceptEula(context.Context, *AcceptEulaRequest) (*AcceptEulaResponse, error)
	// Get urls of openid Oauth2 endpoints
	GetOpenIDConfiguration(context.Context, *GetOpenIDConfigurationRequest) (*GetOpenIDConfigurationResponse, error)
	GenerateAuthIntent(context.Context, *GenerateAuthIntentRequest) (*GenerateAuthIntentResponse, error)
	CheckAuthIntent(context.Context, *CheckAuthIntentRequest) (*CheckAuthIntentResponse, error)
}

// UnimplementedSessionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSessionServiceServer struct {
}

func (*UnimplementedSessionServiceServer) Check(context.Context, *CheckSessionRequest) (*CheckSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedSessionServiceServer) CheckPassport(context.Context, *CheckPassportSessionRequest) (*CheckPassportSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassport not implemented")
}
func (*UnimplementedSessionServiceServer) Create(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedSessionServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedSessionServiceServer) AcceptEula(context.Context, *AcceptEulaRequest) (*AcceptEulaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptEula not implemented")
}
func (*UnimplementedSessionServiceServer) GetOpenIDConfiguration(context.Context, *GetOpenIDConfigurationRequest) (*GetOpenIDConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenIDConfiguration not implemented")
}
func (*UnimplementedSessionServiceServer) GenerateAuthIntent(context.Context, *GenerateAuthIntentRequest) (*GenerateAuthIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAuthIntent not implemented")
}
func (*UnimplementedSessionServiceServer) CheckAuthIntent(context.Context, *CheckAuthIntentRequest) (*CheckAuthIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthIntent not implemented")
}

func RegisterSessionServiceServer(s *grpc.Server, srv SessionServiceServer) {
	s.RegisterService(&_SessionService_serviceDesc, srv)
}

func _SessionService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.oauth.v1.SessionService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).Check(ctx, req.(*CheckSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_CheckPassport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPassportSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).CheckPassport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.oauth.v1.SessionService/CheckPassport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).CheckPassport(ctx, req.(*CheckPassportSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.oauth.v1.SessionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).Create(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.oauth.v1.SessionService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_AcceptEula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptEulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).AcceptEula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.oauth.v1.SessionService/AcceptEula",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).AcceptEula(ctx, req.(*AcceptEulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GetOpenIDConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenIDConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetOpenIDConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.oauth.v1.SessionService/GetOpenIDConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetOpenIDConfiguration(ctx, req.(*GetOpenIDConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GenerateAuthIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAuthIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GenerateAuthIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.oauth.v1.SessionService/GenerateAuthIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GenerateAuthIntent(ctx, req.(*GenerateAuthIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_CheckAuthIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).CheckAuthIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.oauth.v1.SessionService/CheckAuthIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).CheckAuthIntent(ctx, req.(*CheckAuthIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.priv.oauth.v1.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _SessionService_Check_Handler,
		},
		{
			MethodName: "CheckPassport",
			Handler:    _SessionService_CheckPassport_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SessionService_Create_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SessionService_Logout_Handler,
		},
		{
			MethodName: "AcceptEula",
			Handler:    _SessionService_AcceptEula_Handler,
		},
		{
			MethodName: "GetOpenIDConfiguration",
			Handler:    _SessionService_GetOpenIDConfiguration_Handler,
		},
		{
			MethodName: "GenerateAuthIntent",
			Handler:    _SessionService_GenerateAuthIntent_Handler,
		},
		{
			MethodName: "CheckAuthIntent",
			Handler:    _SessionService_CheckAuthIntent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/priv/oauth/v1/session_service.proto",
}
