// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.3
// source: yandex/cloud/priv/iam/v1/iam_token_service.proto

package iam

import (
	_ "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv"
	ts "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/iam/v1/ts"
	v1 "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/oauth/v1"
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccessKeySignature_Version2Parameters_SignatureMethod int32

const (
	AccessKeySignature_Version2Parameters_SIGNATURE_METHOD_UNSPECIFIED AccessKeySignature_Version2Parameters_SignatureMethod = 0
	AccessKeySignature_Version2Parameters_HMAC_SHA1                    AccessKeySignature_Version2Parameters_SignatureMethod = 1
	AccessKeySignature_Version2Parameters_HMAC_SHA256                  AccessKeySignature_Version2Parameters_SignatureMethod = 2
)

// Enum value maps for AccessKeySignature_Version2Parameters_SignatureMethod.
var (
	AccessKeySignature_Version2Parameters_SignatureMethod_name = map[int32]string{
		0: "SIGNATURE_METHOD_UNSPECIFIED",
		1: "HMAC_SHA1",
		2: "HMAC_SHA256",
	}
	AccessKeySignature_Version2Parameters_SignatureMethod_value = map[string]int32{
		"SIGNATURE_METHOD_UNSPECIFIED": 0,
		"HMAC_SHA1":                    1,
		"HMAC_SHA256":                  2,
	}
)

func (x AccessKeySignature_Version2Parameters_SignatureMethod) Enum() *AccessKeySignature_Version2Parameters_SignatureMethod {
	p := new(AccessKeySignature_Version2Parameters_SignatureMethod)
	*p = x
	return p
}

func (x AccessKeySignature_Version2Parameters_SignatureMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessKeySignature_Version2Parameters_SignatureMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_enumTypes[0].Descriptor()
}

func (AccessKeySignature_Version2Parameters_SignatureMethod) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_enumTypes[0]
}

func (x AccessKeySignature_Version2Parameters_SignatureMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessKeySignature_Version2Parameters_SignatureMethod.Descriptor instead.
func (AccessKeySignature_Version2Parameters_SignatureMethod) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{9, 0, 0}
}

type CreateIamTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identity:
	//
	//	*CreateIamTokenRequest_YandexPassportOauthToken
	//	*CreateIamTokenRequest_Jwt
	//	*CreateIamTokenRequest_IamCookie
	//	*CreateIamTokenRequest_YandexPassportCookies
	Identity           isCreateIamTokenRequest_Identity `protobuf_oneof:"identity"`
	Ttl                *durationpb.Duration             `protobuf:"bytes,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	ResourceBoundaries []*ResourceBoundary              `protobuf:"bytes,6,rep,name=resource_boundaries,json=resourceBoundaries,proto3" json:"resource_boundaries,omitempty"`
}

func (x *CreateIamTokenRequest) Reset() {
	*x = CreateIamTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIamTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIamTokenRequest) ProtoMessage() {}

func (x *CreateIamTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIamTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateIamTokenRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{0}
}

func (m *CreateIamTokenRequest) GetIdentity() isCreateIamTokenRequest_Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (x *CreateIamTokenRequest) GetYandexPassportOauthToken() string {
	if x, ok := x.GetIdentity().(*CreateIamTokenRequest_YandexPassportOauthToken); ok {
		return x.YandexPassportOauthToken
	}
	return ""
}

func (x *CreateIamTokenRequest) GetJwt() string {
	if x, ok := x.GetIdentity().(*CreateIamTokenRequest_Jwt); ok {
		return x.Jwt
	}
	return ""
}

func (x *CreateIamTokenRequest) GetIamCookie() string {
	if x, ok := x.GetIdentity().(*CreateIamTokenRequest_IamCookie); ok {
		return x.IamCookie
	}
	return ""
}

func (x *CreateIamTokenRequest) GetYandexPassportCookies() *YandexPassportCookies {
	if x, ok := x.GetIdentity().(*CreateIamTokenRequest_YandexPassportCookies); ok {
		return x.YandexPassportCookies
	}
	return nil
}

func (x *CreateIamTokenRequest) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *CreateIamTokenRequest) GetResourceBoundaries() []*ResourceBoundary {
	if x != nil {
		return x.ResourceBoundaries
	}
	return nil
}

type isCreateIamTokenRequest_Identity interface {
	isCreateIamTokenRequest_Identity()
}

type CreateIamTokenRequest_YandexPassportOauthToken struct {
	YandexPassportOauthToken string `protobuf:"bytes,1,opt,name=yandex_passport_oauth_token,json=yandexPassportOauthToken,proto3,oneof"`
}

type CreateIamTokenRequest_Jwt struct {
	Jwt string `protobuf:"bytes,2,opt,name=jwt,proto3,oneof"`
}

type CreateIamTokenRequest_IamCookie struct {
	IamCookie string `protobuf:"bytes,3,opt,name=iam_cookie,json=iamCookie,proto3,oneof"`
}

type CreateIamTokenRequest_YandexPassportCookies struct {
	YandexPassportCookies *YandexPassportCookies `protobuf:"bytes,4,opt,name=yandex_passport_cookies,json=yandexPassportCookies,proto3,oneof"`
}

func (*CreateIamTokenRequest_YandexPassportOauthToken) isCreateIamTokenRequest_Identity() {}

func (*CreateIamTokenRequest_Jwt) isCreateIamTokenRequest_Identity() {}

func (*CreateIamTokenRequest_IamCookie) isCreateIamTokenRequest_Identity() {}

func (*CreateIamTokenRequest_YandexPassportCookies) isCreateIamTokenRequest_Identity() {}

type CreateIamTokenForSubjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId    string           `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	OauthRequest *v1.OAuthRequest `protobuf:"bytes,2,opt,name=oauth_request,json=oauthRequest,proto3" json:"oauth_request,omitempty"`
	// additional parameters for cross-domain authentication
	SessionId                string               `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RefreshTokenId           string               `protobuf:"bytes,4,opt,name=refresh_token_id,json=refreshTokenId,proto3" json:"refresh_token_id,omitempty"`
	WliFederatedCredentialId string               `protobuf:"bytes,7,opt,name=wli_federated_credential_id,json=wliFederatedCredentialId,proto3" json:"wli_federated_credential_id,omitempty"`
	Ttl                      *durationpb.Duration `protobuf:"bytes,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	ResourceBoundaries       []*ResourceBoundary  `protobuf:"bytes,6,rep,name=resource_boundaries,json=resourceBoundaries,proto3" json:"resource_boundaries,omitempty"`
}

func (x *CreateIamTokenForSubjectRequest) Reset() {
	*x = CreateIamTokenForSubjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIamTokenForSubjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIamTokenForSubjectRequest) ProtoMessage() {}

func (x *CreateIamTokenForSubjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIamTokenForSubjectRequest.ProtoReflect.Descriptor instead.
func (*CreateIamTokenForSubjectRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIamTokenForSubjectRequest) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *CreateIamTokenForSubjectRequest) GetOauthRequest() *v1.OAuthRequest {
	if x != nil {
		return x.OauthRequest
	}
	return nil
}

func (x *CreateIamTokenForSubjectRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateIamTokenForSubjectRequest) GetRefreshTokenId() string {
	if x != nil {
		return x.RefreshTokenId
	}
	return ""
}

func (x *CreateIamTokenForSubjectRequest) GetWliFederatedCredentialId() string {
	if x != nil {
		return x.WliFederatedCredentialId
	}
	return ""
}

func (x *CreateIamTokenForSubjectRequest) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *CreateIamTokenForSubjectRequest) GetResourceBoundaries() []*ResourceBoundary {
	if x != nil {
		return x.ResourceBoundaries
	}
	return nil
}

type CreateIamTokenForAccessKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature          *AccessKeySignature  `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Ttl                *durationpb.Duration `protobuf:"bytes,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	ClientId           string               `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ResourceBoundaries []*ResourceBoundary  `protobuf:"bytes,4,rep,name=resource_boundaries,json=resourceBoundaries,proto3" json:"resource_boundaries,omitempty"`
}

func (x *CreateIamTokenForAccessKeyRequest) Reset() {
	*x = CreateIamTokenForAccessKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIamTokenForAccessKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIamTokenForAccessKeyRequest) ProtoMessage() {}

func (x *CreateIamTokenForAccessKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIamTokenForAccessKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateIamTokenForAccessKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateIamTokenForAccessKeyRequest) GetSignature() *AccessKeySignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CreateIamTokenForAccessKeyRequest) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *CreateIamTokenForAccessKeyRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateIamTokenForAccessKeyRequest) GetResourceBoundaries() []*ResourceBoundary {
	if x != nil {
		return x.ResourceBoundaries
	}
	return nil
}

type CreateIamTokenForServiceAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceAccountId   string               `protobuf:"bytes,1,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	Path               []string             `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
	Ttl                *durationpb.Duration `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	ResourceBoundaries []*ResourceBoundary  `protobuf:"bytes,4,rep,name=resource_boundaries,json=resourceBoundaries,proto3" json:"resource_boundaries,omitempty"`
}

func (x *CreateIamTokenForServiceAccountRequest) Reset() {
	*x = CreateIamTokenForServiceAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIamTokenForServiceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIamTokenForServiceAccountRequest) ProtoMessage() {}

func (x *CreateIamTokenForServiceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIamTokenForServiceAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateIamTokenForServiceAccountRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateIamTokenForServiceAccountRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *CreateIamTokenForServiceAccountRequest) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *CreateIamTokenForServiceAccountRequest) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *CreateIamTokenForServiceAccountRequest) GetResourceBoundaries() []*ResourceBoundary {
	if x != nil {
		return x.ResourceBoundaries
	}
	return nil
}

type CreateIamTokenForServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId              string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	MicroserviceId         string `protobuf:"bytes,2,opt,name=microservice_id,json=microserviceId,proto3" json:"microservice_id,omitempty"`
	ResourceId             string `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ResourceType           string `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	TargetServiceAccountId string `protobuf:"bytes,5,opt,name=target_service_account_id,json=targetServiceAccountId,proto3" json:"target_service_account_id,omitempty"`
}

func (x *CreateIamTokenForServiceRequest) Reset() {
	*x = CreateIamTokenForServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIamTokenForServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIamTokenForServiceRequest) ProtoMessage() {}

func (x *CreateIamTokenForServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIamTokenForServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateIamTokenForServiceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateIamTokenForServiceRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *CreateIamTokenForServiceRequest) GetMicroserviceId() string {
	if x != nil {
		return x.MicroserviceId
	}
	return ""
}

func (x *CreateIamTokenForServiceRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *CreateIamTokenForServiceRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *CreateIamTokenForServiceRequest) GetTargetServiceAccountId() string {
	if x != nil {
		return x.TargetServiceAccountId
	}
	return ""
}

type CreateIamTokenForComputeInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceAccountId string `protobuf:"bytes,1,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	InstanceId       string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *CreateIamTokenForComputeInstanceRequest) Reset() {
	*x = CreateIamTokenForComputeInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIamTokenForComputeInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIamTokenForComputeInstanceRequest) ProtoMessage() {}

func (x *CreateIamTokenForComputeInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIamTokenForComputeInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateIamTokenForComputeInstanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateIamTokenForComputeInstanceRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *CreateIamTokenForComputeInstanceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type CreateIamTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IamToken  string                 `protobuf:"bytes,1,opt,name=iam_token,json=iamToken,proto3" json:"iam_token,omitempty"`
	IssuedAt  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Subject   *ts.Subject            `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *CreateIamTokenResponse) Reset() {
	*x = CreateIamTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIamTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIamTokenResponse) ProtoMessage() {}

func (x *CreateIamTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIamTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateIamTokenResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateIamTokenResponse) GetIamToken() string {
	if x != nil {
		return x.IamToken
	}
	return ""
}

func (x *CreateIamTokenResponse) GetIssuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedAt
	}
	return nil
}

func (x *CreateIamTokenResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *CreateIamTokenResponse) GetSubject() *ts.Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

type RevokeIamTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IamToken string `protobuf:"bytes,1,opt,name=iam_token,json=iamToken,proto3" json:"iam_token,omitempty"`
}

func (x *RevokeIamTokenRequest) Reset() {
	*x = RevokeIamTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeIamTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeIamTokenRequest) ProtoMessage() {}

func (x *RevokeIamTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeIamTokenRequest.ProtoReflect.Descriptor instead.
func (*RevokeIamTokenRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{7}
}

func (x *RevokeIamTokenRequest) GetIamToken() string {
	if x != nil {
		return x.IamToken
	}
	return ""
}

type RevokeIamTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId         string             `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	RevokedCredential *RevokedCredential `protobuf:"bytes,2,opt,name=revoked_credential,json=revokedCredential,proto3" json:"revoked_credential,omitempty"`
}

func (x *RevokeIamTokenResponse) Reset() {
	*x = RevokeIamTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeIamTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeIamTokenResponse) ProtoMessage() {}

func (x *RevokeIamTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeIamTokenResponse.ProtoReflect.Descriptor instead.
func (*RevokeIamTokenResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{8}
}

func (x *RevokeIamTokenResponse) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *RevokeIamTokenResponse) GetRevokedCredential() *RevokedCredential {
	if x != nil {
		return x.RevokedCredential
	}
	return nil
}

type AccessKeySignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId  string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	StringToSign string `protobuf:"bytes,2,opt,name=string_to_sign,json=stringToSign,proto3" json:"string_to_sign,omitempty"`
	Signature    string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// Types that are assignable to Parameters:
	//
	//	*AccessKeySignature_V2Parameters
	//	*AccessKeySignature_V4Parameters
	Parameters isAccessKeySignature_Parameters `protobuf_oneof:"parameters"`
	// https://wiki.yandex-team.ru/cloud/iamrm/research/sts-minimal/#mvpdetaileddesign
	SessionToken string `protobuf:"bytes,6,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
}

func (x *AccessKeySignature) Reset() {
	*x = AccessKeySignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessKeySignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessKeySignature) ProtoMessage() {}

func (x *AccessKeySignature) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessKeySignature.ProtoReflect.Descriptor instead.
func (*AccessKeySignature) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{9}
}

func (x *AccessKeySignature) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AccessKeySignature) GetStringToSign() string {
	if x != nil {
		return x.StringToSign
	}
	return ""
}

func (x *AccessKeySignature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (m *AccessKeySignature) GetParameters() isAccessKeySignature_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *AccessKeySignature) GetV2Parameters() *AccessKeySignature_Version2Parameters {
	if x, ok := x.GetParameters().(*AccessKeySignature_V2Parameters); ok {
		return x.V2Parameters
	}
	return nil
}

func (x *AccessKeySignature) GetV4Parameters() *AccessKeySignature_Version4Parameters {
	if x, ok := x.GetParameters().(*AccessKeySignature_V4Parameters); ok {
		return x.V4Parameters
	}
	return nil
}

func (x *AccessKeySignature) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

type isAccessKeySignature_Parameters interface {
	isAccessKeySignature_Parameters()
}

type AccessKeySignature_V2Parameters struct {
	V2Parameters *AccessKeySignature_Version2Parameters `protobuf:"bytes,4,opt,name=v2_parameters,json=v2Parameters,proto3,oneof"`
}

type AccessKeySignature_V4Parameters struct {
	V4Parameters *AccessKeySignature_Version4Parameters `protobuf:"bytes,5,opt,name=v4_parameters,json=v4Parameters,proto3,oneof"`
}

func (*AccessKeySignature_V2Parameters) isAccessKeySignature_Parameters() {}

func (*AccessKeySignature_V4Parameters) isAccessKeySignature_Parameters() {}

type ExchangeIamTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ttl                *durationpb.Duration `protobuf:"bytes,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	ResourceBoundaries []*ResourceBoundary  `protobuf:"bytes,2,rep,name=resource_boundaries,json=resourceBoundaries,proto3" json:"resource_boundaries,omitempty"`
}

func (x *ExchangeIamTokenRequest) Reset() {
	*x = ExchangeIamTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeIamTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeIamTokenRequest) ProtoMessage() {}

func (x *ExchangeIamTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeIamTokenRequest.ProtoReflect.Descriptor instead.
func (*ExchangeIamTokenRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{10}
}

func (x *ExchangeIamTokenRequest) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *ExchangeIamTokenRequest) GetResourceBoundaries() []*ResourceBoundary {
	if x != nil {
		return x.ResourceBoundaries
	}
	return nil
}

type ExchangeIamTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IamToken  string                 `protobuf:"bytes,1,opt,name=iam_token,json=iamToken,proto3" json:"iam_token,omitempty"`
	IssuedAt  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Subject   *ts.Subject            `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *ExchangeIamTokenResponse) Reset() {
	*x = ExchangeIamTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeIamTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeIamTokenResponse) ProtoMessage() {}

func (x *ExchangeIamTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeIamTokenResponse.ProtoReflect.Descriptor instead.
func (*ExchangeIamTokenResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{11}
}

func (x *ExchangeIamTokenResponse) GetIamToken() string {
	if x != nil {
		return x.IamToken
	}
	return ""
}

func (x *ExchangeIamTokenResponse) GetIssuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedAt
	}
	return nil
}

func (x *ExchangeIamTokenResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *ExchangeIamTokenResponse) GetSubject() *ts.Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

type AccessKeySignature_Version2Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignatureMethod AccessKeySignature_Version2Parameters_SignatureMethod `protobuf:"varint,1,opt,name=signature_method,json=signatureMethod,proto3,enum=yandex.cloud.priv.iam.v1.AccessKeySignature_Version2Parameters_SignatureMethod" json:"signature_method,omitempty"`
}

func (x *AccessKeySignature_Version2Parameters) Reset() {
	*x = AccessKeySignature_Version2Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessKeySignature_Version2Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessKeySignature_Version2Parameters) ProtoMessage() {}

func (x *AccessKeySignature_Version2Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessKeySignature_Version2Parameters.ProtoReflect.Descriptor instead.
func (*AccessKeySignature_Version2Parameters) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{9, 0}
}

func (x *AccessKeySignature_Version2Parameters) GetSignatureMethod() AccessKeySignature_Version2Parameters_SignatureMethod {
	if x != nil {
		return x.SignatureMethod
	}
	return AccessKeySignature_Version2Parameters_SIGNATURE_METHOD_UNSPECIFIED
}

type AccessKeySignature_Version4Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=signed_at,json=signedAt,proto3" json:"signed_at,omitempty"`
	Service  string                 `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Region   string                 `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *AccessKeySignature_Version4Parameters) Reset() {
	*x = AccessKeySignature_Version4Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessKeySignature_Version4Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessKeySignature_Version4Parameters) ProtoMessage() {}

func (x *AccessKeySignature_Version4Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessKeySignature_Version4Parameters.ProtoReflect.Descriptor instead.
func (*AccessKeySignature_Version4Parameters) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP(), []int{9, 1}
}

func (x *AccessKeySignature_Version4Parameters) GetSignedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SignedAt
	}
	return nil
}

func (x *AccessKeySignature_Version4Parameters) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *AccessKeySignature_Version4Parameters) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

var File_yandex_cloud_priv_iam_v1_iam_token_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDesc = []byte{
	0x0a, 0x30, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x18, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x21, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72,
	0x69, 0x76, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3b, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x2f,
	0x69, 0x61, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x35, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72,
	0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x03, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x1b, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xca, 0x89, 0x31, 0x06,
	0x3c, 0x3d, 0x34, 0x30, 0x30, 0x30, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x04, 0x48, 0x00,
	0x52, 0x18, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x03, 0x6a, 0x77,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x38,
	0x30, 0x30, 0x30, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x07, 0x48, 0x00, 0x52, 0x03, 0x6a,
	0x77, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x69, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x05,
	0x48, 0x00, 0x52, 0x09, 0x69, 0x61, 0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x69, 0x0a,
	0x17, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x59, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x15, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x5b, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x12,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x10, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x04,
	0x80, 0x83, 0x31, 0x01, 0x22, 0xc3, 0x03, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89,
	0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca,
	0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x1b, 0x77, 0x6c, 0x69, 0x5f, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x89,
	0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x18, 0x77, 0x6c, 0x69, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x5b, 0x0a,
	0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x21, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x50, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x04, 0xa8, 0x89, 0x31, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12,
	0x29, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x13, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xc2, 0x89,
	0x31, 0x04, 0x3c, 0x3d, 0x31, 0x30, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74,
	0x6c, 0x12, 0x5b, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa8,
	0x02, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04,
	0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d,
	0x35, 0x30, 0x52, 0x0e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31,
	0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89,
	0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x19, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35,
	0x30, 0x52, 0x16, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x27, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04,
	0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x22, 0xf3, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x69,
	0x61, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x02, 0x52, 0x08, 0x69, 0x61, 0x6d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x42, 0x0a, 0x15, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x09, 0x69, 0x61, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x02,
	0x52, 0x08, 0x69, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x11, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x22, 0xde, 0x06, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0e, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x38, 0x31, 0x39,
	0x32, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x33, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32,
	0x38, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x76, 0x32, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x76, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x0d,
	0x76, 0x34, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xa8, 0x89, 0x31,
	0x00, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x34, 0x30, 0x39, 0x36, 0xc8, 0x8f, 0x31, 0x01, 0xd0,
	0x8f, 0x31, 0x0a, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0xe5, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x7a, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x22, 0x53, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x4d, 0x41,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x31, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x4d, 0x41, 0x43,
	0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x02, 0x1a, 0xa1, 0x01, 0x0a, 0x12, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x3d, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x04, 0xa8, 0x89, 0x31, 0x01, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x26, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31,
	0x04, 0x3c, 0x3d, 0x33, 0x32, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x04, 0x80, 0x83, 0x31,
	0x01, 0x22, 0xa3, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x61,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x5b, 0x0a, 0x13, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x69, 0x61, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31,
	0x02, 0x52, 0x08, 0x69, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12,
	0x3e, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x32,
	0xaf, 0x09, 0x0a, 0x0f, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x69,
	0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x83, 0x01, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7f, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x41, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01,
	0x12, 0x7f, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f,
	0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6b, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x2f, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x61, 0x6d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x61,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71,
	0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x61,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x51, 0x42, 0x04, 0x50, 0x49, 0x54, 0x53, 0x5a, 0x49, 0x61, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31,
	0x3b, 0x69, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescData = file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDesc
)

func file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescData)
	})
	return file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDescData
}

var file_yandex_cloud_priv_iam_v1_iam_token_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_yandex_cloud_priv_iam_v1_iam_token_service_proto_goTypes = []interface{}{
	(AccessKeySignature_Version2Parameters_SignatureMethod)(0), // 0: yandex.cloud.priv.iam.v1.AccessKeySignature.Version2Parameters.SignatureMethod
	(*CreateIamTokenRequest)(nil),                              // 1: yandex.cloud.priv.iam.v1.CreateIamTokenRequest
	(*CreateIamTokenForSubjectRequest)(nil),                    // 2: yandex.cloud.priv.iam.v1.CreateIamTokenForSubjectRequest
	(*CreateIamTokenForAccessKeyRequest)(nil),                  // 3: yandex.cloud.priv.iam.v1.CreateIamTokenForAccessKeyRequest
	(*CreateIamTokenForServiceAccountRequest)(nil),             // 4: yandex.cloud.priv.iam.v1.CreateIamTokenForServiceAccountRequest
	(*CreateIamTokenForServiceRequest)(nil),                    // 5: yandex.cloud.priv.iam.v1.CreateIamTokenForServiceRequest
	(*CreateIamTokenForComputeInstanceRequest)(nil),            // 6: yandex.cloud.priv.iam.v1.CreateIamTokenForComputeInstanceRequest
	(*CreateIamTokenResponse)(nil),                             // 7: yandex.cloud.priv.iam.v1.CreateIamTokenResponse
	(*RevokeIamTokenRequest)(nil),                              // 8: yandex.cloud.priv.iam.v1.RevokeIamTokenRequest
	(*RevokeIamTokenResponse)(nil),                             // 9: yandex.cloud.priv.iam.v1.RevokeIamTokenResponse
	(*AccessKeySignature)(nil),                                 // 10: yandex.cloud.priv.iam.v1.AccessKeySignature
	(*ExchangeIamTokenRequest)(nil),                            // 11: yandex.cloud.priv.iam.v1.ExchangeIamTokenRequest
	(*ExchangeIamTokenResponse)(nil),                           // 12: yandex.cloud.priv.iam.v1.ExchangeIamTokenResponse
	(*AccessKeySignature_Version2Parameters)(nil),              // 13: yandex.cloud.priv.iam.v1.AccessKeySignature.Version2Parameters
	(*AccessKeySignature_Version4Parameters)(nil),              // 14: yandex.cloud.priv.iam.v1.AccessKeySignature.Version4Parameters
	(*YandexPassportCookies)(nil),                              // 15: yandex.cloud.priv.iam.v1.YandexPassportCookies
	(*durationpb.Duration)(nil),                                // 16: google.protobuf.Duration
	(*ResourceBoundary)(nil),                                   // 17: yandex.cloud.priv.iam.v1.ResourceBoundary
	(*v1.OAuthRequest)(nil),                                    // 18: yandex.cloud.priv.oauth.v1.OAuthRequest
	(*timestamppb.Timestamp)(nil),                              // 19: google.protobuf.Timestamp
	(*ts.Subject)(nil),                                         // 20: yandex.cloud.priv.iam.v1.ts.Subject
	(*RevokedCredential)(nil),                                  // 21: yandex.cloud.priv.iam.v1.RevokedCredential
}
var file_yandex_cloud_priv_iam_v1_iam_token_service_proto_depIdxs = []int32{
	15, // 0: yandex.cloud.priv.iam.v1.CreateIamTokenRequest.yandex_passport_cookies:type_name -> yandex.cloud.priv.iam.v1.YandexPassportCookies
	16, // 1: yandex.cloud.priv.iam.v1.CreateIamTokenRequest.ttl:type_name -> google.protobuf.Duration
	17, // 2: yandex.cloud.priv.iam.v1.CreateIamTokenRequest.resource_boundaries:type_name -> yandex.cloud.priv.iam.v1.ResourceBoundary
	18, // 3: yandex.cloud.priv.iam.v1.CreateIamTokenForSubjectRequest.oauth_request:type_name -> yandex.cloud.priv.oauth.v1.OAuthRequest
	16, // 4: yandex.cloud.priv.iam.v1.CreateIamTokenForSubjectRequest.ttl:type_name -> google.protobuf.Duration
	17, // 5: yandex.cloud.priv.iam.v1.CreateIamTokenForSubjectRequest.resource_boundaries:type_name -> yandex.cloud.priv.iam.v1.ResourceBoundary
	10, // 6: yandex.cloud.priv.iam.v1.CreateIamTokenForAccessKeyRequest.signature:type_name -> yandex.cloud.priv.iam.v1.AccessKeySignature
	16, // 7: yandex.cloud.priv.iam.v1.CreateIamTokenForAccessKeyRequest.ttl:type_name -> google.protobuf.Duration
	17, // 8: yandex.cloud.priv.iam.v1.CreateIamTokenForAccessKeyRequest.resource_boundaries:type_name -> yandex.cloud.priv.iam.v1.ResourceBoundary
	16, // 9: yandex.cloud.priv.iam.v1.CreateIamTokenForServiceAccountRequest.ttl:type_name -> google.protobuf.Duration
	17, // 10: yandex.cloud.priv.iam.v1.CreateIamTokenForServiceAccountRequest.resource_boundaries:type_name -> yandex.cloud.priv.iam.v1.ResourceBoundary
	19, // 11: yandex.cloud.priv.iam.v1.CreateIamTokenResponse.issued_at:type_name -> google.protobuf.Timestamp
	19, // 12: yandex.cloud.priv.iam.v1.CreateIamTokenResponse.expires_at:type_name -> google.protobuf.Timestamp
	20, // 13: yandex.cloud.priv.iam.v1.CreateIamTokenResponse.subject:type_name -> yandex.cloud.priv.iam.v1.ts.Subject
	21, // 14: yandex.cloud.priv.iam.v1.RevokeIamTokenResponse.revoked_credential:type_name -> yandex.cloud.priv.iam.v1.RevokedCredential
	13, // 15: yandex.cloud.priv.iam.v1.AccessKeySignature.v2_parameters:type_name -> yandex.cloud.priv.iam.v1.AccessKeySignature.Version2Parameters
	14, // 16: yandex.cloud.priv.iam.v1.AccessKeySignature.v4_parameters:type_name -> yandex.cloud.priv.iam.v1.AccessKeySignature.Version4Parameters
	16, // 17: yandex.cloud.priv.iam.v1.ExchangeIamTokenRequest.ttl:type_name -> google.protobuf.Duration
	17, // 18: yandex.cloud.priv.iam.v1.ExchangeIamTokenRequest.resource_boundaries:type_name -> yandex.cloud.priv.iam.v1.ResourceBoundary
	19, // 19: yandex.cloud.priv.iam.v1.ExchangeIamTokenResponse.issued_at:type_name -> google.protobuf.Timestamp
	19, // 20: yandex.cloud.priv.iam.v1.ExchangeIamTokenResponse.expires_at:type_name -> google.protobuf.Timestamp
	20, // 21: yandex.cloud.priv.iam.v1.ExchangeIamTokenResponse.subject:type_name -> yandex.cloud.priv.iam.v1.ts.Subject
	0,  // 22: yandex.cloud.priv.iam.v1.AccessKeySignature.Version2Parameters.signature_method:type_name -> yandex.cloud.priv.iam.v1.AccessKeySignature.Version2Parameters.SignatureMethod
	19, // 23: yandex.cloud.priv.iam.v1.AccessKeySignature.Version4Parameters.signed_at:type_name -> google.protobuf.Timestamp
	1,  // 24: yandex.cloud.priv.iam.v1.IamTokenService.Create:input_type -> yandex.cloud.priv.iam.v1.CreateIamTokenRequest
	3,  // 25: yandex.cloud.priv.iam.v1.IamTokenService.CreateForAccessKey:input_type -> yandex.cloud.priv.iam.v1.CreateIamTokenForAccessKeyRequest
	4,  // 26: yandex.cloud.priv.iam.v1.IamTokenService.CreateForServiceAccount:input_type -> yandex.cloud.priv.iam.v1.CreateIamTokenForServiceAccountRequest
	5,  // 27: yandex.cloud.priv.iam.v1.IamTokenService.CreateForService:input_type -> yandex.cloud.priv.iam.v1.CreateIamTokenForServiceRequest
	6,  // 28: yandex.cloud.priv.iam.v1.IamTokenService.CreateForComputeInstance:input_type -> yandex.cloud.priv.iam.v1.CreateIamTokenForComputeInstanceRequest
	2,  // 29: yandex.cloud.priv.iam.v1.IamTokenService.CreateForUserAccount:input_type -> yandex.cloud.priv.iam.v1.CreateIamTokenForSubjectRequest
	2,  // 30: yandex.cloud.priv.iam.v1.IamTokenService.CreateForSubject:input_type -> yandex.cloud.priv.iam.v1.CreateIamTokenForSubjectRequest
	8,  // 31: yandex.cloud.priv.iam.v1.IamTokenService.Revoke:input_type -> yandex.cloud.priv.iam.v1.RevokeIamTokenRequest
	11, // 32: yandex.cloud.priv.iam.v1.IamTokenService.Exchange:input_type -> yandex.cloud.priv.iam.v1.ExchangeIamTokenRequest
	7,  // 33: yandex.cloud.priv.iam.v1.IamTokenService.Create:output_type -> yandex.cloud.priv.iam.v1.CreateIamTokenResponse
	7,  // 34: yandex.cloud.priv.iam.v1.IamTokenService.CreateForAccessKey:output_type -> yandex.cloud.priv.iam.v1.CreateIamTokenResponse
	7,  // 35: yandex.cloud.priv.iam.v1.IamTokenService.CreateForServiceAccount:output_type -> yandex.cloud.priv.iam.v1.CreateIamTokenResponse
	7,  // 36: yandex.cloud.priv.iam.v1.IamTokenService.CreateForService:output_type -> yandex.cloud.priv.iam.v1.CreateIamTokenResponse
	7,  // 37: yandex.cloud.priv.iam.v1.IamTokenService.CreateForComputeInstance:output_type -> yandex.cloud.priv.iam.v1.CreateIamTokenResponse
	7,  // 38: yandex.cloud.priv.iam.v1.IamTokenService.CreateForUserAccount:output_type -> yandex.cloud.priv.iam.v1.CreateIamTokenResponse
	7,  // 39: yandex.cloud.priv.iam.v1.IamTokenService.CreateForSubject:output_type -> yandex.cloud.priv.iam.v1.CreateIamTokenResponse
	9,  // 40: yandex.cloud.priv.iam.v1.IamTokenService.Revoke:output_type -> yandex.cloud.priv.iam.v1.RevokeIamTokenResponse
	12, // 41: yandex.cloud.priv.iam.v1.IamTokenService.Exchange:output_type -> yandex.cloud.priv.iam.v1.ExchangeIamTokenResponse
	33, // [33:42] is the sub-list for method output_type
	24, // [24:33] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_iam_v1_iam_token_service_proto_init() }
func file_yandex_cloud_priv_iam_v1_iam_token_service_proto_init() {
	if File_yandex_cloud_priv_iam_v1_iam_token_service_proto != nil {
		return
	}
	file_yandex_cloud_priv_iam_v1_yandex_passport_cookie_proto_init()
	file_yandex_cloud_priv_iam_v1_revoked_credential_proto_init()
	file_yandex_cloud_priv_iam_v1_resource_boundary_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIamTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIamTokenForSubjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIamTokenForAccessKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIamTokenForServiceAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIamTokenForServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIamTokenForComputeInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIamTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeIamTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeIamTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessKeySignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeIamTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeIamTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessKeySignature_Version2Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessKeySignature_Version4Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CreateIamTokenRequest_YandexPassportOauthToken)(nil),
		(*CreateIamTokenRequest_Jwt)(nil),
		(*CreateIamTokenRequest_IamCookie)(nil),
		(*CreateIamTokenRequest_YandexPassportCookies)(nil),
	}
	file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*AccessKeySignature_V2Parameters)(nil),
		(*AccessKeySignature_V4Parameters)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_priv_iam_v1_iam_token_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_iam_v1_iam_token_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_priv_iam_v1_iam_token_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_priv_iam_v1_iam_token_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_iam_v1_iam_token_service_proto = out.File
	file_yandex_cloud_priv_iam_v1_iam_token_service_proto_rawDesc = nil
	file_yandex_cloud_priv_iam_v1_iam_token_service_proto_goTypes = nil
	file_yandex_cloud_priv_iam_v1_iam_token_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IamTokenServiceClient is the client API for IamTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IamTokenServiceClient interface {
	// method doesn't require auth
	Create(ctx context.Context, in *CreateIamTokenRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error)
	// create iam token for service account using access key
	CreateForAccessKey(ctx context.Context, in *CreateIamTokenForAccessKeyRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error)
	// create iam token for service account
	CreateForServiceAccount(ctx context.Context, in *CreateIamTokenForServiceAccountRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error)
	// create iam token for service
	CreateForService(ctx context.Context, in *CreateIamTokenForServiceRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error)
	// create iam token for compute instance
	CreateForComputeInstance(ctx context.Context, in *CreateIamTokenForComputeInstanceRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error)
	// Deprecated: Do not use.
	// create iam token for oauth request
	CreateForUserAccount(ctx context.Context, in *CreateIamTokenForSubjectRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error)
	// create iam token for oauth request
	CreateForSubject(ctx context.Context, in *CreateIamTokenForSubjectRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error)
	Revoke(ctx context.Context, in *RevokeIamTokenRequest, opts ...grpc.CallOption) (*RevokeIamTokenResponse, error)
	Exchange(ctx context.Context, in *ExchangeIamTokenRequest, opts ...grpc.CallOption) (*ExchangeIamTokenResponse, error)
}

type iamTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIamTokenServiceClient(cc grpc.ClientConnInterface) IamTokenServiceClient {
	return &iamTokenServiceClient{cc}
}

func (c *iamTokenServiceClient) Create(ctx context.Context, in *CreateIamTokenRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error) {
	out := new(CreateIamTokenResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.IamTokenService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamTokenServiceClient) CreateForAccessKey(ctx context.Context, in *CreateIamTokenForAccessKeyRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error) {
	out := new(CreateIamTokenResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.IamTokenService/CreateForAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamTokenServiceClient) CreateForServiceAccount(ctx context.Context, in *CreateIamTokenForServiceAccountRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error) {
	out := new(CreateIamTokenResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.IamTokenService/CreateForServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamTokenServiceClient) CreateForService(ctx context.Context, in *CreateIamTokenForServiceRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error) {
	out := new(CreateIamTokenResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.IamTokenService/CreateForService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamTokenServiceClient) CreateForComputeInstance(ctx context.Context, in *CreateIamTokenForComputeInstanceRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error) {
	out := new(CreateIamTokenResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.IamTokenService/CreateForComputeInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *iamTokenServiceClient) CreateForUserAccount(ctx context.Context, in *CreateIamTokenForSubjectRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error) {
	out := new(CreateIamTokenResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.IamTokenService/CreateForUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamTokenServiceClient) CreateForSubject(ctx context.Context, in *CreateIamTokenForSubjectRequest, opts ...grpc.CallOption) (*CreateIamTokenResponse, error) {
	out := new(CreateIamTokenResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.IamTokenService/CreateForSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamTokenServiceClient) Revoke(ctx context.Context, in *RevokeIamTokenRequest, opts ...grpc.CallOption) (*RevokeIamTokenResponse, error) {
	out := new(RevokeIamTokenResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.IamTokenService/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamTokenServiceClient) Exchange(ctx context.Context, in *ExchangeIamTokenRequest, opts ...grpc.CallOption) (*ExchangeIamTokenResponse, error) {
	out := new(ExchangeIamTokenResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.IamTokenService/Exchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IamTokenServiceServer is the server API for IamTokenService service.
type IamTokenServiceServer interface {
	// method doesn't require auth
	Create(context.Context, *CreateIamTokenRequest) (*CreateIamTokenResponse, error)
	// create iam token for service account using access key
	CreateForAccessKey(context.Context, *CreateIamTokenForAccessKeyRequest) (*CreateIamTokenResponse, error)
	// create iam token for service account
	CreateForServiceAccount(context.Context, *CreateIamTokenForServiceAccountRequest) (*CreateIamTokenResponse, error)
	// create iam token for service
	CreateForService(context.Context, *CreateIamTokenForServiceRequest) (*CreateIamTokenResponse, error)
	// create iam token for compute instance
	CreateForComputeInstance(context.Context, *CreateIamTokenForComputeInstanceRequest) (*CreateIamTokenResponse, error)
	// Deprecated: Do not use.
	// create iam token for oauth request
	CreateForUserAccount(context.Context, *CreateIamTokenForSubjectRequest) (*CreateIamTokenResponse, error)
	// create iam token for oauth request
	CreateForSubject(context.Context, *CreateIamTokenForSubjectRequest) (*CreateIamTokenResponse, error)
	Revoke(context.Context, *RevokeIamTokenRequest) (*RevokeIamTokenResponse, error)
	Exchange(context.Context, *ExchangeIamTokenRequest) (*ExchangeIamTokenResponse, error)
}

// UnimplementedIamTokenServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIamTokenServiceServer struct {
}

func (*UnimplementedIamTokenServiceServer) Create(context.Context, *CreateIamTokenRequest) (*CreateIamTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedIamTokenServiceServer) CreateForAccessKey(context.Context, *CreateIamTokenForAccessKeyRequest) (*CreateIamTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForAccessKey not implemented")
}
func (*UnimplementedIamTokenServiceServer) CreateForServiceAccount(context.Context, *CreateIamTokenForServiceAccountRequest) (*CreateIamTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForServiceAccount not implemented")
}
func (*UnimplementedIamTokenServiceServer) CreateForService(context.Context, *CreateIamTokenForServiceRequest) (*CreateIamTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForService not implemented")
}
func (*UnimplementedIamTokenServiceServer) CreateForComputeInstance(context.Context, *CreateIamTokenForComputeInstanceRequest) (*CreateIamTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForComputeInstance not implemented")
}
func (*UnimplementedIamTokenServiceServer) CreateForUserAccount(context.Context, *CreateIamTokenForSubjectRequest) (*CreateIamTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForUserAccount not implemented")
}
func (*UnimplementedIamTokenServiceServer) CreateForSubject(context.Context, *CreateIamTokenForSubjectRequest) (*CreateIamTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForSubject not implemented")
}
func (*UnimplementedIamTokenServiceServer) Revoke(context.Context, *RevokeIamTokenRequest) (*RevokeIamTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (*UnimplementedIamTokenServiceServer) Exchange(context.Context, *ExchangeIamTokenRequest) (*ExchangeIamTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}

func RegisterIamTokenServiceServer(s *grpc.Server, srv IamTokenServiceServer) {
	s.RegisterService(&_IamTokenService_serviceDesc, srv)
}

func _IamTokenService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIamTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamTokenServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.IamTokenService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamTokenServiceServer).Create(ctx, req.(*CreateIamTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamTokenService_CreateForAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIamTokenForAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamTokenServiceServer).CreateForAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.IamTokenService/CreateForAccessKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamTokenServiceServer).CreateForAccessKey(ctx, req.(*CreateIamTokenForAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamTokenService_CreateForServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIamTokenForServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamTokenServiceServer).CreateForServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.IamTokenService/CreateForServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamTokenServiceServer).CreateForServiceAccount(ctx, req.(*CreateIamTokenForServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamTokenService_CreateForService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIamTokenForServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamTokenServiceServer).CreateForService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.IamTokenService/CreateForService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamTokenServiceServer).CreateForService(ctx, req.(*CreateIamTokenForServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamTokenService_CreateForComputeInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIamTokenForComputeInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamTokenServiceServer).CreateForComputeInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.IamTokenService/CreateForComputeInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamTokenServiceServer).CreateForComputeInstance(ctx, req.(*CreateIamTokenForComputeInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamTokenService_CreateForUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIamTokenForSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamTokenServiceServer).CreateForUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.IamTokenService/CreateForUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamTokenServiceServer).CreateForUserAccount(ctx, req.(*CreateIamTokenForSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamTokenService_CreateForSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIamTokenForSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamTokenServiceServer).CreateForSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.IamTokenService/CreateForSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamTokenServiceServer).CreateForSubject(ctx, req.(*CreateIamTokenForSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamTokenService_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeIamTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamTokenServiceServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.IamTokenService/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamTokenServiceServer).Revoke(ctx, req.(*RevokeIamTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamTokenService_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeIamTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamTokenServiceServer).Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.IamTokenService/Exchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamTokenServiceServer).Exchange(ctx, req.(*ExchangeIamTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IamTokenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.priv.iam.v1.IamTokenService",
	HandlerType: (*IamTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IamTokenService_Create_Handler,
		},
		{
			MethodName: "CreateForAccessKey",
			Handler:    _IamTokenService_CreateForAccessKey_Handler,
		},
		{
			MethodName: "CreateForServiceAccount",
			Handler:    _IamTokenService_CreateForServiceAccount_Handler,
		},
		{
			MethodName: "CreateForService",
			Handler:    _IamTokenService_CreateForService_Handler,
		},
		{
			MethodName: "CreateForComputeInstance",
			Handler:    _IamTokenService_CreateForComputeInstance_Handler,
		},
		{
			MethodName: "CreateForUserAccount",
			Handler:    _IamTokenService_CreateForUserAccount_Handler,
		},
		{
			MethodName: "CreateForSubject",
			Handler:    _IamTokenService_CreateForSubject_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _IamTokenService_Revoke_Handler,
		},
		{
			MethodName: "Exchange",
			Handler:    _IamTokenService_Exchange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/priv/iam/v1/iam_token_service.proto",
}
