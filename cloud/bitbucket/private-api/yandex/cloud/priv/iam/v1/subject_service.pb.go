// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.3
// source: yandex/cloud/priv/iam/v1/subject_service.proto

package iam

import (
	_ "github.com/doublecloud/tross/cloud/bitbucket/common-api/yandex/cloud/api"
	_ "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv"
	operation "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/operation"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetOrCreateSubjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional IAM Subject unique identifier (well-known-id).
	SubjectId string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	// IAM Subject type. May be one of:
	//   - serviceAccount (unsupported yet)
	//   - federatedUser
	//   - invitee
	SubjectType string `protobuf:"bytes,2,opt,name=subject_type,json=subjectType,proto3" json:"subject_type,omitempty"`
	// The Subject external (IdP-specific) identifier.
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// Json-string representation of map<string, object> IAM Subject attributes.
	Attributes string `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// Json-string representation of map<string, object> IAM Subject settings.
	Settings string `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
	// Subject's federation id.
	FederationId string `protobuf:"bytes,6,opt,name=federation_id,json=federationId,proto3" json:"federation_id,omitempty"`
}

func (x *GetOrCreateSubjectRequest) Reset() {
	*x = GetOrCreateSubjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrCreateSubjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateSubjectRequest) ProtoMessage() {}

func (x *GetOrCreateSubjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrCreateSubjectRequest.ProtoReflect.Descriptor instead.
func (*GetOrCreateSubjectRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetOrCreateSubjectRequest) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *GetOrCreateSubjectRequest) GetSubjectType() string {
	if x != nil {
		return x.SubjectType
	}
	return ""
}

func (x *GetOrCreateSubjectRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *GetOrCreateSubjectRequest) GetAttributes() string {
	if x != nil {
		return x.Attributes
	}
	return ""
}

func (x *GetOrCreateSubjectRequest) GetSettings() string {
	if x != nil {
		return x.Settings
	}
	return ""
}

func (x *GetOrCreateSubjectRequest) GetFederationId() string {
	if x != nil {
		return x.FederationId
	}
	return ""
}

type GetOrCreateSubjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IAM Subject unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// IAM Subject type.
	SubjectType string `protobuf:"bytes,2,opt,name=subject_type,json=subjectType,proto3" json:"subject_type,omitempty"`
	// The Subject external (IdP-specific) identifier.
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// Json-string representation of map<string, object> IAM Subject attributes.
	Attributes string `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// Json-string representation of map<string, object> IAM Subject settings.
	Settings string `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
	// Creation timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Subject's federation id.
	FederationId string `protobuf:"bytes,7,opt,name=federation_id,json=federationId,proto3" json:"federation_id,omitempty"`
	// Flag indicating that a new subject was created as a result of request.
	NewSubjectCreated bool `protobuf:"varint,8,opt,name=new_subject_created,json=newSubjectCreated,proto3" json:"new_subject_created,omitempty"`
}

func (x *GetOrCreateSubjectResponse) Reset() {
	*x = GetOrCreateSubjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrCreateSubjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateSubjectResponse) ProtoMessage() {}

func (x *GetOrCreateSubjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrCreateSubjectResponse.ProtoReflect.Descriptor instead.
func (*GetOrCreateSubjectResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetOrCreateSubjectResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetOrCreateSubjectResponse) GetSubjectType() string {
	if x != nil {
		return x.SubjectType
	}
	return ""
}

func (x *GetOrCreateSubjectResponse) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *GetOrCreateSubjectResponse) GetAttributes() string {
	if x != nil {
		return x.Attributes
	}
	return ""
}

func (x *GetOrCreateSubjectResponse) GetSettings() string {
	if x != nil {
		return x.Settings
	}
	return ""
}

func (x *GetOrCreateSubjectResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetOrCreateSubjectResponse) GetFederationId() string {
	if x != nil {
		return x.FederationId
	}
	return ""
}

func (x *GetOrCreateSubjectResponse) GetNewSubjectCreated() bool {
	if x != nil {
		return x.NewSubjectCreated
	}
	return false
}

type MergeSubjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source subject.
	// Attention!!! Source subject will be deleted at the end of the merge operation.
	SourceSubjectId string `protobuf:"bytes,1,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	// Destination subject.
	DestinationSubjectId string `protobuf:"bytes,2,opt,name=destination_subject_id,json=destinationSubjectId,proto3" json:"destination_subject_id,omitempty"`
}

func (x *MergeSubjectsRequest) Reset() {
	*x = MergeSubjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeSubjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeSubjectsRequest) ProtoMessage() {}

func (x *MergeSubjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeSubjectsRequest.ProtoReflect.Descriptor instead.
func (*MergeSubjectsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{2}
}

func (x *MergeSubjectsRequest) GetSourceSubjectId() string {
	if x != nil {
		return x.SourceSubjectId
	}
	return ""
}

func (x *MergeSubjectsRequest) GetDestinationSubjectId() string {
	if x != nil {
		return x.DestinationSubjectId
	}
	return ""
}

type MergeSubjectsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSubjectId      string `protobuf:"bytes,1,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	DestinationSubjectId string `protobuf:"bytes,2,opt,name=destination_subject_id,json=destinationSubjectId,proto3" json:"destination_subject_id,omitempty"`
}

func (x *MergeSubjectsMetadata) Reset() {
	*x = MergeSubjectsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeSubjectsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeSubjectsMetadata) ProtoMessage() {}

func (x *MergeSubjectsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeSubjectsMetadata.ProtoReflect.Descriptor instead.
func (*MergeSubjectsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{3}
}

func (x *MergeSubjectsMetadata) GetSourceSubjectId() string {
	if x != nil {
		return x.SourceSubjectId
	}
	return ""
}

func (x *MergeSubjectsMetadata) GetDestinationSubjectId() string {
	if x != nil {
		return x.DestinationSubjectId
	}
	return ""
}

type DeleteSubjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
}

func (x *DeleteSubjectRequest) Reset() {
	*x = DeleteSubjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectRequest) ProtoMessage() {}

func (x *DeleteSubjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubjectRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSubjectRequest) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

type DeleteSubjectMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
}

func (x *DeleteSubjectMetadata) Reset() {
	*x = DeleteSubjectMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectMetadata) ProtoMessage() {}

func (x *DeleteSubjectMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectMetadata.ProtoReflect.Descriptor instead.
func (*DeleteSubjectMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteSubjectMetadata) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

type SubjectExternalIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalId   string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	FederationId string `protobuf:"bytes,2,opt,name=federation_id,json=federationId,proto3" json:"federation_id,omitempty"`
}

func (x *SubjectExternalIdentity) Reset() {
	*x = SubjectExternalIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectExternalIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectExternalIdentity) ProtoMessage() {}

func (x *SubjectExternalIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectExternalIdentity.ProtoReflect.Descriptor instead.
func (*SubjectExternalIdentity) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{6}
}

func (x *SubjectExternalIdentity) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *SubjectExternalIdentity) GetFederationId() string {
	if x != nil {
		return x.FederationId
	}
	return ""
}

// All bulk methods accept SubjectIdentities where:
//   - neither subject_id nor external_identity is specified - create new subject of specified type with generated id
//     (assuming subject_type does not require an external identity)
//   - only subject_id is specified - lookup subject by id or create new subject of specified type with specified id
//     (assuming subject_type does not require an external identity)
//   - only external_identity is specified - lookup subject by external identity or create new subject of specified type
//     with generated id and specified external identity (assuming subject_type requires one)
//   - both subject_id and external_identity are specified - lookup subject by id and external identity (both must match)
//     or create new subject of specified type with specified id and external identity (assuming subject_type requires one).
//     Existing subjects with conflicting subject_id/external_identity cause FAILED_PRECONDITION.
type SubjectIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IAM subject id.
	SubjectId string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	// Subject's identity in external IdP.
	ExternalIdentity *SubjectExternalIdentity `protobuf:"bytes,2,opt,name=external_identity,json=externalIdentity,proto3" json:"external_identity,omitempty"`
	// Subject type (e.g. "userAccount", "invitee", etc.). Always required because authorization depends on it.
	SubjectType string `protobuf:"bytes,3,opt,name=subject_type,json=subjectType,proto3" json:"subject_type,omitempty"`
}

func (x *SubjectIdentity) Reset() {
	*x = SubjectIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectIdentity) ProtoMessage() {}

func (x *SubjectIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectIdentity.ProtoReflect.Descriptor instead.
func (*SubjectIdentity) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{7}
}

func (x *SubjectIdentity) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *SubjectIdentity) GetExternalIdentity() *SubjectExternalIdentity {
	if x != nil {
		return x.ExternalIdentity
	}
	return nil
}

func (x *SubjectIdentity) GetSubjectType() string {
	if x != nil {
		return x.SubjectType
	}
	return ""
}

type SubjectDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serialized JSON patch for subject's attributes. (https://tools.ietf.org/html/rfc6902)
	// For new subjects patch is applied to an empty object {}.
	AttributesPatch string `protobuf:"bytes,3,opt,name=attributes_patch,json=attributesPatch,proto3" json:"attributes_patch,omitempty"`
	// Serialized JSON patch for subject's settings. (https://tools.ietf.org/html/rfc6902)
	// For new subjects patch is applied to an empty object {}.
	SettingsPatch string `protobuf:"bytes,4,opt,name=settings_patch,json=settingsPatch,proto3" json:"settings_patch,omitempty"`
}

func (x *SubjectDefinition) Reset() {
	*x = SubjectDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectDefinition) ProtoMessage() {}

func (x *SubjectDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectDefinition.ProtoReflect.Descriptor instead.
func (*SubjectDefinition) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{8}
}

func (x *SubjectDefinition) GetAttributesPatch() string {
	if x != nil {
		return x.AttributesPatch
	}
	return ""
}

func (x *SubjectDefinition) GetSettingsPatch() string {
	if x != nil {
		return x.SettingsPatch
	}
	return ""
}

type SubjectModificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity   *SubjectIdentity   `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Definition *SubjectDefinition `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *SubjectModificationRequest) Reset() {
	*x = SubjectModificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectModificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectModificationRequest) ProtoMessage() {}

func (x *SubjectModificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectModificationRequest.ProtoReflect.Descriptor instead.
func (*SubjectModificationRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{9}
}

func (x *SubjectModificationRequest) GetIdentity() *SubjectIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *SubjectModificationRequest) GetDefinition() *SubjectDefinition {
	if x != nil {
		return x.Definition
	}
	return nil
}

// Search for subjects with matching SubjectIdentities and return them (in which case SubjectDefinitions are ignored).
// If some subjects were not found, create them using provided SubjectDefinitions.
type BulkGetOrCreateSubjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*SubjectModificationRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// Total subjects count quotas per "federation_id".
	// If number of total subjects in some federation exceeds quota for that "federation_id",
	// operation will fail with FAILED_PRECONDITION code and will contain com.google.rpc.QuotaFailure detail
	// outlining which "federation_id" quota was exceeded (any one if multiple).
	// Only applicable to subjects that have "external_identity".
	PerFederationQuotas map[string]int64 `protobuf:"bytes,2,rep,name=per_federation_quotas,json=perFederationQuotas,proto3" json:"per_federation_quotas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BulkGetOrCreateSubjectsRequest) Reset() {
	*x = BulkGetOrCreateSubjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkGetOrCreateSubjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkGetOrCreateSubjectsRequest) ProtoMessage() {}

func (x *BulkGetOrCreateSubjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkGetOrCreateSubjectsRequest.ProtoReflect.Descriptor instead.
func (*BulkGetOrCreateSubjectsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{10}
}

func (x *BulkGetOrCreateSubjectsRequest) GetRequests() []*SubjectModificationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BulkGetOrCreateSubjectsRequest) GetPerFederationQuotas() map[string]int64 {
	if x != nil {
		return x.PerFederationQuotas
	}
	return nil
}

type BulkGetOrCreateSubjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExistingSubjects []*SubjectV2 `protobuf:"bytes,1,rep,name=existing_subjects,json=existingSubjects,proto3" json:"existing_subjects,omitempty"`
	CreatedSubjects  []*SubjectV2 `protobuf:"bytes,2,rep,name=created_subjects,json=createdSubjects,proto3" json:"created_subjects,omitempty"`
}

func (x *BulkGetOrCreateSubjectsResponse) Reset() {
	*x = BulkGetOrCreateSubjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkGetOrCreateSubjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkGetOrCreateSubjectsResponse) ProtoMessage() {}

func (x *BulkGetOrCreateSubjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkGetOrCreateSubjectsResponse.ProtoReflect.Descriptor instead.
func (*BulkGetOrCreateSubjectsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{11}
}

func (x *BulkGetOrCreateSubjectsResponse) GetExistingSubjects() []*SubjectV2 {
	if x != nil {
		return x.ExistingSubjects
	}
	return nil
}

func (x *BulkGetOrCreateSubjectsResponse) GetCreatedSubjects() []*SubjectV2 {
	if x != nil {
		return x.CreatedSubjects
	}
	return nil
}

type BulkGetOrCreateSubjectsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectIds []string `protobuf:"bytes,1,rep,name=subject_ids,json=subjectIds,proto3" json:"subject_ids,omitempty"`
}

func (x *BulkGetOrCreateSubjectsMetadata) Reset() {
	*x = BulkGetOrCreateSubjectsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkGetOrCreateSubjectsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkGetOrCreateSubjectsMetadata) ProtoMessage() {}

func (x *BulkGetOrCreateSubjectsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkGetOrCreateSubjectsMetadata.ProtoReflect.Descriptor instead.
func (*BulkGetOrCreateSubjectsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{12}
}

func (x *BulkGetOrCreateSubjectsMetadata) GetSubjectIds() []string {
	if x != nil {
		return x.SubjectIds
	}
	return nil
}

// Search for subjects with matching SubjectIdentities and update their SubjectDefinitions.
type BulkUpdateSubjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*SubjectModificationRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// Update mask fields are relative to SubjectDefinition.
	// E.g. "attributes_patch", and not "definition.attributes_patch".
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *BulkUpdateSubjectsRequest) Reset() {
	*x = BulkUpdateSubjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateSubjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateSubjectsRequest) ProtoMessage() {}

func (x *BulkUpdateSubjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateSubjectsRequest.ProtoReflect.Descriptor instead.
func (*BulkUpdateSubjectsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{13}
}

func (x *BulkUpdateSubjectsRequest) GetRequests() []*SubjectModificationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BulkUpdateSubjectsRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type BulkUpdateSubjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedSubjects []*SubjectV2 `protobuf:"bytes,1,rep,name=updated_subjects,json=updatedSubjects,proto3" json:"updated_subjects,omitempty"`
}

func (x *BulkUpdateSubjectsResponse) Reset() {
	*x = BulkUpdateSubjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateSubjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateSubjectsResponse) ProtoMessage() {}

func (x *BulkUpdateSubjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateSubjectsResponse.ProtoReflect.Descriptor instead.
func (*BulkUpdateSubjectsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{14}
}

func (x *BulkUpdateSubjectsResponse) GetUpdatedSubjects() []*SubjectV2 {
	if x != nil {
		return x.UpdatedSubjects
	}
	return nil
}

type BulkUpdateSubjectsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectIds []string `protobuf:"bytes,1,rep,name=subject_ids,json=subjectIds,proto3" json:"subject_ids,omitempty"`
}

func (x *BulkUpdateSubjectsMetadata) Reset() {
	*x = BulkUpdateSubjectsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateSubjectsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateSubjectsMetadata) ProtoMessage() {}

func (x *BulkUpdateSubjectsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateSubjectsMetadata.ProtoReflect.Descriptor instead.
func (*BulkUpdateSubjectsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{15}
}

func (x *BulkUpdateSubjectsMetadata) GetSubjectIds() []string {
	if x != nil {
		return x.SubjectIds
	}
	return nil
}

// Search for subjects with matching SubjectIdentities and update SubjectDefinitions.
// If some subjects were not found, create them using provided SubjectDefinitions.
type BulkCreateOrUpdateSubjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*SubjectModificationRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// Update mask fields are relative to SubjectDefinition.
	// Update mask is applied to existing subjects only. New subjects use entire SubjectDefinition.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Total subjects count quotas per "federation_id".
	// If number of total subjects in some federation exceeds quota for that "federation_id",
	// operation will fail with FAILED_PRECONDITION code and will contain com.google.rpc.QuotaFailure detail
	// outlining which "federation_id" quota was exceeded (any one if multiple).
	// Only applicable to subjects that have "external_identity".
	PerFederationQuotas map[string]int64 `protobuf:"bytes,3,rep,name=per_federation_quotas,json=perFederationQuotas,proto3" json:"per_federation_quotas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BulkCreateOrUpdateSubjectsRequest) Reset() {
	*x = BulkCreateOrUpdateSubjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateOrUpdateSubjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateOrUpdateSubjectsRequest) ProtoMessage() {}

func (x *BulkCreateOrUpdateSubjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateOrUpdateSubjectsRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateOrUpdateSubjectsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{16}
}

func (x *BulkCreateOrUpdateSubjectsRequest) GetRequests() []*SubjectModificationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BulkCreateOrUpdateSubjectsRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *BulkCreateOrUpdateSubjectsRequest) GetPerFederationQuotas() map[string]int64 {
	if x != nil {
		return x.PerFederationQuotas
	}
	return nil
}

type BulkCreateOrUpdateSubjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedSubjects []*SubjectV2 `protobuf:"bytes,1,rep,name=created_subjects,json=createdSubjects,proto3" json:"created_subjects,omitempty"`
	UpdatedSubjects []*SubjectV2 `protobuf:"bytes,2,rep,name=updated_subjects,json=updatedSubjects,proto3" json:"updated_subjects,omitempty"`
}

func (x *BulkCreateOrUpdateSubjectsResponse) Reset() {
	*x = BulkCreateOrUpdateSubjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateOrUpdateSubjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateOrUpdateSubjectsResponse) ProtoMessage() {}

func (x *BulkCreateOrUpdateSubjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateOrUpdateSubjectsResponse.ProtoReflect.Descriptor instead.
func (*BulkCreateOrUpdateSubjectsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{17}
}

func (x *BulkCreateOrUpdateSubjectsResponse) GetCreatedSubjects() []*SubjectV2 {
	if x != nil {
		return x.CreatedSubjects
	}
	return nil
}

func (x *BulkCreateOrUpdateSubjectsResponse) GetUpdatedSubjects() []*SubjectV2 {
	if x != nil {
		return x.UpdatedSubjects
	}
	return nil
}

type BulkCreateOrUpdateSubjectsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectIds []string `protobuf:"bytes,1,rep,name=subject_ids,json=subjectIds,proto3" json:"subject_ids,omitempty"`
}

func (x *BulkCreateOrUpdateSubjectsMetadata) Reset() {
	*x = BulkCreateOrUpdateSubjectsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateOrUpdateSubjectsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateOrUpdateSubjectsMetadata) ProtoMessage() {}

func (x *BulkCreateOrUpdateSubjectsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateOrUpdateSubjectsMetadata.ProtoReflect.Descriptor instead.
func (*BulkCreateOrUpdateSubjectsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{18}
}

func (x *BulkCreateOrUpdateSubjectsMetadata) GetSubjectIds() []string {
	if x != nil {
		return x.SubjectIds
	}
	return nil
}

// Search for subjects with matching SubjectIdentities and delete them and all related IAM resources (access bindings, keys, etc.)
type BulkDeleteSubjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identities []*SubjectIdentity `protobuf:"bytes,1,rep,name=identities,proto3" json:"identities,omitempty"`
}

func (x *BulkDeleteSubjectsRequest) Reset() {
	*x = BulkDeleteSubjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeleteSubjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteSubjectsRequest) ProtoMessage() {}

func (x *BulkDeleteSubjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteSubjectsRequest.ProtoReflect.Descriptor instead.
func (*BulkDeleteSubjectsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{19}
}

func (x *BulkDeleteSubjectsRequest) GetIdentities() []*SubjectIdentity {
	if x != nil {
		return x.Identities
	}
	return nil
}

type BulkDeleteSubjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedSubjects []*SubjectV2 `protobuf:"bytes,1,rep,name=deleted_subjects,json=deletedSubjects,proto3" json:"deleted_subjects,omitempty"`
}

func (x *BulkDeleteSubjectsResponse) Reset() {
	*x = BulkDeleteSubjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeleteSubjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteSubjectsResponse) ProtoMessage() {}

func (x *BulkDeleteSubjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteSubjectsResponse.ProtoReflect.Descriptor instead.
func (*BulkDeleteSubjectsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{20}
}

func (x *BulkDeleteSubjectsResponse) GetDeletedSubjects() []*SubjectV2 {
	if x != nil {
		return x.DeletedSubjects
	}
	return nil
}

type BulkDeleteSubjectsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectIds []string `protobuf:"bytes,1,rep,name=subject_ids,json=subjectIds,proto3" json:"subject_ids,omitempty"`
}

func (x *BulkDeleteSubjectsMetadata) Reset() {
	*x = BulkDeleteSubjectsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeleteSubjectsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteSubjectsMetadata) ProtoMessage() {}

func (x *BulkDeleteSubjectsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteSubjectsMetadata.ProtoReflect.Descriptor instead.
func (*BulkDeleteSubjectsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{21}
}

func (x *BulkDeleteSubjectsMetadata) GetSubjectIds() []string {
	if x != nil {
		return x.SubjectIds
	}
	return nil
}

// Search for subjects with matching SubjectIdentities and merge them into one.
type BulkMergeSubjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specified subjects will be deleted as a result of merge operation.
	Identities []*SubjectIdentity `protobuf:"bytes,1,rep,name=identities,proto3" json:"identities,omitempty"`
	// Existing or new subject to merge into.
	MergeInto *SubjectModificationRequest `protobuf:"bytes,2,opt,name=merge_into,json=mergeInto,proto3" json:"merge_into,omitempty"`
}

func (x *BulkMergeSubjectsRequest) Reset() {
	*x = BulkMergeSubjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMergeSubjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMergeSubjectsRequest) ProtoMessage() {}

func (x *BulkMergeSubjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMergeSubjectsRequest.ProtoReflect.Descriptor instead.
func (*BulkMergeSubjectsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{22}
}

func (x *BulkMergeSubjectsRequest) GetIdentities() []*SubjectIdentity {
	if x != nil {
		return x.Identities
	}
	return nil
}

func (x *BulkMergeSubjectsRequest) GetMergeInto() *SubjectModificationRequest {
	if x != nil {
		return x.MergeInto
	}
	return nil
}

type BulkMergeSubjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergedSubject *SubjectV2 `protobuf:"bytes,1,opt,name=merged_subject,json=mergedSubject,proto3" json:"merged_subject,omitempty"`
}

func (x *BulkMergeSubjectsResponse) Reset() {
	*x = BulkMergeSubjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMergeSubjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMergeSubjectsResponse) ProtoMessage() {}

func (x *BulkMergeSubjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMergeSubjectsResponse.ProtoReflect.Descriptor instead.
func (*BulkMergeSubjectsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{23}
}

func (x *BulkMergeSubjectsResponse) GetMergedSubject() *SubjectV2 {
	if x != nil {
		return x.MergedSubject
	}
	return nil
}

type BulkMergeSubjectsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectIds []string `protobuf:"bytes,1,rep,name=subject_ids,json=subjectIds,proto3" json:"subject_ids,omitempty"`
}

func (x *BulkMergeSubjectsMetadata) Reset() {
	*x = BulkMergeSubjectsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMergeSubjectsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMergeSubjectsMetadata) ProtoMessage() {}

func (x *BulkMergeSubjectsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMergeSubjectsMetadata.ProtoReflect.Descriptor instead.
func (*BulkMergeSubjectsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP(), []int{24}
}

func (x *BulkMergeSubjectsMetadata) GetSubjectIds() []string {
	if x != nil {
		return x.SubjectIds
	}
	return nil
}

var File_yandex_cloud_priv_iam_v1_subject_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x18, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x26, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72,
	0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x00,
	0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xa8, 0x89, 0x31, 0x01, 0xca,
	0x89, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xa8, 0x89, 0x31, 0x01,
	0xca, 0x89, 0x31, 0x05, 0x33, 0x2d, 0x32, 0x35, 0x36, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0x89, 0x31, 0x08, 0x3c,
	0x3d, 0x32, 0x36, 0x32, 0x31, 0x34, 0x34, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0x89, 0x31, 0x08, 0x3c, 0x3d, 0x32, 0x36, 0x32,
	0x31, 0x34, 0x34, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x0a,
	0x0d, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0c,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbc, 0x02, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x14,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xa8, 0x89, 0x31, 0x01, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xa8, 0x89, 0x31, 0x01, 0x52, 0x14, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x79, 0x0a, 0x15, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x43, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca,
	0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x36, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x17, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xa8, 0x89, 0x31, 0x01,
	0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0d, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8,
	0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0c, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89,
	0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x10, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0x89, 0x31, 0x08, 0x3c, 0x3d, 0x32,
	0x36, 0x32, 0x31, 0x34, 0x34, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xca, 0x89, 0x31, 0x08, 0x3c, 0x3d, 0x32, 0x36, 0x32, 0x31, 0x34, 0x34, 0x52, 0x0d, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x22, 0xb6, 0x01, 0x0a, 0x1a,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x04, 0xa8, 0x89, 0x31, 0x01, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x02, 0x0a, 0x1e, 0x42, 0x75, 0x6c, 0x6b, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x0a, 0xc2, 0x89, 0x31, 0x06, 0x31, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x65, 0x72, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0xba, 0x89, 0x31, 0x02, 0x3e, 0x30,
	0xc2, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x13, 0x70, 0x65, 0x72, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x1a,
	0x46, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x1f, 0x42, 0x75, 0x6c, 0x6b,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x52, 0x10, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x4e, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x52, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x42, 0x0a,
	0x1f, 0x42, 0x75, 0x6c, 0x6b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x73, 0x22, 0xb6, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0a, 0xc2, 0x89, 0x31, 0x06, 0x31, 0x2d, 0x31,
	0x30, 0x30, 0x30, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x6c, 0x0a, 0x1a, 0x42, 0x75,
	0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x3d, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0xa3, 0x03, 0x0a, 0x21, 0x42, 0x75, 0x6c, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0a, 0xc2, 0x89, 0x31, 0x06, 0x31, 0x2d, 0x31, 0x30, 0x30,
	0x30, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x9a, 0x01, 0x0a, 0x15, 0x70, 0x65, 0x72,
	0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10,
	0xba, 0x89, 0x31, 0x02, 0x3e, 0x30, 0xc2, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30,
	0x52, 0x13, 0x70, 0x65, 0x72, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x73, 0x1a, 0x46, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01,
	0x0a, 0x22, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x56, 0x32, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x56, 0x32, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x22, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x72, 0x0a, 0x19, 0x42,
	0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0a, 0xc2, 0x89, 0x31, 0x06, 0x31, 0x2d, 0x31,
	0x30, 0x30, 0x30, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22,
	0x6c, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x52, 0x0f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x3d, 0x0a,
	0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0xcc, 0x01, 0x0a,
	0x18, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0a, 0xc2, 0x89, 0x31, 0x06, 0x31, 0x2d,
	0x31, 0x30, 0x30, 0x30, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x59, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x04, 0xa8, 0x89, 0x31, 0x01,
	0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x19, 0x42,
	0x75, 0x6c, 0x6b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x56, 0x32, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x3c, 0x0a, 0x19, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x73, 0x32, 0xb9, 0x0a, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x93, 0x01, 0x0a, 0x05, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x32, 0xb2, 0xd2, 0x2a, 0x2e, 0x0a, 0x15, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x94, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0xb2, 0xd2, 0x2a, 0x2e, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xbb, 0x01, 0x0a,
	0x0f, 0x42, 0x75, 0x6c, 0x6b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x46, 0xb2, 0xd2, 0x2a, 0x42, 0x0a, 0x1f, 0x42, 0x75, 0x6c, 0x6b, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x42, 0x75, 0x6c, 0x6b, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x0a, 0x42,
	0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0xb2, 0xd2, 0x2a, 0x38, 0x0a, 0x1a, 0x42, 0x75,
	0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x12, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4c, 0xb2, 0xd2, 0x2a, 0x48, 0x0a, 0x22, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x42, 0x75, 0x6c, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa7,
	0x01, 0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x33, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0xb2, 0xd2, 0x2a, 0x38,
	0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x42, 0x75,
	0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x09, 0x42, 0x75, 0x6c,
	0x6b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3a, 0xb2, 0xd2, 0x2a, 0x36, 0x0a, 0x19, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x19, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x50,
	0x42, 0x03, 0x50, 0x53, 0x53, 0x5a, 0x49, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69,
	0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x61, 0x6d,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescData = file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDesc
)

func file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescData)
	})
	return file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDescData
}

var file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_yandex_cloud_priv_iam_v1_subject_service_proto_goTypes = []interface{}{
	(*GetOrCreateSubjectRequest)(nil),          // 0: yandex.cloud.priv.iam.v1.GetOrCreateSubjectRequest
	(*GetOrCreateSubjectResponse)(nil),         // 1: yandex.cloud.priv.iam.v1.GetOrCreateSubjectResponse
	(*MergeSubjectsRequest)(nil),               // 2: yandex.cloud.priv.iam.v1.MergeSubjectsRequest
	(*MergeSubjectsMetadata)(nil),              // 3: yandex.cloud.priv.iam.v1.MergeSubjectsMetadata
	(*DeleteSubjectRequest)(nil),               // 4: yandex.cloud.priv.iam.v1.DeleteSubjectRequest
	(*DeleteSubjectMetadata)(nil),              // 5: yandex.cloud.priv.iam.v1.DeleteSubjectMetadata
	(*SubjectExternalIdentity)(nil),            // 6: yandex.cloud.priv.iam.v1.SubjectExternalIdentity
	(*SubjectIdentity)(nil),                    // 7: yandex.cloud.priv.iam.v1.SubjectIdentity
	(*SubjectDefinition)(nil),                  // 8: yandex.cloud.priv.iam.v1.SubjectDefinition
	(*SubjectModificationRequest)(nil),         // 9: yandex.cloud.priv.iam.v1.SubjectModificationRequest
	(*BulkGetOrCreateSubjectsRequest)(nil),     // 10: yandex.cloud.priv.iam.v1.BulkGetOrCreateSubjectsRequest
	(*BulkGetOrCreateSubjectsResponse)(nil),    // 11: yandex.cloud.priv.iam.v1.BulkGetOrCreateSubjectsResponse
	(*BulkGetOrCreateSubjectsMetadata)(nil),    // 12: yandex.cloud.priv.iam.v1.BulkGetOrCreateSubjectsMetadata
	(*BulkUpdateSubjectsRequest)(nil),          // 13: yandex.cloud.priv.iam.v1.BulkUpdateSubjectsRequest
	(*BulkUpdateSubjectsResponse)(nil),         // 14: yandex.cloud.priv.iam.v1.BulkUpdateSubjectsResponse
	(*BulkUpdateSubjectsMetadata)(nil),         // 15: yandex.cloud.priv.iam.v1.BulkUpdateSubjectsMetadata
	(*BulkCreateOrUpdateSubjectsRequest)(nil),  // 16: yandex.cloud.priv.iam.v1.BulkCreateOrUpdateSubjectsRequest
	(*BulkCreateOrUpdateSubjectsResponse)(nil), // 17: yandex.cloud.priv.iam.v1.BulkCreateOrUpdateSubjectsResponse
	(*BulkCreateOrUpdateSubjectsMetadata)(nil), // 18: yandex.cloud.priv.iam.v1.BulkCreateOrUpdateSubjectsMetadata
	(*BulkDeleteSubjectsRequest)(nil),          // 19: yandex.cloud.priv.iam.v1.BulkDeleteSubjectsRequest
	(*BulkDeleteSubjectsResponse)(nil),         // 20: yandex.cloud.priv.iam.v1.BulkDeleteSubjectsResponse
	(*BulkDeleteSubjectsMetadata)(nil),         // 21: yandex.cloud.priv.iam.v1.BulkDeleteSubjectsMetadata
	(*BulkMergeSubjectsRequest)(nil),           // 22: yandex.cloud.priv.iam.v1.BulkMergeSubjectsRequest
	(*BulkMergeSubjectsResponse)(nil),          // 23: yandex.cloud.priv.iam.v1.BulkMergeSubjectsResponse
	(*BulkMergeSubjectsMetadata)(nil),          // 24: yandex.cloud.priv.iam.v1.BulkMergeSubjectsMetadata
	nil,                                        // 25: yandex.cloud.priv.iam.v1.BulkGetOrCreateSubjectsRequest.PerFederationQuotasEntry
	nil,                                        // 26: yandex.cloud.priv.iam.v1.BulkCreateOrUpdateSubjectsRequest.PerFederationQuotasEntry
	(*timestamppb.Timestamp)(nil),              // 27: google.protobuf.Timestamp
	(*SubjectV2)(nil),                          // 28: yandex.cloud.priv.iam.v1.SubjectV2
	(*fieldmaskpb.FieldMask)(nil),              // 29: google.protobuf.FieldMask
	(*operation.Operation)(nil),                // 30: yandex.cloud.priv.operation.Operation
}
var file_yandex_cloud_priv_iam_v1_subject_service_proto_depIdxs = []int32{
	27, // 0: yandex.cloud.priv.iam.v1.GetOrCreateSubjectResponse.created_at:type_name -> google.protobuf.Timestamp
	6,  // 1: yandex.cloud.priv.iam.v1.SubjectIdentity.external_identity:type_name -> yandex.cloud.priv.iam.v1.SubjectExternalIdentity
	7,  // 2: yandex.cloud.priv.iam.v1.SubjectModificationRequest.identity:type_name -> yandex.cloud.priv.iam.v1.SubjectIdentity
	8,  // 3: yandex.cloud.priv.iam.v1.SubjectModificationRequest.definition:type_name -> yandex.cloud.priv.iam.v1.SubjectDefinition
	9,  // 4: yandex.cloud.priv.iam.v1.BulkGetOrCreateSubjectsRequest.requests:type_name -> yandex.cloud.priv.iam.v1.SubjectModificationRequest
	25, // 5: yandex.cloud.priv.iam.v1.BulkGetOrCreateSubjectsRequest.per_federation_quotas:type_name -> yandex.cloud.priv.iam.v1.BulkGetOrCreateSubjectsRequest.PerFederationQuotasEntry
	28, // 6: yandex.cloud.priv.iam.v1.BulkGetOrCreateSubjectsResponse.existing_subjects:type_name -> yandex.cloud.priv.iam.v1.SubjectV2
	28, // 7: yandex.cloud.priv.iam.v1.BulkGetOrCreateSubjectsResponse.created_subjects:type_name -> yandex.cloud.priv.iam.v1.SubjectV2
	9,  // 8: yandex.cloud.priv.iam.v1.BulkUpdateSubjectsRequest.requests:type_name -> yandex.cloud.priv.iam.v1.SubjectModificationRequest
	29, // 9: yandex.cloud.priv.iam.v1.BulkUpdateSubjectsRequest.update_mask:type_name -> google.protobuf.FieldMask
	28, // 10: yandex.cloud.priv.iam.v1.BulkUpdateSubjectsResponse.updated_subjects:type_name -> yandex.cloud.priv.iam.v1.SubjectV2
	9,  // 11: yandex.cloud.priv.iam.v1.BulkCreateOrUpdateSubjectsRequest.requests:type_name -> yandex.cloud.priv.iam.v1.SubjectModificationRequest
	29, // 12: yandex.cloud.priv.iam.v1.BulkCreateOrUpdateSubjectsRequest.update_mask:type_name -> google.protobuf.FieldMask
	26, // 13: yandex.cloud.priv.iam.v1.BulkCreateOrUpdateSubjectsRequest.per_federation_quotas:type_name -> yandex.cloud.priv.iam.v1.BulkCreateOrUpdateSubjectsRequest.PerFederationQuotasEntry
	28, // 14: yandex.cloud.priv.iam.v1.BulkCreateOrUpdateSubjectsResponse.created_subjects:type_name -> yandex.cloud.priv.iam.v1.SubjectV2
	28, // 15: yandex.cloud.priv.iam.v1.BulkCreateOrUpdateSubjectsResponse.updated_subjects:type_name -> yandex.cloud.priv.iam.v1.SubjectV2
	7,  // 16: yandex.cloud.priv.iam.v1.BulkDeleteSubjectsRequest.identities:type_name -> yandex.cloud.priv.iam.v1.SubjectIdentity
	28, // 17: yandex.cloud.priv.iam.v1.BulkDeleteSubjectsResponse.deleted_subjects:type_name -> yandex.cloud.priv.iam.v1.SubjectV2
	7,  // 18: yandex.cloud.priv.iam.v1.BulkMergeSubjectsRequest.identities:type_name -> yandex.cloud.priv.iam.v1.SubjectIdentity
	9,  // 19: yandex.cloud.priv.iam.v1.BulkMergeSubjectsRequest.merge_into:type_name -> yandex.cloud.priv.iam.v1.SubjectModificationRequest
	28, // 20: yandex.cloud.priv.iam.v1.BulkMergeSubjectsResponse.merged_subject:type_name -> yandex.cloud.priv.iam.v1.SubjectV2
	0,  // 21: yandex.cloud.priv.iam.v1.SubjectService.GetOrCreate:input_type -> yandex.cloud.priv.iam.v1.GetOrCreateSubjectRequest
	2,  // 22: yandex.cloud.priv.iam.v1.SubjectService.Merge:input_type -> yandex.cloud.priv.iam.v1.MergeSubjectsRequest
	4,  // 23: yandex.cloud.priv.iam.v1.SubjectService.Delete:input_type -> yandex.cloud.priv.iam.v1.DeleteSubjectRequest
	10, // 24: yandex.cloud.priv.iam.v1.SubjectService.BulkGetOrCreate:input_type -> yandex.cloud.priv.iam.v1.BulkGetOrCreateSubjectsRequest
	13, // 25: yandex.cloud.priv.iam.v1.SubjectService.BulkUpdate:input_type -> yandex.cloud.priv.iam.v1.BulkUpdateSubjectsRequest
	16, // 26: yandex.cloud.priv.iam.v1.SubjectService.BulkCreateOrUpdate:input_type -> yandex.cloud.priv.iam.v1.BulkCreateOrUpdateSubjectsRequest
	19, // 27: yandex.cloud.priv.iam.v1.SubjectService.BulkDelete:input_type -> yandex.cloud.priv.iam.v1.BulkDeleteSubjectsRequest
	22, // 28: yandex.cloud.priv.iam.v1.SubjectService.BulkMerge:input_type -> yandex.cloud.priv.iam.v1.BulkMergeSubjectsRequest
	1,  // 29: yandex.cloud.priv.iam.v1.SubjectService.GetOrCreate:output_type -> yandex.cloud.priv.iam.v1.GetOrCreateSubjectResponse
	30, // 30: yandex.cloud.priv.iam.v1.SubjectService.Merge:output_type -> yandex.cloud.priv.operation.Operation
	30, // 31: yandex.cloud.priv.iam.v1.SubjectService.Delete:output_type -> yandex.cloud.priv.operation.Operation
	30, // 32: yandex.cloud.priv.iam.v1.SubjectService.BulkGetOrCreate:output_type -> yandex.cloud.priv.operation.Operation
	30, // 33: yandex.cloud.priv.iam.v1.SubjectService.BulkUpdate:output_type -> yandex.cloud.priv.operation.Operation
	30, // 34: yandex.cloud.priv.iam.v1.SubjectService.BulkCreateOrUpdate:output_type -> yandex.cloud.priv.operation.Operation
	30, // 35: yandex.cloud.priv.iam.v1.SubjectService.BulkDelete:output_type -> yandex.cloud.priv.operation.Operation
	30, // 36: yandex.cloud.priv.iam.v1.SubjectService.BulkMerge:output_type -> yandex.cloud.priv.operation.Operation
	29, // [29:37] is the sub-list for method output_type
	21, // [21:29] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_iam_v1_subject_service_proto_init() }
func file_yandex_cloud_priv_iam_v1_subject_service_proto_init() {
	if File_yandex_cloud_priv_iam_v1_subject_service_proto != nil {
		return
	}
	file_yandex_cloud_priv_iam_v1_subject_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrCreateSubjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrCreateSubjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeSubjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeSubjectsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectExternalIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectModificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkGetOrCreateSubjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkGetOrCreateSubjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkGetOrCreateSubjectsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateSubjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateSubjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateSubjectsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateOrUpdateSubjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateOrUpdateSubjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateOrUpdateSubjectsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeleteSubjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeleteSubjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeleteSubjectsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMergeSubjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMergeSubjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMergeSubjectsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_priv_iam_v1_subject_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_iam_v1_subject_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_priv_iam_v1_subject_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_iam_v1_subject_service_proto = out.File
	file_yandex_cloud_priv_iam_v1_subject_service_proto_rawDesc = nil
	file_yandex_cloud_priv_iam_v1_subject_service_proto_goTypes = nil
	file_yandex_cloud_priv_iam_v1_subject_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SubjectServiceClient is the client API for SubjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubjectServiceClient interface {
	GetOrCreate(ctx context.Context, in *GetOrCreateSubjectRequest, opts ...grpc.CallOption) (*GetOrCreateSubjectResponse, error)
	Merge(ctx context.Context, in *MergeSubjectsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	Delete(ctx context.Context, in *DeleteSubjectRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Create new subjects or get existing.
	// Method creates non-existent subjects and returns ones that were already present.
	BulkGetOrCreate(ctx context.Context, in *BulkGetOrCreateSubjectsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Update subjects.
	// Method skips non-existent subjects and returns ones that were actually updated.
	BulkUpdate(ctx context.Context, in *BulkUpdateSubjectsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Create new subjects or update existing.
	BulkCreateOrUpdate(ctx context.Context, in *BulkCreateOrUpdateSubjectsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Delete subjects.
	// Method skips non-existent subjects and returns ones that were actually deleted.
	BulkDelete(ctx context.Context, in *BulkDeleteSubjectsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Merge subjects into one.
	// Method returns NOT_FOUND if any of the specified subjects does not exist.
	BulkMerge(ctx context.Context, in *BulkMergeSubjectsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type subjectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubjectServiceClient(cc grpc.ClientConnInterface) SubjectServiceClient {
	return &subjectServiceClient{cc}
}

func (c *subjectServiceClient) GetOrCreate(ctx context.Context, in *GetOrCreateSubjectRequest, opts ...grpc.CallOption) (*GetOrCreateSubjectResponse, error) {
	out := new(GetOrCreateSubjectResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.SubjectService/GetOrCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) Merge(ctx context.Context, in *MergeSubjectsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.SubjectService/Merge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) Delete(ctx context.Context, in *DeleteSubjectRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.SubjectService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) BulkGetOrCreate(ctx context.Context, in *BulkGetOrCreateSubjectsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.SubjectService/BulkGetOrCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) BulkUpdate(ctx context.Context, in *BulkUpdateSubjectsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.SubjectService/BulkUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) BulkCreateOrUpdate(ctx context.Context, in *BulkCreateOrUpdateSubjectsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.SubjectService/BulkCreateOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) BulkDelete(ctx context.Context, in *BulkDeleteSubjectsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.SubjectService/BulkDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) BulkMerge(ctx context.Context, in *BulkMergeSubjectsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.SubjectService/BulkMerge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubjectServiceServer is the server API for SubjectService service.
type SubjectServiceServer interface {
	GetOrCreate(context.Context, *GetOrCreateSubjectRequest) (*GetOrCreateSubjectResponse, error)
	Merge(context.Context, *MergeSubjectsRequest) (*operation.Operation, error)
	Delete(context.Context, *DeleteSubjectRequest) (*operation.Operation, error)
	// Create new subjects or get existing.
	// Method creates non-existent subjects and returns ones that were already present.
	BulkGetOrCreate(context.Context, *BulkGetOrCreateSubjectsRequest) (*operation.Operation, error)
	// Update subjects.
	// Method skips non-existent subjects and returns ones that were actually updated.
	BulkUpdate(context.Context, *BulkUpdateSubjectsRequest) (*operation.Operation, error)
	// Create new subjects or update existing.
	BulkCreateOrUpdate(context.Context, *BulkCreateOrUpdateSubjectsRequest) (*operation.Operation, error)
	// Delete subjects.
	// Method skips non-existent subjects and returns ones that were actually deleted.
	BulkDelete(context.Context, *BulkDeleteSubjectsRequest) (*operation.Operation, error)
	// Merge subjects into one.
	// Method returns NOT_FOUND if any of the specified subjects does not exist.
	BulkMerge(context.Context, *BulkMergeSubjectsRequest) (*operation.Operation, error)
}

// UnimplementedSubjectServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSubjectServiceServer struct {
}

func (*UnimplementedSubjectServiceServer) GetOrCreate(context.Context, *GetOrCreateSubjectRequest) (*GetOrCreateSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreate not implemented")
}
func (*UnimplementedSubjectServiceServer) Merge(context.Context, *MergeSubjectsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge not implemented")
}
func (*UnimplementedSubjectServiceServer) Delete(context.Context, *DeleteSubjectRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedSubjectServiceServer) BulkGetOrCreate(context.Context, *BulkGetOrCreateSubjectsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkGetOrCreate not implemented")
}
func (*UnimplementedSubjectServiceServer) BulkUpdate(context.Context, *BulkUpdateSubjectsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdate not implemented")
}
func (*UnimplementedSubjectServiceServer) BulkCreateOrUpdate(context.Context, *BulkCreateOrUpdateSubjectsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateOrUpdate not implemented")
}
func (*UnimplementedSubjectServiceServer) BulkDelete(context.Context, *BulkDeleteSubjectsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDelete not implemented")
}
func (*UnimplementedSubjectServiceServer) BulkMerge(context.Context, *BulkMergeSubjectsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkMerge not implemented")
}

func RegisterSubjectServiceServer(s *grpc.Server, srv SubjectServiceServer) {
	s.RegisterService(&_SubjectService_serviceDesc, srv)
}

func _SubjectService_GetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrCreateSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).GetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.SubjectService/GetOrCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).GetOrCreate(ctx, req.(*GetOrCreateSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.SubjectService/Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).Merge(ctx, req.(*MergeSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.SubjectService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).Delete(ctx, req.(*DeleteSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_BulkGetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkGetOrCreateSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).BulkGetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.SubjectService/BulkGetOrCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).BulkGetOrCreate(ctx, req.(*BulkGetOrCreateSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_BulkUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).BulkUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.SubjectService/BulkUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).BulkUpdate(ctx, req.(*BulkUpdateSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_BulkCreateOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateOrUpdateSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).BulkCreateOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.SubjectService/BulkCreateOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).BulkCreateOrUpdate(ctx, req.(*BulkCreateOrUpdateSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_BulkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDeleteSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).BulkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.SubjectService/BulkDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).BulkDelete(ctx, req.(*BulkDeleteSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_BulkMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkMergeSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).BulkMerge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.SubjectService/BulkMerge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).BulkMerge(ctx, req.(*BulkMergeSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.priv.iam.v1.SubjectService",
	HandlerType: (*SubjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrCreate",
			Handler:    _SubjectService_GetOrCreate_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _SubjectService_Merge_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SubjectService_Delete_Handler,
		},
		{
			MethodName: "BulkGetOrCreate",
			Handler:    _SubjectService_BulkGetOrCreate_Handler,
		},
		{
			MethodName: "BulkUpdate",
			Handler:    _SubjectService_BulkUpdate_Handler,
		},
		{
			MethodName: "BulkCreateOrUpdate",
			Handler:    _SubjectService_BulkCreateOrUpdate_Handler,
		},
		{
			MethodName: "BulkDelete",
			Handler:    _SubjectService_BulkDelete_Handler,
		},
		{
			MethodName: "BulkMerge",
			Handler:    _SubjectService_BulkMerge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/priv/iam/v1/subject_service.proto",
}
