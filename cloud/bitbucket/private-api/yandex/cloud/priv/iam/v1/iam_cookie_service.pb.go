// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.3
// source: yandex/cloud/priv/iam/v1/iam_cookie_service.proto

package iam

import (
	_ "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv"
	ts "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/iam/v1/ts"
	v1 "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/oauth/v1"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateIamCookieForSubjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId    string           `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	OauthRequest *v1.OAuthRequest `protobuf:"bytes,2,opt,name=oauth_request,json=oauthRequest,proto3" json:"oauth_request,omitempty"`
	// additional parameters for cross-domain authentication
	SessionId      string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RefreshTokenId string `protobuf:"bytes,4,opt,name=refresh_token_id,json=refreshTokenId,proto3" json:"refresh_token_id,omitempty"`
}

func (x *CreateIamCookieForSubjectRequest) Reset() {
	*x = CreateIamCookieForSubjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIamCookieForSubjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIamCookieForSubjectRequest) ProtoMessage() {}

func (x *CreateIamCookieForSubjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIamCookieForSubjectRequest.ProtoReflect.Descriptor instead.
func (*CreateIamCookieForSubjectRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateIamCookieForSubjectRequest) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *CreateIamCookieForSubjectRequest) GetOauthRequest() *v1.OAuthRequest {
	if x != nil {
		return x.OauthRequest
	}
	return nil
}

func (x *CreateIamCookieForSubjectRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateIamCookieForSubjectRequest) GetRefreshTokenId() string {
	if x != nil {
		return x.RefreshTokenId
	}
	return ""
}

type CreateIamCookieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identity:
	//
	//	*CreateIamCookieRequest_UserAccountId
	//	*CreateIamCookieRequest_YandexPassportCookies
	Identity     isCreateIamCookieRequest_Identity `protobuf_oneof:"identity"`
	OauthRequest *v1.OAuthRequest                  `protobuf:"bytes,10,opt,name=oauth_request,json=oauthRequest,proto3" json:"oauth_request,omitempty"`
	// additional parameters for cross-domain authentication
	SessionId string `protobuf:"bytes,11,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *CreateIamCookieRequest) Reset() {
	*x = CreateIamCookieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIamCookieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIamCookieRequest) ProtoMessage() {}

func (x *CreateIamCookieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIamCookieRequest.ProtoReflect.Descriptor instead.
func (*CreateIamCookieRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDescGZIP(), []int{1}
}

func (m *CreateIamCookieRequest) GetIdentity() isCreateIamCookieRequest_Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

// Deprecated: Marked as deprecated in yandex/cloud/priv/iam/v1/iam_cookie_service.proto.
func (x *CreateIamCookieRequest) GetUserAccountId() string {
	if x, ok := x.GetIdentity().(*CreateIamCookieRequest_UserAccountId); ok {
		return x.UserAccountId
	}
	return ""
}

func (x *CreateIamCookieRequest) GetYandexPassportCookies() *YandexPassportCookies {
	if x, ok := x.GetIdentity().(*CreateIamCookieRequest_YandexPassportCookies); ok {
		return x.YandexPassportCookies
	}
	return nil
}

func (x *CreateIamCookieRequest) GetOauthRequest() *v1.OAuthRequest {
	if x != nil {
		return x.OauthRequest
	}
	return nil
}

func (x *CreateIamCookieRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type isCreateIamCookieRequest_Identity interface {
	isCreateIamCookieRequest_Identity()
}

type CreateIamCookieRequest_UserAccountId struct {
	// Deprecated: Marked as deprecated in yandex/cloud/priv/iam/v1/iam_cookie_service.proto.
	UserAccountId string `protobuf:"bytes,1,opt,name=user_account_id,json=userAccountId,proto3,oneof"`
}

type CreateIamCookieRequest_YandexPassportCookies struct {
	YandexPassportCookies *YandexPassportCookies `protobuf:"bytes,2,opt,name=yandex_passport_cookies,json=yandexPassportCookies,proto3,oneof"`
}

func (*CreateIamCookieRequest_UserAccountId) isCreateIamCookieRequest_Identity() {}

func (*CreateIamCookieRequest_YandexPassportCookies) isCreateIamCookieRequest_Identity() {}

type RevokeCookieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IamCookie             string                 `protobuf:"bytes,1,opt,name=iam_cookie,json=iamCookie,proto3" json:"iam_cookie,omitempty"`
	YandexPassportCookies *YandexPassportCookies `protobuf:"bytes,2,opt,name=yandex_passport_cookies,json=yandexPassportCookies,proto3" json:"yandex_passport_cookies,omitempty"`
}

func (x *RevokeCookieRequest) Reset() {
	*x = RevokeCookieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeCookieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeCookieRequest) ProtoMessage() {}

func (x *RevokeCookieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeCookieRequest.ProtoReflect.Descriptor instead.
func (*RevokeCookieRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDescGZIP(), []int{2}
}

func (x *RevokeCookieRequest) GetIamCookie() string {
	if x != nil {
		return x.IamCookie
	}
	return ""
}

func (x *RevokeCookieRequest) GetYandexPassportCookies() *YandexPassportCookies {
	if x != nil {
		return x.YandexPassportCookies
	}
	return nil
}

type RevokeCookieResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject *ts.Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *RevokeCookieResponse) Reset() {
	*x = RevokeCookieResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeCookieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeCookieResponse) ProtoMessage() {}

func (x *RevokeCookieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeCookieResponse.ProtoReflect.Descriptor instead.
func (*RevokeCookieResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDescGZIP(), []int{3}
}

func (x *RevokeCookieResponse) GetSubject() *ts.Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

type CreateIamCookieResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IamCookie string                 `protobuf:"bytes,1,opt,name=iam_cookie,json=iamCookie,proto3" json:"iam_cookie,omitempty"`
	IssuedAt  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Subject   *ts.Subject            `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *CreateIamCookieResponse) Reset() {
	*x = CreateIamCookieResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIamCookieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIamCookieResponse) ProtoMessage() {}

func (x *CreateIamCookieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIamCookieResponse.ProtoReflect.Descriptor instead.
func (*CreateIamCookieResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateIamCookieResponse) GetIamCookie() string {
	if x != nil {
		return x.IamCookie
	}
	return ""
}

func (x *CreateIamCookieResponse) GetIssuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedAt
	}
	return nil
}

func (x *CreateIamCookieResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *CreateIamCookieResponse) GetSubject() *ts.Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

var File_yandex_cloud_priv_iam_v1_iam_cookie_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDesc = []byte{
	0x0a, 0x31, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x5f, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x18, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69,
	0x76, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x35, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x01, 0x0a, 0x20, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x46, 0x6f, 0x72,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x10, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xb1, 0x02,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x17, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x59, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x15, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0c, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42,
	0x10, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x04, 0x80, 0x83, 0x31,
	0x01, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x69, 0x61, 0x6d,
	0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8,
	0x89, 0x31, 0x01, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31, 0x05, 0x52, 0x09, 0x69, 0x61, 0x6d,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x59, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x52, 0x15, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x22,
	0x56, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x61, 0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x69, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xc8, 0x8f, 0x31, 0x01, 0xd0, 0x8f, 0x31,
	0x05, 0x52, 0x09, 0x69, 0x61, 0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x37, 0x0a, 0x09,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x12, 0x3e, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x32, 0xfb, 0x03, 0x0a, 0x10, 0x49, 0x61, 0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x61, 0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x61, 0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02,
	0x01, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x61, 0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12,
	0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x51,
	0x42, 0x04, 0x50, 0x49, 0x43, 0x53, 0x5a, 0x49, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x61,
	0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDescData = file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDesc
)

func file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDescData)
	})
	return file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDescData
}

var file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_goTypes = []interface{}{
	(*CreateIamCookieForSubjectRequest)(nil), // 0: yandex.cloud.priv.iam.v1.CreateIamCookieForSubjectRequest
	(*CreateIamCookieRequest)(nil),           // 1: yandex.cloud.priv.iam.v1.CreateIamCookieRequest
	(*RevokeCookieRequest)(nil),              // 2: yandex.cloud.priv.iam.v1.RevokeCookieRequest
	(*RevokeCookieResponse)(nil),             // 3: yandex.cloud.priv.iam.v1.RevokeCookieResponse
	(*CreateIamCookieResponse)(nil),          // 4: yandex.cloud.priv.iam.v1.CreateIamCookieResponse
	(*v1.OAuthRequest)(nil),                  // 5: yandex.cloud.priv.oauth.v1.OAuthRequest
	(*YandexPassportCookies)(nil),            // 6: yandex.cloud.priv.iam.v1.YandexPassportCookies
	(*ts.Subject)(nil),                       // 7: yandex.cloud.priv.iam.v1.ts.Subject
	(*timestamppb.Timestamp)(nil),            // 8: google.protobuf.Timestamp
}
var file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_depIdxs = []int32{
	5,  // 0: yandex.cloud.priv.iam.v1.CreateIamCookieForSubjectRequest.oauth_request:type_name -> yandex.cloud.priv.oauth.v1.OAuthRequest
	6,  // 1: yandex.cloud.priv.iam.v1.CreateIamCookieRequest.yandex_passport_cookies:type_name -> yandex.cloud.priv.iam.v1.YandexPassportCookies
	5,  // 2: yandex.cloud.priv.iam.v1.CreateIamCookieRequest.oauth_request:type_name -> yandex.cloud.priv.oauth.v1.OAuthRequest
	6,  // 3: yandex.cloud.priv.iam.v1.RevokeCookieRequest.yandex_passport_cookies:type_name -> yandex.cloud.priv.iam.v1.YandexPassportCookies
	7,  // 4: yandex.cloud.priv.iam.v1.RevokeCookieResponse.subject:type_name -> yandex.cloud.priv.iam.v1.ts.Subject
	8,  // 5: yandex.cloud.priv.iam.v1.CreateIamCookieResponse.issued_at:type_name -> google.protobuf.Timestamp
	8,  // 6: yandex.cloud.priv.iam.v1.CreateIamCookieResponse.expires_at:type_name -> google.protobuf.Timestamp
	7,  // 7: yandex.cloud.priv.iam.v1.CreateIamCookieResponse.subject:type_name -> yandex.cloud.priv.iam.v1.ts.Subject
	1,  // 8: yandex.cloud.priv.iam.v1.IamCookieService.Create:input_type -> yandex.cloud.priv.iam.v1.CreateIamCookieRequest
	0,  // 9: yandex.cloud.priv.iam.v1.IamCookieService.CreateForUserAccount:input_type -> yandex.cloud.priv.iam.v1.CreateIamCookieForSubjectRequest
	0,  // 10: yandex.cloud.priv.iam.v1.IamCookieService.CreateForSubject:input_type -> yandex.cloud.priv.iam.v1.CreateIamCookieForSubjectRequest
	2,  // 11: yandex.cloud.priv.iam.v1.IamCookieService.Revoke:input_type -> yandex.cloud.priv.iam.v1.RevokeCookieRequest
	4,  // 12: yandex.cloud.priv.iam.v1.IamCookieService.Create:output_type -> yandex.cloud.priv.iam.v1.CreateIamCookieResponse
	4,  // 13: yandex.cloud.priv.iam.v1.IamCookieService.CreateForUserAccount:output_type -> yandex.cloud.priv.iam.v1.CreateIamCookieResponse
	4,  // 14: yandex.cloud.priv.iam.v1.IamCookieService.CreateForSubject:output_type -> yandex.cloud.priv.iam.v1.CreateIamCookieResponse
	3,  // 15: yandex.cloud.priv.iam.v1.IamCookieService.Revoke:output_type -> yandex.cloud.priv.iam.v1.RevokeCookieResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_init() }
func file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_init() {
	if File_yandex_cloud_priv_iam_v1_iam_cookie_service_proto != nil {
		return
	}
	file_yandex_cloud_priv_iam_v1_yandex_passport_cookie_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIamCookieForSubjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIamCookieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeCookieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeCookieResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIamCookieResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CreateIamCookieRequest_UserAccountId)(nil),
		(*CreateIamCookieRequest_YandexPassportCookies)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_iam_v1_iam_cookie_service_proto = out.File
	file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_rawDesc = nil
	file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_goTypes = nil
	file_yandex_cloud_priv_iam_v1_iam_cookie_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IamCookieServiceClient is the client API for IamCookieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IamCookieServiceClient interface {
	Create(ctx context.Context, in *CreateIamCookieRequest, opts ...grpc.CallOption) (*CreateIamCookieResponse, error)
	// Deprecated: Do not use.
	CreateForUserAccount(ctx context.Context, in *CreateIamCookieForSubjectRequest, opts ...grpc.CallOption) (*CreateIamCookieResponse, error)
	CreateForSubject(ctx context.Context, in *CreateIamCookieForSubjectRequest, opts ...grpc.CallOption) (*CreateIamCookieResponse, error)
	Revoke(ctx context.Context, in *RevokeCookieRequest, opts ...grpc.CallOption) (*RevokeCookieResponse, error)
}

type iamCookieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIamCookieServiceClient(cc grpc.ClientConnInterface) IamCookieServiceClient {
	return &iamCookieServiceClient{cc}
}

func (c *iamCookieServiceClient) Create(ctx context.Context, in *CreateIamCookieRequest, opts ...grpc.CallOption) (*CreateIamCookieResponse, error) {
	out := new(CreateIamCookieResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.IamCookieService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *iamCookieServiceClient) CreateForUserAccount(ctx context.Context, in *CreateIamCookieForSubjectRequest, opts ...grpc.CallOption) (*CreateIamCookieResponse, error) {
	out := new(CreateIamCookieResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.IamCookieService/CreateForUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamCookieServiceClient) CreateForSubject(ctx context.Context, in *CreateIamCookieForSubjectRequest, opts ...grpc.CallOption) (*CreateIamCookieResponse, error) {
	out := new(CreateIamCookieResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.IamCookieService/CreateForSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamCookieServiceClient) Revoke(ctx context.Context, in *RevokeCookieRequest, opts ...grpc.CallOption) (*RevokeCookieResponse, error) {
	out := new(RevokeCookieResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.IamCookieService/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IamCookieServiceServer is the server API for IamCookieService service.
type IamCookieServiceServer interface {
	Create(context.Context, *CreateIamCookieRequest) (*CreateIamCookieResponse, error)
	// Deprecated: Do not use.
	CreateForUserAccount(context.Context, *CreateIamCookieForSubjectRequest) (*CreateIamCookieResponse, error)
	CreateForSubject(context.Context, *CreateIamCookieForSubjectRequest) (*CreateIamCookieResponse, error)
	Revoke(context.Context, *RevokeCookieRequest) (*RevokeCookieResponse, error)
}

// UnimplementedIamCookieServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIamCookieServiceServer struct {
}

func (*UnimplementedIamCookieServiceServer) Create(context.Context, *CreateIamCookieRequest) (*CreateIamCookieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedIamCookieServiceServer) CreateForUserAccount(context.Context, *CreateIamCookieForSubjectRequest) (*CreateIamCookieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForUserAccount not implemented")
}
func (*UnimplementedIamCookieServiceServer) CreateForSubject(context.Context, *CreateIamCookieForSubjectRequest) (*CreateIamCookieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForSubject not implemented")
}
func (*UnimplementedIamCookieServiceServer) Revoke(context.Context, *RevokeCookieRequest) (*RevokeCookieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}

func RegisterIamCookieServiceServer(s *grpc.Server, srv IamCookieServiceServer) {
	s.RegisterService(&_IamCookieService_serviceDesc, srv)
}

func _IamCookieService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIamCookieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamCookieServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.IamCookieService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamCookieServiceServer).Create(ctx, req.(*CreateIamCookieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamCookieService_CreateForUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIamCookieForSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamCookieServiceServer).CreateForUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.IamCookieService/CreateForUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamCookieServiceServer).CreateForUserAccount(ctx, req.(*CreateIamCookieForSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamCookieService_CreateForSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIamCookieForSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamCookieServiceServer).CreateForSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.IamCookieService/CreateForSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamCookieServiceServer).CreateForSubject(ctx, req.(*CreateIamCookieForSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IamCookieService_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCookieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamCookieServiceServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.IamCookieService/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamCookieServiceServer).Revoke(ctx, req.(*RevokeCookieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IamCookieService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.priv.iam.v1.IamCookieService",
	HandlerType: (*IamCookieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IamCookieService_Create_Handler,
		},
		{
			MethodName: "CreateForUserAccount",
			Handler:    _IamCookieService_CreateForUserAccount_Handler,
		},
		{
			MethodName: "CreateForSubject",
			Handler:    _IamCookieService_CreateForSubject_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _IamCookieService_Revoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/priv/iam/v1/iam_cookie_service.proto",
}
