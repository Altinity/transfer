// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.3
// source: yandex/cloud/priv/iam/v1/quota_limit_service.proto

package iam

import (
	_ "github.com/doublecloud/tross/cloud/bitbucket/common-api/yandex/cloud/api"
	operation "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/operation"
	quota "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/quota"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_yandex_cloud_priv_iam_v1_quota_limit_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_iam_v1_quota_limit_service_proto_rawDesc = []byte{
	0x0a, 0x32, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x20,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xe1, 0x04, 0x0a, 0x11, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0xa8, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0xb2, 0xd2, 0x2a, 0x40, 0x0a, 0x1e, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x0b, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0xb2, 0xd2, 0x2a, 0x4c,
	0x0a, 0x24, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x51, 0x42, 0x04,
	0x50, 0x51, 0x4c, 0x53, 0x5a, 0x49, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x74,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x61, 0x6d, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_yandex_cloud_priv_iam_v1_quota_limit_service_proto_goTypes = []interface{}{
	(*quota.GetQuotaLimitRequest)(nil),          // 0: yandex.cloud.priv.quota.GetQuotaLimitRequest
	(*quota.GetDefaultQuotaLimitRequest)(nil),   // 1: yandex.cloud.priv.quota.GetDefaultQuotaLimitRequest
	(*quota.UpdateQuotaLimitRequest)(nil),       // 2: yandex.cloud.priv.quota.UpdateQuotaLimitRequest
	(*quota.BatchUpdateQuotaLimitsRequest)(nil), // 3: yandex.cloud.priv.quota.BatchUpdateQuotaLimitsRequest
	(*quota.GetQuotaLimitResponse)(nil),         // 4: yandex.cloud.priv.quota.GetQuotaLimitResponse
	(*quota.GetDefaultQuotaLimitResponse)(nil),  // 5: yandex.cloud.priv.quota.GetDefaultQuotaLimitResponse
	(*operation.Operation)(nil),                 // 6: yandex.cloud.priv.operation.Operation
}
var file_yandex_cloud_priv_iam_v1_quota_limit_service_proto_depIdxs = []int32{
	0, // 0: yandex.cloud.priv.iam.v1.QuotaLimitService.Get:input_type -> yandex.cloud.priv.quota.GetQuotaLimitRequest
	1, // 1: yandex.cloud.priv.iam.v1.QuotaLimitService.GetDefault:input_type -> yandex.cloud.priv.quota.GetDefaultQuotaLimitRequest
	2, // 2: yandex.cloud.priv.iam.v1.QuotaLimitService.Update:input_type -> yandex.cloud.priv.quota.UpdateQuotaLimitRequest
	3, // 3: yandex.cloud.priv.iam.v1.QuotaLimitService.BatchUpdate:input_type -> yandex.cloud.priv.quota.BatchUpdateQuotaLimitsRequest
	4, // 4: yandex.cloud.priv.iam.v1.QuotaLimitService.Get:output_type -> yandex.cloud.priv.quota.GetQuotaLimitResponse
	5, // 5: yandex.cloud.priv.iam.v1.QuotaLimitService.GetDefault:output_type -> yandex.cloud.priv.quota.GetDefaultQuotaLimitResponse
	6, // 6: yandex.cloud.priv.iam.v1.QuotaLimitService.Update:output_type -> yandex.cloud.priv.operation.Operation
	6, // 7: yandex.cloud.priv.iam.v1.QuotaLimitService.BatchUpdate:output_type -> yandex.cloud.priv.operation.Operation
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_iam_v1_quota_limit_service_proto_init() }
func file_yandex_cloud_priv_iam_v1_quota_limit_service_proto_init() {
	if File_yandex_cloud_priv_iam_v1_quota_limit_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_iam_v1_quota_limit_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_priv_iam_v1_quota_limit_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_iam_v1_quota_limit_service_proto_depIdxs,
	}.Build()
	File_yandex_cloud_priv_iam_v1_quota_limit_service_proto = out.File
	file_yandex_cloud_priv_iam_v1_quota_limit_service_proto_rawDesc = nil
	file_yandex_cloud_priv_iam_v1_quota_limit_service_proto_goTypes = nil
	file_yandex_cloud_priv_iam_v1_quota_limit_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QuotaLimitServiceClient is the client API for QuotaLimitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QuotaLimitServiceClient interface {
	Get(ctx context.Context, in *quota.GetQuotaLimitRequest, opts ...grpc.CallOption) (*quota.GetQuotaLimitResponse, error)
	GetDefault(ctx context.Context, in *quota.GetDefaultQuotaLimitRequest, opts ...grpc.CallOption) (*quota.GetDefaultQuotaLimitResponse, error)
	Update(ctx context.Context, in *quota.UpdateQuotaLimitRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	BatchUpdate(ctx context.Context, in *quota.BatchUpdateQuotaLimitsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type quotaLimitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaLimitServiceClient(cc grpc.ClientConnInterface) QuotaLimitServiceClient {
	return &quotaLimitServiceClient{cc}
}

func (c *quotaLimitServiceClient) Get(ctx context.Context, in *quota.GetQuotaLimitRequest, opts ...grpc.CallOption) (*quota.GetQuotaLimitResponse, error) {
	out := new(quota.GetQuotaLimitResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.QuotaLimitService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaLimitServiceClient) GetDefault(ctx context.Context, in *quota.GetDefaultQuotaLimitRequest, opts ...grpc.CallOption) (*quota.GetDefaultQuotaLimitResponse, error) {
	out := new(quota.GetDefaultQuotaLimitResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.QuotaLimitService/GetDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaLimitServiceClient) Update(ctx context.Context, in *quota.UpdateQuotaLimitRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.QuotaLimitService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaLimitServiceClient) BatchUpdate(ctx context.Context, in *quota.BatchUpdateQuotaLimitsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.QuotaLimitService/BatchUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaLimitServiceServer is the server API for QuotaLimitService service.
type QuotaLimitServiceServer interface {
	Get(context.Context, *quota.GetQuotaLimitRequest) (*quota.GetQuotaLimitResponse, error)
	GetDefault(context.Context, *quota.GetDefaultQuotaLimitRequest) (*quota.GetDefaultQuotaLimitResponse, error)
	Update(context.Context, *quota.UpdateQuotaLimitRequest) (*operation.Operation, error)
	BatchUpdate(context.Context, *quota.BatchUpdateQuotaLimitsRequest) (*operation.Operation, error)
}

// UnimplementedQuotaLimitServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQuotaLimitServiceServer struct {
}

func (*UnimplementedQuotaLimitServiceServer) Get(context.Context, *quota.GetQuotaLimitRequest) (*quota.GetQuotaLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedQuotaLimitServiceServer) GetDefault(context.Context, *quota.GetDefaultQuotaLimitRequest) (*quota.GetDefaultQuotaLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefault not implemented")
}
func (*UnimplementedQuotaLimitServiceServer) Update(context.Context, *quota.UpdateQuotaLimitRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedQuotaLimitServiceServer) BatchUpdate(context.Context, *quota.BatchUpdateQuotaLimitsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdate not implemented")
}

func RegisterQuotaLimitServiceServer(s *grpc.Server, srv QuotaLimitServiceServer) {
	s.RegisterService(&_QuotaLimitService_serviceDesc, srv)
}

func _QuotaLimitService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(quota.GetQuotaLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaLimitServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.QuotaLimitService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaLimitServiceServer).Get(ctx, req.(*quota.GetQuotaLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaLimitService_GetDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(quota.GetDefaultQuotaLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaLimitServiceServer).GetDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.QuotaLimitService/GetDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaLimitServiceServer).GetDefault(ctx, req.(*quota.GetDefaultQuotaLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaLimitService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(quota.UpdateQuotaLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaLimitServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.QuotaLimitService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaLimitServiceServer).Update(ctx, req.(*quota.UpdateQuotaLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaLimitService_BatchUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(quota.BatchUpdateQuotaLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaLimitServiceServer).BatchUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.QuotaLimitService/BatchUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaLimitServiceServer).BatchUpdate(ctx, req.(*quota.BatchUpdateQuotaLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuotaLimitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.priv.iam.v1.QuotaLimitService",
	HandlerType: (*QuotaLimitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _QuotaLimitService_Get_Handler,
		},
		{
			MethodName: "GetDefault",
			Handler:    _QuotaLimitService_GetDefault_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _QuotaLimitService_Update_Handler,
		},
		{
			MethodName: "BatchUpdate",
			Handler:    _QuotaLimitService_BatchUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/priv/iam/v1/quota_limit_service.proto",
}
