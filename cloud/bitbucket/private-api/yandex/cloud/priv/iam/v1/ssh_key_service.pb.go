// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.3
// source: yandex/cloud/priv/iam/v1/ssh_key_service.proto

package iam

import (
	_ "github.com/doublecloud/tross/cloud/bitbucket/common-api/yandex/cloud/api"
	_ "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv"
	operation "github.com/doublecloud/tross/cloud/bitbucket/private-api/yandex/cloud/priv/operation"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSshKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshKeyId string `protobuf:"bytes,1,opt,name=ssh_key_id,json=sshKeyId,proto3" json:"ssh_key_id,omitempty"`
}

func (x *GetSshKeyRequest) Reset() {
	*x = GetSshKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSshKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSshKeyRequest) ProtoMessage() {}

func (x *GetSshKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSshKeyRequest.ProtoReflect.Descriptor instead.
func (*GetSshKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetSshKeyRequest) GetSshKeyId() string {
	if x != nil {
		return x.SshKeyId
	}
	return ""
}

type ListSshKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Subject:
	//
	//	*ListSshKeysRequest_ServiceAccountId
	//	*ListSshKeysRequest_UserAccountId
	//	*ListSshKeysRequest_FederatedUserId
	Subject   isListSshKeysRequest_Subject `protobuf_oneof:"subject"`
	PageSize  int64                        `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string                       `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSshKeysRequest) Reset() {
	*x = ListSshKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSshKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSshKeysRequest) ProtoMessage() {}

func (x *ListSshKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSshKeysRequest.ProtoReflect.Descriptor instead.
func (*ListSshKeysRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescGZIP(), []int{1}
}

func (m *ListSshKeysRequest) GetSubject() isListSshKeysRequest_Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (x *ListSshKeysRequest) GetServiceAccountId() string {
	if x, ok := x.GetSubject().(*ListSshKeysRequest_ServiceAccountId); ok {
		return x.ServiceAccountId
	}
	return ""
}

func (x *ListSshKeysRequest) GetUserAccountId() string {
	if x, ok := x.GetSubject().(*ListSshKeysRequest_UserAccountId); ok {
		return x.UserAccountId
	}
	return ""
}

func (x *ListSshKeysRequest) GetFederatedUserId() string {
	if x, ok := x.GetSubject().(*ListSshKeysRequest_FederatedUserId); ok {
		return x.FederatedUserId
	}
	return ""
}

func (x *ListSshKeysRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSshKeysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type isListSshKeysRequest_Subject interface {
	isListSshKeysRequest_Subject()
}

type ListSshKeysRequest_ServiceAccountId struct {
	ServiceAccountId string `protobuf:"bytes,1,opt,name=service_account_id,json=serviceAccountId,proto3,oneof"`
}

type ListSshKeysRequest_UserAccountId struct {
	UserAccountId string `protobuf:"bytes,2,opt,name=user_account_id,json=userAccountId,proto3,oneof"`
}

type ListSshKeysRequest_FederatedUserId struct {
	FederatedUserId string `protobuf:"bytes,3,opt,name=federated_user_id,json=federatedUserId,proto3,oneof"`
}

func (*ListSshKeysRequest_ServiceAccountId) isListSshKeysRequest_Subject() {}

func (*ListSshKeysRequest_UserAccountId) isListSshKeysRequest_Subject() {}

func (*ListSshKeysRequest_FederatedUserId) isListSshKeysRequest_Subject() {}

type ListSshKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshKeys       []*SshKey `protobuf:"bytes,1,rep,name=ssh_keys,json=sshKeys,proto3" json:"ssh_keys,omitempty"`
	NextPageToken string    `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSshKeysResponse) Reset() {
	*x = ListSshKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSshKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSshKeysResponse) ProtoMessage() {}

func (x *ListSshKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSshKeysResponse.ProtoReflect.Descriptor instead.
func (*ListSshKeysResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListSshKeysResponse) GetSshKeys() []*SshKey {
	if x != nil {
		return x.SshKeys
	}
	return nil
}

func (x *ListSshKeysResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateSshKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshKeyId string `protobuf:"bytes,1,opt,name=ssh_key_id,json=sshKeyId,proto3" json:"ssh_key_id,omitempty"`
	// Types that are assignable to Subject:
	//
	//	*CreateSshKeyRequest_ServiceAccountId
	//	*CreateSshKeyRequest_UserAccountId
	//	*CreateSshKeyRequest_FederatedUserId
	Subject    isCreateSshKeyRequest_Subject `protobuf_oneof:"subject"`
	SshKeyData string                        `protobuf:"bytes,5,opt,name=ssh_key_data,json=sshKeyData,proto3" json:"ssh_key_data,omitempty"`
}

func (x *CreateSshKeyRequest) Reset() {
	*x = CreateSshKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSshKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSshKeyRequest) ProtoMessage() {}

func (x *CreateSshKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSshKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateSshKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSshKeyRequest) GetSshKeyId() string {
	if x != nil {
		return x.SshKeyId
	}
	return ""
}

func (m *CreateSshKeyRequest) GetSubject() isCreateSshKeyRequest_Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (x *CreateSshKeyRequest) GetServiceAccountId() string {
	if x, ok := x.GetSubject().(*CreateSshKeyRequest_ServiceAccountId); ok {
		return x.ServiceAccountId
	}
	return ""
}

func (x *CreateSshKeyRequest) GetUserAccountId() string {
	if x, ok := x.GetSubject().(*CreateSshKeyRequest_UserAccountId); ok {
		return x.UserAccountId
	}
	return ""
}

func (x *CreateSshKeyRequest) GetFederatedUserId() string {
	if x, ok := x.GetSubject().(*CreateSshKeyRequest_FederatedUserId); ok {
		return x.FederatedUserId
	}
	return ""
}

func (x *CreateSshKeyRequest) GetSshKeyData() string {
	if x != nil {
		return x.SshKeyData
	}
	return ""
}

type isCreateSshKeyRequest_Subject interface {
	isCreateSshKeyRequest_Subject()
}

type CreateSshKeyRequest_ServiceAccountId struct {
	ServiceAccountId string `protobuf:"bytes,2,opt,name=service_account_id,json=serviceAccountId,proto3,oneof"`
}

type CreateSshKeyRequest_UserAccountId struct {
	UserAccountId string `protobuf:"bytes,3,opt,name=user_account_id,json=userAccountId,proto3,oneof"`
}

type CreateSshKeyRequest_FederatedUserId struct {
	FederatedUserId string `protobuf:"bytes,4,opt,name=federated_user_id,json=federatedUserId,proto3,oneof"`
}

func (*CreateSshKeyRequest_ServiceAccountId) isCreateSshKeyRequest_Subject() {}

func (*CreateSshKeyRequest_UserAccountId) isCreateSshKeyRequest_Subject() {}

func (*CreateSshKeyRequest_FederatedUserId) isCreateSshKeyRequest_Subject() {}

type CreateSshKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshKeyId  string `protobuf:"bytes,1,opt,name=ssh_key_id,json=sshKeyId,proto3" json:"ssh_key_id,omitempty"`
	SubjectId string `protobuf:"bytes,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
}

func (x *CreateSshKeyMetadata) Reset() {
	*x = CreateSshKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSshKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSshKeyMetadata) ProtoMessage() {}

func (x *CreateSshKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSshKeyMetadata.ProtoReflect.Descriptor instead.
func (*CreateSshKeyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSshKeyMetadata) GetSshKeyId() string {
	if x != nil {
		return x.SshKeyId
	}
	return ""
}

func (x *CreateSshKeyMetadata) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

type DeleteSshKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshKeyId string `protobuf:"bytes,1,opt,name=ssh_key_id,json=sshKeyId,proto3" json:"ssh_key_id,omitempty"`
}

func (x *DeleteSshKeyRequest) Reset() {
	*x = DeleteSshKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSshKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSshKeyRequest) ProtoMessage() {}

func (x *DeleteSshKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSshKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteSshKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteSshKeyRequest) GetSshKeyId() string {
	if x != nil {
		return x.SshKeyId
	}
	return ""
}

type DeleteSshKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshKeyId string `protobuf:"bytes,1,opt,name=ssh_key_id,json=sshKeyId,proto3" json:"ssh_key_id,omitempty"`
}

func (x *DeleteSshKeyMetadata) Reset() {
	*x = DeleteSshKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSshKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSshKeyMetadata) ProtoMessage() {}

func (x *DeleteSshKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSshKeyMetadata.ProtoReflect.Descriptor instead.
func (*DeleteSshKeyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteSshKeyMetadata) GetSshKeyId() string {
	if x != nil {
		return x.SshKeyId
	}
	return ""
}

type ListSshKeyOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshKeyId  string `protobuf:"bytes,1,opt,name=ssh_key_id,json=sshKeyId,proto3" json:"ssh_key_id,omitempty"`
	PageSize  int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSshKeyOperationsRequest) Reset() {
	*x = ListSshKeyOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSshKeyOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSshKeyOperationsRequest) ProtoMessage() {}

func (x *ListSshKeyOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSshKeyOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListSshKeyOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListSshKeyOperationsRequest) GetSshKeyId() string {
	if x != nil {
		return x.SshKeyId
	}
	return ""
}

func (x *ListSshKeyOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSshKeyOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSshKeyOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations    []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSshKeyOperationsResponse) Reset() {
	*x = ListSshKeyOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSshKeyOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSshKeyOperationsResponse) ProtoMessage() {}

func (x *ListSshKeyOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSshKeyOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListSshKeyOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListSshKeyOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListSshKeyOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_yandex_cloud_priv_iam_v1_ssh_key_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x73, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x18, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f,
	0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x72, 0x69, 0x76, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x73, 0x68, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x73, 0x73, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8,
	0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x73, 0x73, 0x68,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xfb, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x73,
	0x68, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xba, 0x89, 0x31, 0x06, 0x30, 0x2d, 0x31,
	0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xca, 0x89, 0x31, 0x06, 0x3c, 0x3d, 0x32, 0x30, 0x30, 0x30, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x7a, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x73, 0x68, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x73,
	0x68, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x07,
	0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x83, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x89, 0x31,
	0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x73, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xa8,
	0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x07, 0x3c, 0x3d, 0x32, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0a,
	0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x53, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x73, 0x68, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x0a, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31, 0x04, 0x3c,
	0x3d, 0x35, 0x30, 0x52, 0x08, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x34, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x73, 0x68, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x73, 0x68, 0x4b,
	0x65, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa8, 0x89, 0x31, 0x01, 0xca, 0x89, 0x31,
	0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0a, 0xba, 0x89, 0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0x89,
	0x31, 0x06, 0x3c, 0x3d, 0x32, 0x30, 0x30, 0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x73, 0x68, 0x4b,
	0x65, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xe5, 0x04, 0x0a, 0x0d, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2a, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x73, 0x68, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x63, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x83, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x73, 0x68,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x22, 0xb2, 0xd2, 0x2a, 0x1e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x06,
	0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x92, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0xb2, 0xd2, 0x2a, 0x2d, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7f, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x73, 0x68,
	0x4b, 0x65, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x51, 0x42, 0x04,
	0x50, 0x53, 0x4b, 0x53, 0x5a, 0x49, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x74,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x72, 0x69, 0x76, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x61, 0x6d, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescData = file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDesc
)

func file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescData)
	})
	return file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDescData
}

var file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_goTypes = []interface{}{
	(*GetSshKeyRequest)(nil),             // 0: yandex.cloud.priv.iam.v1.GetSshKeyRequest
	(*ListSshKeysRequest)(nil),           // 1: yandex.cloud.priv.iam.v1.ListSshKeysRequest
	(*ListSshKeysResponse)(nil),          // 2: yandex.cloud.priv.iam.v1.ListSshKeysResponse
	(*CreateSshKeyRequest)(nil),          // 3: yandex.cloud.priv.iam.v1.CreateSshKeyRequest
	(*CreateSshKeyMetadata)(nil),         // 4: yandex.cloud.priv.iam.v1.CreateSshKeyMetadata
	(*DeleteSshKeyRequest)(nil),          // 5: yandex.cloud.priv.iam.v1.DeleteSshKeyRequest
	(*DeleteSshKeyMetadata)(nil),         // 6: yandex.cloud.priv.iam.v1.DeleteSshKeyMetadata
	(*ListSshKeyOperationsRequest)(nil),  // 7: yandex.cloud.priv.iam.v1.ListSshKeyOperationsRequest
	(*ListSshKeyOperationsResponse)(nil), // 8: yandex.cloud.priv.iam.v1.ListSshKeyOperationsResponse
	(*SshKey)(nil),                       // 9: yandex.cloud.priv.iam.v1.SshKey
	(*operation.Operation)(nil),          // 10: yandex.cloud.priv.operation.Operation
}
var file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_depIdxs = []int32{
	9,  // 0: yandex.cloud.priv.iam.v1.ListSshKeysResponse.ssh_keys:type_name -> yandex.cloud.priv.iam.v1.SshKey
	10, // 1: yandex.cloud.priv.iam.v1.ListSshKeyOperationsResponse.operations:type_name -> yandex.cloud.priv.operation.Operation
	0,  // 2: yandex.cloud.priv.iam.v1.SshKeyService.Get:input_type -> yandex.cloud.priv.iam.v1.GetSshKeyRequest
	1,  // 3: yandex.cloud.priv.iam.v1.SshKeyService.List:input_type -> yandex.cloud.priv.iam.v1.ListSshKeysRequest
	3,  // 4: yandex.cloud.priv.iam.v1.SshKeyService.Create:input_type -> yandex.cloud.priv.iam.v1.CreateSshKeyRequest
	5,  // 5: yandex.cloud.priv.iam.v1.SshKeyService.Delete:input_type -> yandex.cloud.priv.iam.v1.DeleteSshKeyRequest
	7,  // 6: yandex.cloud.priv.iam.v1.SshKeyService.ListOperations:input_type -> yandex.cloud.priv.iam.v1.ListSshKeyOperationsRequest
	9,  // 7: yandex.cloud.priv.iam.v1.SshKeyService.Get:output_type -> yandex.cloud.priv.iam.v1.SshKey
	2,  // 8: yandex.cloud.priv.iam.v1.SshKeyService.List:output_type -> yandex.cloud.priv.iam.v1.ListSshKeysResponse
	10, // 9: yandex.cloud.priv.iam.v1.SshKeyService.Create:output_type -> yandex.cloud.priv.operation.Operation
	10, // 10: yandex.cloud.priv.iam.v1.SshKeyService.Delete:output_type -> yandex.cloud.priv.operation.Operation
	8,  // 11: yandex.cloud.priv.iam.v1.SshKeyService.ListOperations:output_type -> yandex.cloud.priv.iam.v1.ListSshKeyOperationsResponse
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_init() }
func file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_init() {
	if File_yandex_cloud_priv_iam_v1_ssh_key_service_proto != nil {
		return
	}
	file_yandex_cloud_priv_iam_v1_ssh_key_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSshKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSshKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSshKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSshKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSshKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSshKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSshKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSshKeyOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSshKeyOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ListSshKeysRequest_ServiceAccountId)(nil),
		(*ListSshKeysRequest_UserAccountId)(nil),
		(*ListSshKeysRequest_FederatedUserId)(nil),
	}
	file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CreateSshKeyRequest_ServiceAccountId)(nil),
		(*CreateSshKeyRequest_UserAccountId)(nil),
		(*CreateSshKeyRequest_FederatedUserId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_iam_v1_ssh_key_service_proto = out.File
	file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_rawDesc = nil
	file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_goTypes = nil
	file_yandex_cloud_priv_iam_v1_ssh_key_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SshKeyServiceClient is the client API for SshKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SshKeyServiceClient interface {
	Get(ctx context.Context, in *GetSshKeyRequest, opts ...grpc.CallOption) (*SshKey, error)
	List(ctx context.Context, in *ListSshKeysRequest, opts ...grpc.CallOption) (*ListSshKeysResponse, error)
	Create(ctx context.Context, in *CreateSshKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	Delete(ctx context.Context, in *DeleteSshKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	ListOperations(ctx context.Context, in *ListSshKeyOperationsRequest, opts ...grpc.CallOption) (*ListSshKeyOperationsResponse, error)
}

type sshKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSshKeyServiceClient(cc grpc.ClientConnInterface) SshKeyServiceClient {
	return &sshKeyServiceClient{cc}
}

func (c *sshKeyServiceClient) Get(ctx context.Context, in *GetSshKeyRequest, opts ...grpc.CallOption) (*SshKey, error) {
	out := new(SshKey)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.SshKeyService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sshKeyServiceClient) List(ctx context.Context, in *ListSshKeysRequest, opts ...grpc.CallOption) (*ListSshKeysResponse, error) {
	out := new(ListSshKeysResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.SshKeyService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sshKeyServiceClient) Create(ctx context.Context, in *CreateSshKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.SshKeyService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sshKeyServiceClient) Delete(ctx context.Context, in *DeleteSshKeyRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.SshKeyService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sshKeyServiceClient) ListOperations(ctx context.Context, in *ListSshKeyOperationsRequest, opts ...grpc.CallOption) (*ListSshKeyOperationsResponse, error) {
	out := new(ListSshKeyOperationsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.priv.iam.v1.SshKeyService/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SshKeyServiceServer is the server API for SshKeyService service.
type SshKeyServiceServer interface {
	Get(context.Context, *GetSshKeyRequest) (*SshKey, error)
	List(context.Context, *ListSshKeysRequest) (*ListSshKeysResponse, error)
	Create(context.Context, *CreateSshKeyRequest) (*operation.Operation, error)
	Delete(context.Context, *DeleteSshKeyRequest) (*operation.Operation, error)
	ListOperations(context.Context, *ListSshKeyOperationsRequest) (*ListSshKeyOperationsResponse, error)
}

// UnimplementedSshKeyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSshKeyServiceServer struct {
}

func (*UnimplementedSshKeyServiceServer) Get(context.Context, *GetSshKeyRequest) (*SshKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedSshKeyServiceServer) List(context.Context, *ListSshKeysRequest) (*ListSshKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedSshKeyServiceServer) Create(context.Context, *CreateSshKeyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedSshKeyServiceServer) Delete(context.Context, *DeleteSshKeyRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedSshKeyServiceServer) ListOperations(context.Context, *ListSshKeyOperationsRequest) (*ListSshKeyOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}

func RegisterSshKeyServiceServer(s *grpc.Server, srv SshKeyServiceServer) {
	s.RegisterService(&_SshKeyService_serviceDesc, srv)
}

func _SshKeyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSshKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshKeyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.SshKeyService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshKeyServiceServer).Get(ctx, req.(*GetSshKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SshKeyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSshKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshKeyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.SshKeyService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshKeyServiceServer).List(ctx, req.(*ListSshKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SshKeyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSshKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshKeyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.SshKeyService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshKeyServiceServer).Create(ctx, req.(*CreateSshKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SshKeyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSshKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshKeyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.SshKeyService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshKeyServiceServer).Delete(ctx, req.(*DeleteSshKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SshKeyService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSshKeyOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshKeyServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.priv.iam.v1.SshKeyService/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshKeyServiceServer).ListOperations(ctx, req.(*ListSshKeyOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SshKeyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.priv.iam.v1.SshKeyService",
	HandlerType: (*SshKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SshKeyService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SshKeyService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SshKeyService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SshKeyService_Delete_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _SshKeyService_ListOperations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/priv/iam/v1/ssh_key_service.proto",
}
