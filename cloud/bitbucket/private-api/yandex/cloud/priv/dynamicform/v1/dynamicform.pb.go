// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.3
// source: yandex/cloud/priv/dynamicform/v1/dynamicform.proto

package dynamicform

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Form field value type
type ItemType int32

const (
	ItemType_ITEM_TYPE_UNSPECIFIED ItemType = 0
	// Object (proto message)
	ItemType_OBJECT ItemType = 1
	// Array, enum and drop-down (repeted proto filed or drop-down menu)
	ItemType_ARRAY ItemType = 2
	// Boolean value - checkbox
	ItemType_BOOLEAN ItemType = 3
	// Integer or float-point numer
	ItemType_NUMBER ItemType = 4
	// String value
	ItemType_STRING ItemType = 5
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0: "ITEM_TYPE_UNSPECIFIED",
		1: "OBJECT",
		2: "ARRAY",
		3: "BOOLEAN",
		4: "NUMBER",
		5: "STRING",
	}
	ItemType_value = map[string]int32{
		"ITEM_TYPE_UNSPECIFIED": 0,
		"OBJECT":                1,
		"ARRAY":                 2,
		"BOOLEAN":               3,
		"NUMBER":                4,
		"STRING":                5,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[0].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[0]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{0}
}

// Resource link type
type LinkType int32

const (
	LinkType_LINK_TYPE_UNSPECIFIED LinkType = 0
	// Link to not cloud resource
	LinkType_EXTERNAL LinkType = 1
	// Link to managed MySQL
	LinkType_MYSQL LinkType = 2
	// Link to managed PostgreSQL
	LinkType_POSTGRES LinkType = 3
	// Link to managed ClickHouse
	LinkType_CLICKHOUSE LinkType = 4
	// Link to managed Mongo
	LinkType_MONGO LinkType = 5
	// Link to managed Kafka
	LinkType_KAFKA LinkType = 6
	// Link to managed Greenplum
	LinkType_GREENPLUM LinkType = 7
	// Link to managed ElasticSearch
	LinkType_ELASTICSEARCH LinkType = 8
	// Link to managed OpenSearch
	LinkType_OPENSEARCH LinkType = 9
)

// Enum value maps for LinkType.
var (
	LinkType_name = map[int32]string{
		0: "LINK_TYPE_UNSPECIFIED",
		1: "EXTERNAL",
		2: "MYSQL",
		3: "POSTGRES",
		4: "CLICKHOUSE",
		5: "MONGO",
		6: "KAFKA",
		7: "GREENPLUM",
		8: "ELASTICSEARCH",
		9: "OPENSEARCH",
	}
	LinkType_value = map[string]int32{
		"LINK_TYPE_UNSPECIFIED": 0,
		"EXTERNAL":              1,
		"MYSQL":                 2,
		"POSTGRES":              3,
		"CLICKHOUSE":            4,
		"MONGO":                 5,
		"KAFKA":                 6,
		"GREENPLUM":             7,
		"ELASTICSEARCH":         8,
		"OPENSEARCH":            9,
	}
)

func (x LinkType) Enum() *LinkType {
	p := new(LinkType)
	*p = x
	return p
}

func (x LinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[1].Descriptor()
}

func (LinkType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[1]
}

func (x LinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkType.Descriptor instead.
func (LinkType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{1}
}

// Form item layout (specifies how frontend draw item)
type ViewSpecLayout int32

const (
	// Empty layout, don't used
	ViewSpecLayout_VIEW_SPEC_LAYOUT_UNSPECIFIED ViewSpecLayout = 0
	// Default, title and control drawn in a row
	ViewSpecLayout_ROW ViewSpecLayout = 1
	// Draws only control, without title
	ViewSpecLayout_TABLE_ITEM ViewSpecLayout = 4
	// Object-only, draws nested object field like parent object fields
	ViewSpecLayout_TRANSPARENT ViewSpecLayout = 5
	// For object or array, draws panel with offset, can be opened/closed
	ViewSpecLayout_ACCORDEON ViewSpecLayout = 2
	// For object or array, draws panel with title
	ViewSpecLayout_SECTION ViewSpecLayout = 3
	// For object or array, draws panel with smaller title
	ViewSpecLayout_SECTION2 ViewSpecLayout = 6
	// For object or array, draws panel with offset, with title
	ViewSpecLayout_GROUP ViewSpecLayout = 7
	// For object or array, draws panel with offset, with smaller title
	ViewSpecLayout_GROUP2 ViewSpecLayout = 8
	// For object or array, draws panel with title in a box with offset
	ViewSpecLayout_CARD_SECTION ViewSpecLayout = 9
	// For object or array, draws panel in a box with offset, can be opened/closed
	ViewSpecLayout_CARD_ACCORDEON ViewSpecLayout = 10
	// Title and control drawn in a row, description is drawn under control
	ViewSpecLayout_ROW_VERBOSE ViewSpecLayout = 11
)

// Enum value maps for ViewSpecLayout.
var (
	ViewSpecLayout_name = map[int32]string{
		0:  "VIEW_SPEC_LAYOUT_UNSPECIFIED",
		1:  "ROW",
		4:  "TABLE_ITEM",
		5:  "TRANSPARENT",
		2:  "ACCORDEON",
		3:  "SECTION",
		6:  "SECTION2",
		7:  "GROUP",
		8:  "GROUP2",
		9:  "CARD_SECTION",
		10: "CARD_ACCORDEON",
		11: "ROW_VERBOSE",
	}
	ViewSpecLayout_value = map[string]int32{
		"VIEW_SPEC_LAYOUT_UNSPECIFIED": 0,
		"ROW":                          1,
		"TABLE_ITEM":                   4,
		"TRANSPARENT":                  5,
		"ACCORDEON":                    2,
		"SECTION":                      3,
		"SECTION2":                     6,
		"GROUP":                        7,
		"GROUP2":                       8,
		"CARD_SECTION":                 9,
		"CARD_ACCORDEON":               10,
		"ROW_VERBOSE":                  11,
	}
)

func (x ViewSpecLayout) Enum() *ViewSpecLayout {
	p := new(ViewSpecLayout)
	*p = x
	return p
}

func (x ViewSpecLayout) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewSpecLayout) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[2].Descriptor()
}

func (ViewSpecLayout) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[2]
}

func (x ViewSpecLayout) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewSpecLayout.Descriptor instead.
func (ViewSpecLayout) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{2}
}

// Format for number item type
type NumberFormat int32

const (
	NumberFormat_NUMBER_FORMAT_UNSPECIFIED NumberFormat = 0
	// Integer
	NumberFormat_INT64 NumberFormat = 1
	// Float-pointing
	NumberFormat_FLOAT NumberFormat = 2
)

// Enum value maps for NumberFormat.
var (
	NumberFormat_name = map[int32]string{
		0: "NUMBER_FORMAT_UNSPECIFIED",
		1: "INT64",
		2: "FLOAT",
	}
	NumberFormat_value = map[string]int32{
		"NUMBER_FORMAT_UNSPECIFIED": 0,
		"INT64":                     1,
		"FLOAT":                     2,
	}
)

func (x NumberFormat) Enum() *NumberFormat {
	p := new(NumberFormat)
	*p = x
	return p
}

func (x NumberFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumberFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[3].Descriptor()
}

func (NumberFormat) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[3]
}

func (x NumberFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumberFormat.Descriptor instead.
func (NumberFormat) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{3}
}

// Style of theme labels (specifies color of label and box)
type ThemeLabel int32

const (
	// Default style, white color on transparent background
	ThemeLabel_THEME_LABEL_UNSPECIFIED ThemeLabel = 0
	// Grayish-blue color block
	ThemeLabel_NORMAL ThemeLabel = 1
	// Blue color block
	ThemeLabel_INFO ThemeLabel = 2
	// Red color block
	ThemeLabel_DANGER ThemeLabel = 3
	// Yellow color block
	ThemeLabel_WARNING ThemeLabel = 4
	// Green color block
	ThemeLabel_SUCCESS ThemeLabel = 5
	// Gray color block
	ThemeLabel_UNKNOWN ThemeLabel = 6
)

// Enum value maps for ThemeLabel.
var (
	ThemeLabel_name = map[int32]string{
		0: "THEME_LABEL_UNSPECIFIED",
		1: "NORMAL",
		2: "INFO",
		3: "DANGER",
		4: "WARNING",
		5: "SUCCESS",
		6: "UNKNOWN",
	}
	ThemeLabel_value = map[string]int32{
		"THEME_LABEL_UNSPECIFIED": 0,
		"NORMAL":                  1,
		"INFO":                    2,
		"DANGER":                  3,
		"WARNING":                 4,
		"SUCCESS":                 5,
		"UNKNOWN":                 6,
	}
)

func (x ThemeLabel) Enum() *ThemeLabel {
	p := new(ThemeLabel)
	*p = x
	return p
}

func (x ThemeLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThemeLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[4].Descriptor()
}

func (ThemeLabel) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[4]
}

func (x ThemeLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThemeLabel.Descriptor instead.
func (ThemeLabel) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{4}
}

type TogglerType int32

const (
	TogglerType_TOGGLER_TYPE_UNSPECIFIED TogglerType = 0
	// rounded switch
	TogglerType_RADIO TogglerType = 1
	// dropdown
	TogglerType_SELECT TogglerType = 2
	// card
	TogglerType_CARD TogglerType = 3
	// Checkbox
	TogglerType_CHECKBOX TogglerType = 4
)

// Enum value maps for TogglerType.
var (
	TogglerType_name = map[int32]string{
		0: "TOGGLER_TYPE_UNSPECIFIED",
		1: "RADIO",
		2: "SELECT",
		3: "CARD",
		4: "CHECKBOX",
	}
	TogglerType_value = map[string]int32{
		"TOGGLER_TYPE_UNSPECIFIED": 0,
		"RADIO":                    1,
		"SELECT":                   2,
		"CARD":                     3,
		"CHECKBOX":                 4,
	}
)

func (x TogglerType) Enum() *TogglerType {
	p := new(TogglerType)
	*p = x
	return p
}

func (x TogglerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TogglerType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[5].Descriptor()
}

func (TogglerType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[5]
}

func (x TogglerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TogglerType.Descriptor instead.
func (TogglerType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{5}
}

type ButtonPosition int32

const (
	ButtonPosition_BUTTON_POSITION_UNSPECIFIED ButtonPosition = 0
	ButtonPosition_RIGHT                       ButtonPosition = 1
	ButtonPosition_DOWN                        ButtonPosition = 2
)

// Enum value maps for ButtonPosition.
var (
	ButtonPosition_name = map[int32]string{
		0: "BUTTON_POSITION_UNSPECIFIED",
		1: "RIGHT",
		2: "DOWN",
	}
	ButtonPosition_value = map[string]int32{
		"BUTTON_POSITION_UNSPECIFIED": 0,
		"RIGHT":                       1,
		"DOWN":                        2,
	}
)

func (x ButtonPosition) Enum() *ButtonPosition {
	p := new(ButtonPosition)
	*p = x
	return p
}

func (x ButtonPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ButtonPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[6].Descriptor()
}

func (ButtonPosition) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[6]
}

func (x ButtonPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ButtonPosition.Descriptor instead.
func (ButtonPosition) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{6}
}

type IconColor int32

const (
	IconColor_ICON_COLOR_UNSPECIFIED        IconColor = 0
	IconColor_PRIMARY_ICON_COLOR            IconColor = 1
	IconColor_COMPLEMENTARY_ICON_COLOR      IconColor = 2
	IconColor_SECONDARY_ICON_COLOR          IconColor = 3
	IconColor_HINT_ICON_COLOR               IconColor = 4
	IconColor_INFO_ICON_COLOR               IconColor = 5
	IconColor_INFO_HEAVY_ICON_COLOR         IconColor = 6
	IconColor_POSITIVE_ICON_COLOR           IconColor = 7
	IconColor_POSITIVE_HEAVY_ICON_COLOR     IconColor = 8
	IconColor_WARNING_ICON_COLOR            IconColor = 9
	IconColor_WARNING_HEAVY_ICON_COLOR      IconColor = 10
	IconColor_DANGER_ICON_COLOR             IconColor = 11
	IconColor_DANGER_HEAVY_ICON_COLOR       IconColor = 12
	IconColor_UTILITY_ICON_COLOR            IconColor = 13
	IconColor_UTILITY_HEAVY_ICON_COLOR      IconColor = 14
	IconColor_MISC_ICON_COLOR               IconColor = 15
	IconColor_MISC_HEAVY_ICON_COLOR         IconColor = 16
	IconColor_BRAND_ICON_COLOR              IconColor = 17
	IconColor_DARK_PRIMARY_ICON_COLOR       IconColor = 18
	IconColor_DARK_COMPLEMENTARY_ICON_COLOR IconColor = 19
	IconColor_DARK_SECONDARY_ICON_COLOR     IconColor = 20
)

// Enum value maps for IconColor.
var (
	IconColor_name = map[int32]string{
		0:  "ICON_COLOR_UNSPECIFIED",
		1:  "PRIMARY_ICON_COLOR",
		2:  "COMPLEMENTARY_ICON_COLOR",
		3:  "SECONDARY_ICON_COLOR",
		4:  "HINT_ICON_COLOR",
		5:  "INFO_ICON_COLOR",
		6:  "INFO_HEAVY_ICON_COLOR",
		7:  "POSITIVE_ICON_COLOR",
		8:  "POSITIVE_HEAVY_ICON_COLOR",
		9:  "WARNING_ICON_COLOR",
		10: "WARNING_HEAVY_ICON_COLOR",
		11: "DANGER_ICON_COLOR",
		12: "DANGER_HEAVY_ICON_COLOR",
		13: "UTILITY_ICON_COLOR",
		14: "UTILITY_HEAVY_ICON_COLOR",
		15: "MISC_ICON_COLOR",
		16: "MISC_HEAVY_ICON_COLOR",
		17: "BRAND_ICON_COLOR",
		18: "DARK_PRIMARY_ICON_COLOR",
		19: "DARK_COMPLEMENTARY_ICON_COLOR",
		20: "DARK_SECONDARY_ICON_COLOR",
	}
	IconColor_value = map[string]int32{
		"ICON_COLOR_UNSPECIFIED":        0,
		"PRIMARY_ICON_COLOR":            1,
		"COMPLEMENTARY_ICON_COLOR":      2,
		"SECONDARY_ICON_COLOR":          3,
		"HINT_ICON_COLOR":               4,
		"INFO_ICON_COLOR":               5,
		"INFO_HEAVY_ICON_COLOR":         6,
		"POSITIVE_ICON_COLOR":           7,
		"POSITIVE_HEAVY_ICON_COLOR":     8,
		"WARNING_ICON_COLOR":            9,
		"WARNING_HEAVY_ICON_COLOR":      10,
		"DANGER_ICON_COLOR":             11,
		"DANGER_HEAVY_ICON_COLOR":       12,
		"UTILITY_ICON_COLOR":            13,
		"UTILITY_HEAVY_ICON_COLOR":      14,
		"MISC_ICON_COLOR":               15,
		"MISC_HEAVY_ICON_COLOR":         16,
		"BRAND_ICON_COLOR":              17,
		"DARK_PRIMARY_ICON_COLOR":       18,
		"DARK_COMPLEMENTARY_ICON_COLOR": 19,
		"DARK_SECONDARY_ICON_COLOR":     20,
	}
)

func (x IconColor) Enum() *IconColor {
	p := new(IconColor)
	*p = x
	return p
}

func (x IconColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IconColor) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[7].Descriptor()
}

func (IconColor) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[7]
}

func (x IconColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IconColor.Descriptor instead.
func (IconColor) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{7}
}

// File reading method
// more https://developer.mozilla.org/en-US/docs/Web/API/FileReader#instance_methods
type FileReaderMethod int32

const (
	// Unused zero-placeholder
	FileReaderMethod_FILE_READER_METHOD_UNSPECIFIED FileReaderMethod = 0
	// FileReader.readAsArrayBuffer
	FileReaderMethod_READ_AS_ARRAY_BUFFER FileReaderMethod = 1
	// FileReader.readAsBinaryString
	FileReaderMethod_READ_AS_BINARY_STRING FileReaderMethod = 2
	// FileReader.readAsDataURL
	FileReaderMethod_READ_AS_DATA_URL FileReaderMethod = 3
	// FileReader.readAsText
	FileReaderMethod_READ_AS_TEXT FileReaderMethod = 4
)

// Enum value maps for FileReaderMethod.
var (
	FileReaderMethod_name = map[int32]string{
		0: "FILE_READER_METHOD_UNSPECIFIED",
		1: "READ_AS_ARRAY_BUFFER",
		2: "READ_AS_BINARY_STRING",
		3: "READ_AS_DATA_URL",
		4: "READ_AS_TEXT",
	}
	FileReaderMethod_value = map[string]int32{
		"FILE_READER_METHOD_UNSPECIFIED": 0,
		"READ_AS_ARRAY_BUFFER":           1,
		"READ_AS_BINARY_STRING":          2,
		"READ_AS_DATA_URL":               3,
		"READ_AS_TEXT":                   4,
	}
)

func (x FileReaderMethod) Enum() *FileReaderMethod {
	p := new(FileReaderMethod)
	*p = x
	return p
}

func (x FileReaderMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileReaderMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[8].Descriptor()
}

func (FileReaderMethod) Type() protoreflect.EnumType {
	return &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes[8]
}

func (x FileReaderMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileReaderMethod.Descriptor instead.
func (FileReaderMethod) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{8}
}

// Form field
type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of form item
	Type ItemType `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.priv.dynamicform.v1.ItemType" json:"type,omitempty"`
	// Appearance properties
	ViewSpec *ViewSpec `protobuf:"bytes,2,opt,name=view_spec,json=viewSpec,proto3" json:"view_spec,omitempty"`
	// Field is required
	Required bool `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"`
	// Frontend validator for field
	Validator string `protobuf:"bytes,14,opt,name=validator,proto3" json:"validator,omitempty"`
	// Default value for field
	DefaultValue string `protobuf:"bytes,15,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Child items, if item type is object
	Properties map[string]*Item `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Array item properties, if item type is array
	Items *Item `protobuf:"bytes,5,opt,name=items,proto3" json:"items,omitempty"`
	// Enum values, if item type is enum
	Enum []string `protobuf:"bytes,6,rep,name=enum,proto3" json:"enum,omitempty"`
	// Titles for enum values, if item type is array
	// (enum value - key, title - value)
	Description map[string]string `protobuf:"bytes,7,rep,name=description,proto3" json:"description,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Number format, if item type is number
	Format NumberFormat `protobuf:"varint,8,opt,name=format,proto3,enum=yandex.cloud.priv.dynamicform.v1.NumberFormat" json:"format,omitempty"`
	// Minimum value, if item type is number
	Minimum float64 `protobuf:"fixed64,9,opt,name=minimum,proto3" json:"minimum,omitempty"`
	// Maximum value, if item type is number
	Maximum float64 `protobuf:"fixed64,10,opt,name=maximum,proto3" json:"maximum,omitempty"`
	// Regex for string values validation, if item type is string or array of strings
	Pattern string `protobuf:"bytes,11,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// Minimum length for string value or minimun length of array, if item type is string or array of strings
	MinLength int64 `protobuf:"varint,12,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	// Maximim length for string value or minimun length of array, if item type is string or array of strings
	MaxLength int64 `protobuf:"varint,13,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	// Error text, if regex not match the input
	PatternError string `protobuf:"bytes,16,opt,name=pattern_error,json=patternError,proto3" json:"pattern_error,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{0}
}

func (x *Item) GetType() ItemType {
	if x != nil {
		return x.Type
	}
	return ItemType_ITEM_TYPE_UNSPECIFIED
}

func (x *Item) GetViewSpec() *ViewSpec {
	if x != nil {
		return x.ViewSpec
	}
	return nil
}

func (x *Item) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Item) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *Item) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *Item) GetProperties() map[string]*Item {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Item) GetItems() *Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Item) GetEnum() []string {
	if x != nil {
		return x.Enum
	}
	return nil
}

func (x *Item) GetDescription() map[string]string {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Item) GetFormat() NumberFormat {
	if x != nil {
		return x.Format
	}
	return NumberFormat_NUMBER_FORMAT_UNSPECIFIED
}

func (x *Item) GetMinimum() float64 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *Item) GetMaximum() float64 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

func (x *Item) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *Item) GetMinLength() int64 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *Item) GetMaxLength() int64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *Item) GetPatternError() string {
	if x != nil {
		return x.PatternError
	}
	return ""
}

type OneOfParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Toggler TogglerType `protobuf:"varint,1,opt,name=toggler,proto3,enum=yandex.cloud.priv.dynamicform.v1.TogglerType" json:"toggler,omitempty"`
	// Boolean map for checkbox oneof
	BooleanMap map[string]string `protobuf:"bytes,2,rep,name=boolean_map,json=booleanMap,proto3" json:"boolean_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OneOfParams) Reset() {
	*x = OneOfParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOfParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOfParams) ProtoMessage() {}

func (x *OneOfParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOfParams.ProtoReflect.Descriptor instead.
func (*OneOfParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{1}
}

func (x *OneOfParams) GetToggler() TogglerType {
	if x != nil {
		return x.Toggler
	}
	return TogglerType_TOGGLER_TYPE_UNSPECIFIED
}

func (x *OneOfParams) GetBooleanMap() map[string]string {
	if x != nil {
		return x.BooleanMap
	}
	return nil
}

type SelectParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterPlaceholder string            `protobuf:"bytes,1,opt,name=filter_placeholder,json=filterPlaceholder,proto3" json:"filter_placeholder,omitempty"`
	Meta              map[string]string `protobuf:"bytes,2,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SelectParams) Reset() {
	*x = SelectParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectParams) ProtoMessage() {}

func (x *SelectParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectParams.ProtoReflect.Descriptor instead.
func (*SelectParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{2}
}

func (x *SelectParams) GetFilterPlaceholder() string {
	if x != nil {
		return x.FilterPlaceholder
	}
	return ""
}

func (x *SelectParams) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

type TextContentParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeLabel ThemeLabel `protobuf:"varint,1,opt,name=theme_label,json=themeLabel,proto3,enum=yandex.cloud.priv.dynamicform.v1.ThemeLabel" json:"theme_label,omitempty"`
	Text       string     `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Icon       string     `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	IconColor  IconColor  `protobuf:"varint,4,opt,name=icon_color,json=iconColor,proto3,enum=yandex.cloud.priv.dynamicform.v1.IconColor" json:"icon_color,omitempty"`
}

func (x *TextContentParams) Reset() {
	*x = TextContentParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextContentParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextContentParams) ProtoMessage() {}

func (x *TextContentParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextContentParams.ProtoReflect.Descriptor instead.
func (*TextContentParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{3}
}

func (x *TextContentParams) GetThemeLabel() ThemeLabel {
	if x != nil {
		return x.ThemeLabel
	}
	return ThemeLabel_THEME_LABEL_UNSPECIFIED
}

func (x *TextContentParams) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TextContentParams) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *TextContentParams) GetIconColor() IconColor {
	if x != nil {
		return x.IconColor
	}
	return IconColor_ICON_COLOR_UNSPECIFIED
}

type InputProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *InputProps) Reset() {
	*x = InputProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputProps) ProtoMessage() {}

func (x *InputProps) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputProps.ProtoReflect.Descriptor instead.
func (*InputProps) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{4}
}

func (x *InputProps) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ViewSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control to use, default is 'base' - select control from item type
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Control layout
	Layout ViewSpecLayout `protobuf:"varint,2,opt,name=layout,proto3,enum=yandex.cloud.priv.dynamicform.v1.ViewSpecLayout" json:"layout,omitempty"`
	// Control is disabled or enabled
	Disabled bool `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Title
	LayoutTitle string `protobuf:"bytes,4,opt,name=layout_title,json=layoutTitle,proto3" json:"layout_title,omitempty"`
	// Help text
	LayoutDescription string `protobuf:"bytes,5,opt,name=layout_description,json=layoutDescription,proto3" json:"layout_description,omitempty"`
	// For array
	ItemLabel string `protobuf:"bytes,6,opt,name=item_label,json=itemLabel,proto3" json:"item_label,omitempty"`
	// For array of objects only, draw array of objects as table
	Table []*ViewTableCell `protobuf:"bytes,7,rep,name=table,proto3" json:"table,omitempty"`
	// Order of items, for object
	Order []string `protobuf:"bytes,8,rep,name=order,proto3" json:"order,omitempty"`
	// Draw link control on overview stage
	Link *Link `protobuf:"bytes,9,opt,name=link,proto3" json:"link,omitempty"`
	// Option for layout 'ACCORDEON', initial state of accordion - opened/closed
	LayoutOpen bool `protobuf:"varint,10,opt,name=layout_open,json=layoutOpen,proto3" json:"layout_open,omitempty"`
	// For scale control field
	SizeParams *ScaleControl `protobuf:"bytes,11,opt,name=size_params,json=sizeParams,proto3" json:"size_params,omitempty"`
	// Extra params for monaco typed input
	MonacoParams *MonacoParams `protobuf:"bytes,13,opt,name=monaco_params,json=monacoParams,proto3" json:"monaco_params,omitempty"`
	// Placeholder text for text-like controls
	Placeholder string `protobuf:"bytes,14,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	// Style of 'text_content' type view_spec
	//
	// Deprecated: Marked as deprecated in yandex/cloud/priv/dynamicform/v1/dynamicform.proto.
	ThemeLabel ThemeLabel `protobuf:"varint,15,opt,name=theme_label,json=themeLabel,proto3,enum=yandex.cloud.priv.dynamicform.v1.ThemeLabel" json:"theme_label,omitempty"` // Deprecated: use text_content_params
	// Extra params for 'file_input' type
	FileInput *FileInput `protobuf:"bytes,16,opt,name=file_input,json=fileInput,proto3" json:"file_input,omitempty"`
	// Style of 'oneof'
	OneOfParams *OneOfParams `protobuf:"bytes,17,opt,name=one_of_params,json=oneOfParams,proto3" json:"one_of_params,omitempty"`
	// For array
	ItemPrefix string `protobuf:"bytes,18,opt,name=item_prefix,json=itemPrefix,proto3" json:"item_prefix,omitempty"`
	// Position of '+' button
	AddButtonPosition ButtonPosition `protobuf:"varint,19,opt,name=add_button_position,json=addButtonPosition,proto3,enum=yandex.cloud.priv.dynamicform.v1.ButtonPosition" json:"add_button_position,omitempty"`
	// Select parameters for enum string
	SelectParams *SelectParams `protobuf:"bytes,21,opt,name=select_params,json=selectParams,proto3" json:"select_params,omitempty"`
	Hidden       bool          `protobuf:"varint,22,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Show "Generate" button
	// Applicable for 'base', 'password', 'texarea' controls with layouts  'transparent' and 'row'
	// Generated value complies to 'regex' validation if regex is specified
	GenerateRandomValueButton bool `protobuf:"varint,23,opt,name=generate_random_value_button,json=generateRandomValueButton,proto3" json:"generate_random_value_button,omitempty"`
	// Delimiter map
	Delimiter map[string]string `protobuf:"bytes,24,rep,name=delimiter,proto3" json:"delimiter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Params of 'text_content'
	TextContentParams *TextContentParams `protobuf:"bytes,25,opt,name=text_content_params,json=textContentParams,proto3" json:"text_content_params,omitempty"`
	// Additional properties for internal input components
	InputProps *InputProps `protobuf:"bytes,26,opt,name=input_props,json=inputProps,proto3" json:"input_props,omitempty"`
}

func (x *ViewSpec) Reset() {
	*x = ViewSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewSpec) ProtoMessage() {}

func (x *ViewSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewSpec.ProtoReflect.Descriptor instead.
func (*ViewSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{5}
}

func (x *ViewSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ViewSpec) GetLayout() ViewSpecLayout {
	if x != nil {
		return x.Layout
	}
	return ViewSpecLayout_VIEW_SPEC_LAYOUT_UNSPECIFIED
}

func (x *ViewSpec) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *ViewSpec) GetLayoutTitle() string {
	if x != nil {
		return x.LayoutTitle
	}
	return ""
}

func (x *ViewSpec) GetLayoutDescription() string {
	if x != nil {
		return x.LayoutDescription
	}
	return ""
}

func (x *ViewSpec) GetItemLabel() string {
	if x != nil {
		return x.ItemLabel
	}
	return ""
}

func (x *ViewSpec) GetTable() []*ViewTableCell {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *ViewSpec) GetOrder() []string {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ViewSpec) GetLink() *Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *ViewSpec) GetLayoutOpen() bool {
	if x != nil {
		return x.LayoutOpen
	}
	return false
}

func (x *ViewSpec) GetSizeParams() *ScaleControl {
	if x != nil {
		return x.SizeParams
	}
	return nil
}

func (x *ViewSpec) GetMonacoParams() *MonacoParams {
	if x != nil {
		return x.MonacoParams
	}
	return nil
}

func (x *ViewSpec) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

// Deprecated: Marked as deprecated in yandex/cloud/priv/dynamicform/v1/dynamicform.proto.
func (x *ViewSpec) GetThemeLabel() ThemeLabel {
	if x != nil {
		return x.ThemeLabel
	}
	return ThemeLabel_THEME_LABEL_UNSPECIFIED
}

func (x *ViewSpec) GetFileInput() *FileInput {
	if x != nil {
		return x.FileInput
	}
	return nil
}

func (x *ViewSpec) GetOneOfParams() *OneOfParams {
	if x != nil {
		return x.OneOfParams
	}
	return nil
}

func (x *ViewSpec) GetItemPrefix() string {
	if x != nil {
		return x.ItemPrefix
	}
	return ""
}

func (x *ViewSpec) GetAddButtonPosition() ButtonPosition {
	if x != nil {
		return x.AddButtonPosition
	}
	return ButtonPosition_BUTTON_POSITION_UNSPECIFIED
}

func (x *ViewSpec) GetSelectParams() *SelectParams {
	if x != nil {
		return x.SelectParams
	}
	return nil
}

func (x *ViewSpec) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *ViewSpec) GetGenerateRandomValueButton() bool {
	if x != nil {
		return x.GenerateRandomValueButton
	}
	return false
}

func (x *ViewSpec) GetDelimiter() map[string]string {
	if x != nil {
		return x.Delimiter
	}
	return nil
}

func (x *ViewSpec) GetTextContentParams() *TextContentParams {
	if x != nil {
		return x.TextContentParams
	}
	return nil
}

func (x *ViewSpec) GetInputProps() *InputProps {
	if x != nil {
		return x.InputProps
	}
	return nil
}

// FileInput extra params
type FileInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Acceptable file extensions (e.g., '.png', 'audio/\*', '.jpg, .jpeg, .png')
	Accept string `protobuf:"bytes,1,opt,name=accept,proto3" json:"accept,omitempty"`
	// File reading method
	ReadAsMethod FileReaderMethod `protobuf:"varint,2,opt,name=read_as_method,json=readAsMethod,proto3,enum=yandex.cloud.priv.dynamicform.v1.FileReaderMethod" json:"read_as_method,omitempty"`
	// Show the `File uploaded` stub instead of the field value
	IgnoreText bool `protobuf:"varint,3,opt,name=ignore_text,json=ignoreText,proto3" json:"ignore_text,omitempty"`
}

func (x *FileInput) Reset() {
	*x = FileInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInput) ProtoMessage() {}

func (x *FileInput) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInput.ProtoReflect.Descriptor instead.
func (*FileInput) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{6}
}

func (x *FileInput) GetAccept() string {
	if x != nil {
		return x.Accept
	}
	return ""
}

func (x *FileInput) GetReadAsMethod() FileReaderMethod {
	if x != nil {
		return x.ReadAsMethod
	}
	return FileReaderMethod_FILE_READER_METHOD_UNSPECIFIED
}

func (x *FileInput) GetIgnoreText() bool {
	if x != nil {
		return x.IgnoreText
	}
	return false
}

// Monaco extra params
// see: https://github.com/doublecloud/tross/arcadia/data-ui/dynamic-forms/src/ui/pages/Home/FormTest/consts.tsx?rev=r10260069#L690
type MonacoParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Monaco editor language (for example: json or yql), default json
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// Monaco font size, default 14
	FontSize int64 `protobuf:"varint,2,opt,name=font_size,json=fontSize,proto3" json:"font_size,omitempty"`
}

func (x *MonacoParams) Reset() {
	*x = MonacoParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonacoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonacoParams) ProtoMessage() {}

func (x *MonacoParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonacoParams.ProtoReflect.Descriptor instead.
func (*MonacoParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{7}
}

func (x *MonacoParams) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *MonacoParams) GetFontSize() int64 {
	if x != nil {
		return x.FontSize
	}
	return 0
}

// Sets the order of the columns in the table, for array of objects
type ViewTableCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column title
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Item name from child object
	Property string `protobuf:"bytes,2,opt,name=property,proto3" json:"property,omitempty"`
}

func (x *ViewTableCell) Reset() {
	*x = ViewTableCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewTableCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewTableCell) ProtoMessage() {}

func (x *ViewTableCell) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewTableCell.ProtoReflect.Descriptor instead.
func (*ViewTableCell) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{8}
}

func (x *ViewTableCell) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ViewTableCell) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

// Managed database link
type CloudLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Managed database cluster ID
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Clous folder ID
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *CloudLink) Reset() {
	*x = CloudLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudLink) ProtoMessage() {}

func (x *CloudLink) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudLink.ProtoReflect.Descriptor instead.
func (*CloudLink) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{9}
}

func (x *CloudLink) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CloudLink) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

// Link to not cloud resource
type ExternalLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Link template
	Link string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	// Link params
	Props map[string]string `protobuf:"bytes,2,rep,name=props,proto3" json:"props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExternalLink) Reset() {
	*x = ExternalLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalLink) ProtoMessage() {}

func (x *ExternalLink) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalLink.ProtoReflect.Descriptor instead.
func (*ExternalLink) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{10}
}

func (x *ExternalLink) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *ExternalLink) GetProps() map[string]string {
	if x != nil {
		return x.Props
	}
	return nil
}

// Link control, draws only on overview stage
type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of link
	Type LinkType `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.priv.dynamicform.v1.LinkType" json:"type,omitempty"`
	// Link properties
	//
	// Types that are assignable to Link:
	//
	//	*Link_Cloud
	//	*Link_External
	Link isLink_Link `protobuf_oneof:"link"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{11}
}

func (x *Link) GetType() LinkType {
	if x != nil {
		return x.Type
	}
	return LinkType_LINK_TYPE_UNSPECIFIED
}

func (m *Link) GetLink() isLink_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (x *Link) GetCloud() *CloudLink {
	if x, ok := x.GetLink().(*Link_Cloud); ok {
		return x.Cloud
	}
	return nil
}

func (x *Link) GetExternal() *ExternalLink {
	if x, ok := x.GetLink().(*Link_External); ok {
		return x.External
	}
	return nil
}

type isLink_Link interface {
	isLink_Link()
}

type Link_Cloud struct {
	// Cloud resourse link properties
	Cloud *CloudLink `protobuf:"bytes,2,opt,name=cloud,proto3,oneof"`
}

type Link_External struct {
	// Not cloud resourse link properties
	External *ExternalLink `protobuf:"bytes,3,opt,name=external,proto3,oneof"`
}

func (*Link_Cloud) isLink_Link() {}

func (*Link_External) isLink_Link() {}

// Scale control params
type ScaleControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default scale
	DefaultType string `protobuf:"bytes,1,opt,name=default_type,json=defaultType,proto3" json:"default_type,omitempty"`
	// Control scales
	Scale map[string]*ScaleParams `protobuf:"bytes,2,rep,name=scale,proto3" json:"scale,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ScaleControl) Reset() {
	*x = ScaleControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleControl) ProtoMessage() {}

func (x *ScaleControl) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleControl.ProtoReflect.Descriptor instead.
func (*ScaleControl) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{12}
}

func (x *ScaleControl) GetDefaultType() string {
	if x != nil {
		return x.DefaultType
	}
	return ""
}

func (x *ScaleControl) GetScale() map[string]*ScaleParams {
	if x != nil {
		return x.Scale
	}
	return nil
}

// Single scale params
type ScaleParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Factor of given scale
	Factor string `protobuf:"bytes,1,opt,name=factor,proto3" json:"factor,omitempty"`
	// Title
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ScaleParams) Reset() {
	*x = ScaleParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleParams) ProtoMessage() {}

func (x *ScaleParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleParams.ProtoReflect.Descriptor instead.
func (*ScaleParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP(), []int{13}
}

func (x *ScaleParams) GetFactor() string {
	if x != nil {
		return x.Factor
	}
	return ""
}

func (x *ScaleParams) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

var File_yandex_cloud_priv_dynamicform_v1_dynamicform_proto protoreflect.FileDescriptor

var file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDesc = []byte{
	0x0a, 0x32, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x22, 0x93, 0x07, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x47, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x75,
	0x6d, 0x12, 0x59, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x65, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf5, 0x01, 0x0a,
	0x0b, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x47, 0x0a, 0x07,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e,
	0x65, 0x4f, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x4d, 0x61, 0x70, 0x1a, 0x3d, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x11,
	0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x0a, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x26, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xf1, 0x0b, 0x0a,
	0x08, 0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a,
	0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52,
	0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x4f,
	0x0a, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x53, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x61, 0x63, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x61, 0x63, 0x6f,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x61, 0x63, 0x6f, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0b, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x74,
	0x68, 0x65, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x6f, 0x6e, 0x65,
	0x4f, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x60, 0x0a, 0x13, 0x61, 0x64, 0x64,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x64, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0d, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x12, 0x63, 0x0a, 0x13, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x11, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15,
	0x22, 0x9e, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x58, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61,
	0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x41, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x22, 0x47, 0x0a, 0x0c, 0x4d, 0x6f, 0x6e, 0x61, 0x63, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x41, 0x0a, 0x0d, 0x56, 0x69,
	0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0x47, 0x0a,
	0x09, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x4f, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x1a, 0x38, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x12, 0x4c, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xeb, 0x01, 0x0a, 0x0c, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f,
	0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x1a,
	0x67, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x2a, 0x61, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41,
	0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x2a, 0xa4, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53,
	0x54, 0x47, 0x52, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x49, 0x43, 0x4b,
	0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x47, 0x4f,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x10, 0x06, 0x12, 0x0d, 0x0a,
	0x09, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x50, 0x4c, 0x55, 0x4d, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x4c, 0x41, 0x53, 0x54, 0x49, 0x43, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x08, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x09, 0x2a,
	0xd4, 0x01, 0x0a, 0x0e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f,
	0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x43, 0x43, 0x4f, 0x52, 0x44, 0x45, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x32, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x32, 0x10, 0x08, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x09, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x52, 0x44,
	0x45, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x57, 0x5f, 0x56, 0x45, 0x52,
	0x42, 0x4f, 0x53, 0x45, 0x10, 0x0b, 0x2a, 0x43, 0x0a, 0x0c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x2a, 0x72, 0x0a, 0x0a, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x48, 0x45,
	0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x2a,
	0x5a, 0x0a, 0x0b, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x41, 0x44, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x42, 0x4f, 0x58, 0x10, 0x04, 0x2a, 0x46, 0x0a, 0x0e, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x1b, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x02, 0x2a, 0xb9, 0x04, 0x0a, 0x09, 0x49, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59,
	0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x48, 0x45, 0x41, 0x56, 0x59, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49,
	0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x56, 0x59, 0x5f, 0x49, 0x43,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x41,
	0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x45,
	0x41, 0x56, 0x59, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x0a,
	0x12, 0x15, 0x0a, 0x11, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x4e, 0x47, 0x45,
	0x52, 0x5f, 0x48, 0x45, 0x41, 0x56, 0x59, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18,
	0x55, 0x54, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x56, 0x59, 0x5f, 0x49, 0x43,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x49,
	0x53, 0x43, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x0f, 0x12,
	0x19, 0x0a, 0x15, 0x4d, 0x49, 0x53, 0x43, 0x5f, 0x48, 0x45, 0x41, 0x56, 0x59, 0x5f, 0x49, 0x43,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x52,
	0x41, 0x4e, 0x44, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x11,
	0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59,
	0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x12, 0x12, 0x21, 0x0a,
	0x1d, 0x44, 0x41, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x41, 0x52, 0x59, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x13,
	0x12, 0x1d, 0x0a, 0x19, 0x44, 0x41, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41,
	0x52, 0x59, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x14, 0x2a,
	0x93, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x41, 0x53, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x52,
	0x4c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x04, 0x42, 0x6d, 0x42, 0x10, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x59, 0x61, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x66, 0x6f, 0x72, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescOnce sync.Once
	file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescData = file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDesc
)

func file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescGZIP() []byte {
	file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescData)
	})
	return file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDescData
}

var file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_goTypes = []interface{}{
	(ItemType)(0),             // 0: yandex.cloud.priv.dynamicform.v1.ItemType
	(LinkType)(0),             // 1: yandex.cloud.priv.dynamicform.v1.LinkType
	(ViewSpecLayout)(0),       // 2: yandex.cloud.priv.dynamicform.v1.ViewSpecLayout
	(NumberFormat)(0),         // 3: yandex.cloud.priv.dynamicform.v1.NumberFormat
	(ThemeLabel)(0),           // 4: yandex.cloud.priv.dynamicform.v1.ThemeLabel
	(TogglerType)(0),          // 5: yandex.cloud.priv.dynamicform.v1.TogglerType
	(ButtonPosition)(0),       // 6: yandex.cloud.priv.dynamicform.v1.ButtonPosition
	(IconColor)(0),            // 7: yandex.cloud.priv.dynamicform.v1.IconColor
	(FileReaderMethod)(0),     // 8: yandex.cloud.priv.dynamicform.v1.FileReaderMethod
	(*Item)(nil),              // 9: yandex.cloud.priv.dynamicform.v1.Item
	(*OneOfParams)(nil),       // 10: yandex.cloud.priv.dynamicform.v1.OneOfParams
	(*SelectParams)(nil),      // 11: yandex.cloud.priv.dynamicform.v1.SelectParams
	(*TextContentParams)(nil), // 12: yandex.cloud.priv.dynamicform.v1.TextContentParams
	(*InputProps)(nil),        // 13: yandex.cloud.priv.dynamicform.v1.InputProps
	(*ViewSpec)(nil),          // 14: yandex.cloud.priv.dynamicform.v1.ViewSpec
	(*FileInput)(nil),         // 15: yandex.cloud.priv.dynamicform.v1.FileInput
	(*MonacoParams)(nil),      // 16: yandex.cloud.priv.dynamicform.v1.MonacoParams
	(*ViewTableCell)(nil),     // 17: yandex.cloud.priv.dynamicform.v1.ViewTableCell
	(*CloudLink)(nil),         // 18: yandex.cloud.priv.dynamicform.v1.CloudLink
	(*ExternalLink)(nil),      // 19: yandex.cloud.priv.dynamicform.v1.ExternalLink
	(*Link)(nil),              // 20: yandex.cloud.priv.dynamicform.v1.Link
	(*ScaleControl)(nil),      // 21: yandex.cloud.priv.dynamicform.v1.ScaleControl
	(*ScaleParams)(nil),       // 22: yandex.cloud.priv.dynamicform.v1.ScaleParams
	nil,                       // 23: yandex.cloud.priv.dynamicform.v1.Item.PropertiesEntry
	nil,                       // 24: yandex.cloud.priv.dynamicform.v1.Item.DescriptionEntry
	nil,                       // 25: yandex.cloud.priv.dynamicform.v1.OneOfParams.BooleanMapEntry
	nil,                       // 26: yandex.cloud.priv.dynamicform.v1.SelectParams.MetaEntry
	nil,                       // 27: yandex.cloud.priv.dynamicform.v1.ViewSpec.DelimiterEntry
	nil,                       // 28: yandex.cloud.priv.dynamicform.v1.ExternalLink.PropsEntry
	nil,                       // 29: yandex.cloud.priv.dynamicform.v1.ScaleControl.ScaleEntry
}
var file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_depIdxs = []int32{
	0,  // 0: yandex.cloud.priv.dynamicform.v1.Item.type:type_name -> yandex.cloud.priv.dynamicform.v1.ItemType
	14, // 1: yandex.cloud.priv.dynamicform.v1.Item.view_spec:type_name -> yandex.cloud.priv.dynamicform.v1.ViewSpec
	23, // 2: yandex.cloud.priv.dynamicform.v1.Item.properties:type_name -> yandex.cloud.priv.dynamicform.v1.Item.PropertiesEntry
	9,  // 3: yandex.cloud.priv.dynamicform.v1.Item.items:type_name -> yandex.cloud.priv.dynamicform.v1.Item
	24, // 4: yandex.cloud.priv.dynamicform.v1.Item.description:type_name -> yandex.cloud.priv.dynamicform.v1.Item.DescriptionEntry
	3,  // 5: yandex.cloud.priv.dynamicform.v1.Item.format:type_name -> yandex.cloud.priv.dynamicform.v1.NumberFormat
	5,  // 6: yandex.cloud.priv.dynamicform.v1.OneOfParams.toggler:type_name -> yandex.cloud.priv.dynamicform.v1.TogglerType
	25, // 7: yandex.cloud.priv.dynamicform.v1.OneOfParams.boolean_map:type_name -> yandex.cloud.priv.dynamicform.v1.OneOfParams.BooleanMapEntry
	26, // 8: yandex.cloud.priv.dynamicform.v1.SelectParams.meta:type_name -> yandex.cloud.priv.dynamicform.v1.SelectParams.MetaEntry
	4,  // 9: yandex.cloud.priv.dynamicform.v1.TextContentParams.theme_label:type_name -> yandex.cloud.priv.dynamicform.v1.ThemeLabel
	7,  // 10: yandex.cloud.priv.dynamicform.v1.TextContentParams.icon_color:type_name -> yandex.cloud.priv.dynamicform.v1.IconColor
	2,  // 11: yandex.cloud.priv.dynamicform.v1.ViewSpec.layout:type_name -> yandex.cloud.priv.dynamicform.v1.ViewSpecLayout
	17, // 12: yandex.cloud.priv.dynamicform.v1.ViewSpec.table:type_name -> yandex.cloud.priv.dynamicform.v1.ViewTableCell
	20, // 13: yandex.cloud.priv.dynamicform.v1.ViewSpec.link:type_name -> yandex.cloud.priv.dynamicform.v1.Link
	21, // 14: yandex.cloud.priv.dynamicform.v1.ViewSpec.size_params:type_name -> yandex.cloud.priv.dynamicform.v1.ScaleControl
	16, // 15: yandex.cloud.priv.dynamicform.v1.ViewSpec.monaco_params:type_name -> yandex.cloud.priv.dynamicform.v1.MonacoParams
	4,  // 16: yandex.cloud.priv.dynamicform.v1.ViewSpec.theme_label:type_name -> yandex.cloud.priv.dynamicform.v1.ThemeLabel
	15, // 17: yandex.cloud.priv.dynamicform.v1.ViewSpec.file_input:type_name -> yandex.cloud.priv.dynamicform.v1.FileInput
	10, // 18: yandex.cloud.priv.dynamicform.v1.ViewSpec.one_of_params:type_name -> yandex.cloud.priv.dynamicform.v1.OneOfParams
	6,  // 19: yandex.cloud.priv.dynamicform.v1.ViewSpec.add_button_position:type_name -> yandex.cloud.priv.dynamicform.v1.ButtonPosition
	11, // 20: yandex.cloud.priv.dynamicform.v1.ViewSpec.select_params:type_name -> yandex.cloud.priv.dynamicform.v1.SelectParams
	27, // 21: yandex.cloud.priv.dynamicform.v1.ViewSpec.delimiter:type_name -> yandex.cloud.priv.dynamicform.v1.ViewSpec.DelimiterEntry
	12, // 22: yandex.cloud.priv.dynamicform.v1.ViewSpec.text_content_params:type_name -> yandex.cloud.priv.dynamicform.v1.TextContentParams
	13, // 23: yandex.cloud.priv.dynamicform.v1.ViewSpec.input_props:type_name -> yandex.cloud.priv.dynamicform.v1.InputProps
	8,  // 24: yandex.cloud.priv.dynamicform.v1.FileInput.read_as_method:type_name -> yandex.cloud.priv.dynamicform.v1.FileReaderMethod
	28, // 25: yandex.cloud.priv.dynamicform.v1.ExternalLink.props:type_name -> yandex.cloud.priv.dynamicform.v1.ExternalLink.PropsEntry
	1,  // 26: yandex.cloud.priv.dynamicform.v1.Link.type:type_name -> yandex.cloud.priv.dynamicform.v1.LinkType
	18, // 27: yandex.cloud.priv.dynamicform.v1.Link.cloud:type_name -> yandex.cloud.priv.dynamicform.v1.CloudLink
	19, // 28: yandex.cloud.priv.dynamicform.v1.Link.external:type_name -> yandex.cloud.priv.dynamicform.v1.ExternalLink
	29, // 29: yandex.cloud.priv.dynamicform.v1.ScaleControl.scale:type_name -> yandex.cloud.priv.dynamicform.v1.ScaleControl.ScaleEntry
	9,  // 30: yandex.cloud.priv.dynamicform.v1.Item.PropertiesEntry.value:type_name -> yandex.cloud.priv.dynamicform.v1.Item
	22, // 31: yandex.cloud.priv.dynamicform.v1.ScaleControl.ScaleEntry.value:type_name -> yandex.cloud.priv.dynamicform.v1.ScaleParams
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_init() }
func file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_init() {
	if File_yandex_cloud_priv_dynamicform_v1_dynamicform_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOfParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextContentParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonacoParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewTableCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Link_Cloud)(nil),
		(*Link_External)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_msgTypes,
	}.Build()
	File_yandex_cloud_priv_dynamicform_v1_dynamicform_proto = out.File
	file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_rawDesc = nil
	file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_goTypes = nil
	file_yandex_cloud_priv_dynamicform_v1_dynamicform_proto_depIdxs = nil
}
