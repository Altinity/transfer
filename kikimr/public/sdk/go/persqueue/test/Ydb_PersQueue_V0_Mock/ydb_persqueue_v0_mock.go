// Code generated by MockGen. DO NOT EDIT.
// Source: ydb_persqueue_v0.pb.go

// Package Ydb_PersQueue_V0_Mock is a generated GoMock package.
package Ydb_PersQueue_V0_Mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"

	Ydb_PersQueue_V0 "github.com/doublecloud/tross/kikimr/public/sdk/go/persqueue/genproto/Ydb_PersQueue_V0"
)

// MockisCredentials_Credentials is a mock of isCredentials_Credentials interface.
type MockisCredentials_Credentials struct {
	ctrl     *gomock.Controller
	recorder *MockisCredentials_CredentialsMockRecorder
}

// MockisCredentials_CredentialsMockRecorder is the mock recorder for MockisCredentials_Credentials.
type MockisCredentials_CredentialsMockRecorder struct {
	mock *MockisCredentials_Credentials
}

// NewMockisCredentials_Credentials creates a new mock instance.
func NewMockisCredentials_Credentials(ctrl *gomock.Controller) *MockisCredentials_Credentials {
	mock := &MockisCredentials_Credentials{ctrl: ctrl}
	mock.recorder = &MockisCredentials_CredentialsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisCredentials_Credentials) EXPECT() *MockisCredentials_CredentialsMockRecorder {
	return m.recorder
}

// isCredentials_Credentials mocks base method.
func (m *MockisCredentials_Credentials) isCredentials_Credentials() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isCredentials_Credentials")
}

// isCredentials_Credentials indicates an expected call of isCredentials_Credentials.
func (mr *MockisCredentials_CredentialsMockRecorder) isCredentials_Credentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCredentials_Credentials", reflect.TypeOf((*MockisCredentials_Credentials)(nil).isCredentials_Credentials))
}

// MockisWriteRequest_Request is a mock of isWriteRequest_Request interface.
type MockisWriteRequest_Request struct {
	ctrl     *gomock.Controller
	recorder *MockisWriteRequest_RequestMockRecorder
}

// MockisWriteRequest_RequestMockRecorder is the mock recorder for MockisWriteRequest_Request.
type MockisWriteRequest_RequestMockRecorder struct {
	mock *MockisWriteRequest_Request
}

// NewMockisWriteRequest_Request creates a new mock instance.
func NewMockisWriteRequest_Request(ctrl *gomock.Controller) *MockisWriteRequest_Request {
	mock := &MockisWriteRequest_Request{ctrl: ctrl}
	mock.recorder = &MockisWriteRequest_RequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisWriteRequest_Request) EXPECT() *MockisWriteRequest_RequestMockRecorder {
	return m.recorder
}

// isWriteRequest_Request mocks base method.
func (m *MockisWriteRequest_Request) isWriteRequest_Request() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isWriteRequest_Request")
}

// isWriteRequest_Request indicates an expected call of isWriteRequest_Request.
func (mr *MockisWriteRequest_RequestMockRecorder) isWriteRequest_Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isWriteRequest_Request", reflect.TypeOf((*MockisWriteRequest_Request)(nil).isWriteRequest_Request))
}

// MockisWriteResponse_Response is a mock of isWriteResponse_Response interface.
type MockisWriteResponse_Response struct {
	ctrl     *gomock.Controller
	recorder *MockisWriteResponse_ResponseMockRecorder
}

// MockisWriteResponse_ResponseMockRecorder is the mock recorder for MockisWriteResponse_Response.
type MockisWriteResponse_ResponseMockRecorder struct {
	mock *MockisWriteResponse_Response
}

// NewMockisWriteResponse_Response creates a new mock instance.
func NewMockisWriteResponse_Response(ctrl *gomock.Controller) *MockisWriteResponse_Response {
	mock := &MockisWriteResponse_Response{ctrl: ctrl}
	mock.recorder = &MockisWriteResponse_ResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisWriteResponse_Response) EXPECT() *MockisWriteResponse_ResponseMockRecorder {
	return m.recorder
}

// isWriteResponse_Response mocks base method.
func (m *MockisWriteResponse_Response) isWriteResponse_Response() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isWriteResponse_Response")
}

// isWriteResponse_Response indicates an expected call of isWriteResponse_Response.
func (mr *MockisWriteResponse_ResponseMockRecorder) isWriteResponse_Response() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isWriteResponse_Response", reflect.TypeOf((*MockisWriteResponse_Response)(nil).isWriteResponse_Response))
}

// MockisReadRequest_Request is a mock of isReadRequest_Request interface.
type MockisReadRequest_Request struct {
	ctrl     *gomock.Controller
	recorder *MockisReadRequest_RequestMockRecorder
}

// MockisReadRequest_RequestMockRecorder is the mock recorder for MockisReadRequest_Request.
type MockisReadRequest_RequestMockRecorder struct {
	mock *MockisReadRequest_Request
}

// NewMockisReadRequest_Request creates a new mock instance.
func NewMockisReadRequest_Request(ctrl *gomock.Controller) *MockisReadRequest_Request {
	mock := &MockisReadRequest_Request{ctrl: ctrl}
	mock.recorder = &MockisReadRequest_RequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisReadRequest_Request) EXPECT() *MockisReadRequest_RequestMockRecorder {
	return m.recorder
}

// isReadRequest_Request mocks base method.
func (m *MockisReadRequest_Request) isReadRequest_Request() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isReadRequest_Request")
}

// isReadRequest_Request indicates an expected call of isReadRequest_Request.
func (mr *MockisReadRequest_RequestMockRecorder) isReadRequest_Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isReadRequest_Request", reflect.TypeOf((*MockisReadRequest_Request)(nil).isReadRequest_Request))
}

// MockisReadResponse_Response is a mock of isReadResponse_Response interface.
type MockisReadResponse_Response struct {
	ctrl     *gomock.Controller
	recorder *MockisReadResponse_ResponseMockRecorder
}

// MockisReadResponse_ResponseMockRecorder is the mock recorder for MockisReadResponse_Response.
type MockisReadResponse_ResponseMockRecorder struct {
	mock *MockisReadResponse_Response
}

// NewMockisReadResponse_Response creates a new mock instance.
func NewMockisReadResponse_Response(ctrl *gomock.Controller) *MockisReadResponse_Response {
	mock := &MockisReadResponse_Response{ctrl: ctrl}
	mock.recorder = &MockisReadResponse_ResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisReadResponse_Response) EXPECT() *MockisReadResponse_ResponseMockRecorder {
	return m.recorder
}

// isReadResponse_Response mocks base method.
func (m *MockisReadResponse_Response) isReadResponse_Response() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isReadResponse_Response")
}

// isReadResponse_Response indicates an expected call of isReadResponse_Response.
func (mr *MockisReadResponse_ResponseMockRecorder) isReadResponse_Response() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isReadResponse_Response", reflect.TypeOf((*MockisReadResponse_Response)(nil).isReadResponse_Response))
}

// MockPersQueueServiceClient is a mock of PersQueueServiceClient interface.
type MockPersQueueServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPersQueueServiceClientMockRecorder
}

// MockPersQueueServiceClientMockRecorder is the mock recorder for MockPersQueueServiceClient.
type MockPersQueueServiceClientMockRecorder struct {
	mock *MockPersQueueServiceClient
}

// NewMockPersQueueServiceClient creates a new mock instance.
func NewMockPersQueueServiceClient(ctrl *gomock.Controller) *MockPersQueueServiceClient {
	mock := &MockPersQueueServiceClient{ctrl: ctrl}
	mock.recorder = &MockPersQueueServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersQueueServiceClient) EXPECT() *MockPersQueueServiceClientMockRecorder {
	return m.recorder
}

// ReadSession mocks base method.
func (m *MockPersQueueServiceClient) ReadSession(ctx context.Context, opts ...grpc.CallOption) (Ydb_PersQueue_V0.PersQueueService_ReadSessionClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadSession", varargs...)
	ret0, _ := ret[0].(Ydb_PersQueue_V0.PersQueueService_ReadSessionClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSession indicates an expected call of ReadSession.
func (mr *MockPersQueueServiceClientMockRecorder) ReadSession(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSession", reflect.TypeOf((*MockPersQueueServiceClient)(nil).ReadSession), varargs...)
}

// WriteSession mocks base method.
func (m *MockPersQueueServiceClient) WriteSession(ctx context.Context, opts ...grpc.CallOption) (Ydb_PersQueue_V0.PersQueueService_WriteSessionClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteSession", varargs...)
	ret0, _ := ret[0].(Ydb_PersQueue_V0.PersQueueService_WriteSessionClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteSession indicates an expected call of WriteSession.
func (mr *MockPersQueueServiceClientMockRecorder) WriteSession(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSession", reflect.TypeOf((*MockPersQueueServiceClient)(nil).WriteSession), varargs...)
}

// MockWriteSessionClent is a mock of PersQueueService_WriteSessionClient interface.
type MockWriteSessionClent struct {
	ctrl     *gomock.Controller
	recorder *MockWriteSessionClentMockRecorder
}

// MockWriteSessionClentMockRecorder is the mock recorder for MockWriteSessionClent.
type MockWriteSessionClentMockRecorder struct {
	mock *MockWriteSessionClent
}

// NewMockWriteSessionClent creates a new mock instance.
func NewMockWriteSessionClent(ctrl *gomock.Controller) *MockWriteSessionClent {
	mock := &MockWriteSessionClent{ctrl: ctrl}
	mock.recorder = &MockWriteSessionClentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteSessionClent) EXPECT() *MockWriteSessionClentMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockWriteSessionClent) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockWriteSessionClentMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockWriteSessionClent)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockWriteSessionClent) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWriteSessionClentMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWriteSessionClent)(nil).Context))
}

// Header mocks base method.
func (m *MockWriteSessionClent) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockWriteSessionClentMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockWriteSessionClent)(nil).Header))
}

// Recv mocks base method.
func (m *MockWriteSessionClent) Recv() (*Ydb_PersQueue_V0.WriteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Ydb_PersQueue_V0.WriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockWriteSessionClentMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockWriteSessionClent)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockWriteSessionClent) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockWriteSessionClentMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWriteSessionClent)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockWriteSessionClent) Send(arg0 *Ydb_PersQueue_V0.WriteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockWriteSessionClentMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWriteSessionClent)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockWriteSessionClent) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockWriteSessionClentMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWriteSessionClent)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockWriteSessionClent) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockWriteSessionClentMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockWriteSessionClent)(nil).Trailer))
}

// MockPersQueueService_ReadSessionClient is a mock of PersQueueService_ReadSessionClient interface.
type MockPersQueueService_ReadSessionClient struct {
	ctrl     *gomock.Controller
	recorder *MockPersQueueService_ReadSessionClientMockRecorder
}

// MockPersQueueService_ReadSessionClientMockRecorder is the mock recorder for MockPersQueueService_ReadSessionClient.
type MockPersQueueService_ReadSessionClientMockRecorder struct {
	mock *MockPersQueueService_ReadSessionClient
}

// NewMockPersQueueService_ReadSessionClient creates a new mock instance.
func NewMockPersQueueService_ReadSessionClient(ctrl *gomock.Controller) *MockPersQueueService_ReadSessionClient {
	mock := &MockPersQueueService_ReadSessionClient{ctrl: ctrl}
	mock.recorder = &MockPersQueueService_ReadSessionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersQueueService_ReadSessionClient) EXPECT() *MockPersQueueService_ReadSessionClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPersQueueService_ReadSessionClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPersQueueService_ReadSessionClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPersQueueService_ReadSessionClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPersQueueService_ReadSessionClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPersQueueService_ReadSessionClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPersQueueService_ReadSessionClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPersQueueService_ReadSessionClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPersQueueService_ReadSessionClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPersQueueService_ReadSessionClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPersQueueService_ReadSessionClient) Recv() (*Ydb_PersQueue_V0.ReadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Ydb_PersQueue_V0.ReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPersQueueService_ReadSessionClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPersQueueService_ReadSessionClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPersQueueService_ReadSessionClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPersQueueService_ReadSessionClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPersQueueService_ReadSessionClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPersQueueService_ReadSessionClient) Send(arg0 *Ydb_PersQueue_V0.ReadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPersQueueService_ReadSessionClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPersQueueService_ReadSessionClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPersQueueService_ReadSessionClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPersQueueService_ReadSessionClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPersQueueService_ReadSessionClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPersQueueService_ReadSessionClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPersQueueService_ReadSessionClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPersQueueService_ReadSessionClient)(nil).Trailer))
}

// MockPersQueueServiceServer is a mock of PersQueueServiceServer interface.
type MockPersQueueServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPersQueueServiceServerMockRecorder
}

// MockPersQueueServiceServerMockRecorder is the mock recorder for MockPersQueueServiceServer.
type MockPersQueueServiceServerMockRecorder struct {
	mock *MockPersQueueServiceServer
}

// NewMockPersQueueServiceServer creates a new mock instance.
func NewMockPersQueueServiceServer(ctrl *gomock.Controller) *MockPersQueueServiceServer {
	mock := &MockPersQueueServiceServer{ctrl: ctrl}
	mock.recorder = &MockPersQueueServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersQueueServiceServer) EXPECT() *MockPersQueueServiceServerMockRecorder {
	return m.recorder
}

// ReadSession mocks base method.
func (m *MockPersQueueServiceServer) ReadSession(arg0 Ydb_PersQueue_V0.PersQueueService_ReadSessionServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadSession indicates an expected call of ReadSession.
func (mr *MockPersQueueServiceServerMockRecorder) ReadSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSession", reflect.TypeOf((*MockPersQueueServiceServer)(nil).ReadSession), arg0)
}

// WriteSession mocks base method.
func (m *MockPersQueueServiceServer) WriteSession(arg0 Ydb_PersQueue_V0.PersQueueService_WriteSessionServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSession indicates an expected call of WriteSession.
func (mr *MockPersQueueServiceServerMockRecorder) WriteSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSession", reflect.TypeOf((*MockPersQueueServiceServer)(nil).WriteSession), arg0)
}

// MockPersQueueService_WriteSessionServer is a mock of PersQueueService_WriteSessionServer interface.
type MockPersQueueService_WriteSessionServer struct {
	ctrl     *gomock.Controller
	recorder *MockPersQueueService_WriteSessionServerMockRecorder
}

// MockPersQueueService_WriteSessionServerMockRecorder is the mock recorder for MockPersQueueService_WriteSessionServer.
type MockPersQueueService_WriteSessionServerMockRecorder struct {
	mock *MockPersQueueService_WriteSessionServer
}

// NewMockPersQueueService_WriteSessionServer creates a new mock instance.
func NewMockPersQueueService_WriteSessionServer(ctrl *gomock.Controller) *MockPersQueueService_WriteSessionServer {
	mock := &MockPersQueueService_WriteSessionServer{ctrl: ctrl}
	mock.recorder = &MockPersQueueService_WriteSessionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersQueueService_WriteSessionServer) EXPECT() *MockPersQueueService_WriteSessionServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPersQueueService_WriteSessionServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPersQueueService_WriteSessionServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPersQueueService_WriteSessionServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockPersQueueService_WriteSessionServer) Recv() (*Ydb_PersQueue_V0.WriteRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Ydb_PersQueue_V0.WriteRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPersQueueService_WriteSessionServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPersQueueService_WriteSessionServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPersQueueService_WriteSessionServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPersQueueService_WriteSessionServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPersQueueService_WriteSessionServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPersQueueService_WriteSessionServer) Send(arg0 *Ydb_PersQueue_V0.WriteResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPersQueueService_WriteSessionServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPersQueueService_WriteSessionServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPersQueueService_WriteSessionServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPersQueueService_WriteSessionServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPersQueueService_WriteSessionServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPersQueueService_WriteSessionServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPersQueueService_WriteSessionServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPersQueueService_WriteSessionServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPersQueueService_WriteSessionServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPersQueueService_WriteSessionServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPersQueueService_WriteSessionServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPersQueueService_WriteSessionServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPersQueueService_WriteSessionServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPersQueueService_WriteSessionServer)(nil).SetTrailer), arg0)
}

// MockPersQueueService_ReadSessionServer is a mock of PersQueueService_ReadSessionServer interface.
type MockPersQueueService_ReadSessionServer struct {
	ctrl     *gomock.Controller
	recorder *MockPersQueueService_ReadSessionServerMockRecorder
}

// MockPersQueueService_ReadSessionServerMockRecorder is the mock recorder for MockPersQueueService_ReadSessionServer.
type MockPersQueueService_ReadSessionServerMockRecorder struct {
	mock *MockPersQueueService_ReadSessionServer
}

// NewMockPersQueueService_ReadSessionServer creates a new mock instance.
func NewMockPersQueueService_ReadSessionServer(ctrl *gomock.Controller) *MockPersQueueService_ReadSessionServer {
	mock := &MockPersQueueService_ReadSessionServer{ctrl: ctrl}
	mock.recorder = &MockPersQueueService_ReadSessionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersQueueService_ReadSessionServer) EXPECT() *MockPersQueueService_ReadSessionServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPersQueueService_ReadSessionServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPersQueueService_ReadSessionServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPersQueueService_ReadSessionServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockPersQueueService_ReadSessionServer) Recv() (*Ydb_PersQueue_V0.ReadRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Ydb_PersQueue_V0.ReadRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPersQueueService_ReadSessionServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPersQueueService_ReadSessionServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPersQueueService_ReadSessionServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPersQueueService_ReadSessionServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPersQueueService_ReadSessionServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPersQueueService_ReadSessionServer) Send(arg0 *Ydb_PersQueue_V0.ReadResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPersQueueService_ReadSessionServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPersQueueService_ReadSessionServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPersQueueService_ReadSessionServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPersQueueService_ReadSessionServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPersQueueService_ReadSessionServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPersQueueService_ReadSessionServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPersQueueService_ReadSessionServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPersQueueService_ReadSessionServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPersQueueService_ReadSessionServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPersQueueService_ReadSessionServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPersQueueService_ReadSessionServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPersQueueService_ReadSessionServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPersQueueService_ReadSessionServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPersQueueService_ReadSessionServer)(nil).SetTrailer), arg0)
}
