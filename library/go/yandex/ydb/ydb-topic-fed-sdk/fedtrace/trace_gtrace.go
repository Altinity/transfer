// Code generated by gtrace. DO NOT EDIT.

package fedtrace

import (
	"context"

	"github.com/doublecloud/transfer/library/go/yandex/ydb/ydb-topic-fed-sdk/fedtypes"
)

// fedDriverComposeOptions is a holder of options
type fedDriverComposeOptions struct {
	panicCallback func(e interface{})
}

// FedDriverOption specified FedDriver compose option
type FedDriverComposeOption func(o *fedDriverComposeOptions)

// WithFedDriverPanicCallback specified behavior on panic
func WithFedDriverPanicCallback(cb func(e interface{})) FedDriverComposeOption {
	return func(o *fedDriverComposeOptions) {
		o.panicCallback = cb
	}
}

// Compose returns a new FedDriver which has functional fields composed both from t and x.
func (t *FedDriver) Compose(x *FedDriver, opts ...FedDriverComposeOption) *FedDriver {
	var ret FedDriver
	options := fedDriverComposeOptions{}
	for _, opt := range opts {
		if opt != nil {
			opt(&options)
		}
	}
	{
		h1 := t.OnDiscovery
		h2 := x.OnDiscovery
		ret.OnDiscovery = func(f FedDriverDiscoveryStartInfo) func(FedDriverDiscoveryDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(FedDriverDiscoveryDoneInfo)
			if h1 != nil {
				r = h1(f)
			}
			if h2 != nil {
				r1 = h2(f)
			}
			return func(f FedDriverDiscoveryDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(f)
				}
				if r1 != nil {
					r1(f)
				}
			}
		}
	}
	{
		h1 := t.OnDiscoveryStop
		h2 := x.OnDiscoveryStop
		ret.OnDiscoveryStop = func(f FedDriverDiscoveryStopInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(f)
			}
			if h2 != nil {
				h2(f)
			}
		}
	}
	{
		h1 := t.OnConnect
		h2 := x.OnConnect
		ret.OnConnect = func(f FedDriverClusterConnectionStartInfo) func(FedDriverClusterConnectionDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(FedDriverClusterConnectionDoneInfo)
			if h1 != nil {
				r = h1(f)
			}
			if h2 != nil {
				r1 = h2(f)
			}
			return func(f FedDriverClusterConnectionDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(f)
				}
				if r1 != nil {
					r1(f)
				}
			}
		}
	}
	return &ret
}
func (t *FedDriver) onDiscovery(f FedDriverDiscoveryStartInfo) func(FedDriverDiscoveryDoneInfo) {
	fn := t.OnDiscovery
	if fn == nil {
		return func(FedDriverDiscoveryDoneInfo) {
			return
		}
	}
	res := fn(f)
	if res == nil {
		return func(FedDriverDiscoveryDoneInfo) {
			return
		}
	}
	return res
}
func (t *FedDriver) onDiscoveryStop(f FedDriverDiscoveryStopInfo) {
	fn := t.OnDiscoveryStop
	if fn == nil {
		return
	}
	fn(f)
}
func (t *FedDriver) onConnect(f FedDriverClusterConnectionStartInfo) func(FedDriverClusterConnectionDoneInfo) {
	fn := t.OnConnect
	if fn == nil {
		return func(FedDriverClusterConnectionDoneInfo) {
			return
		}
	}
	res := fn(f)
	if res == nil {
		return func(FedDriverClusterConnectionDoneInfo) {
			return
		}
	}
	return res
}
// fedTopicReaderComposeOptions is a holder of options
type fedTopicReaderComposeOptions struct {
	panicCallback func(e interface{})
}

// FedTopicReaderOption specified FedTopicReader compose option
type FedTopicReaderComposeOption func(o *fedTopicReaderComposeOptions)

// WithFedTopicReaderPanicCallback specified behavior on panic
func WithFedTopicReaderPanicCallback(cb func(e interface{})) FedTopicReaderComposeOption {
	return func(o *fedTopicReaderComposeOptions) {
		o.panicCallback = cb
	}
}

// Compose returns a new FedTopicReader which has functional fields composed both from t and x.
func (t *FedTopicReader) Compose(x *FedTopicReader, opts ...FedTopicReaderComposeOption) *FedTopicReader {
	var ret FedTopicReader
	options := fedTopicReaderComposeOptions{}
	for _, opt := range opts {
		if opt != nil {
			opt(&options)
		}
	}
	{
		h1 := t.OnDBReaderStart
		h2 := x.OnDBReaderStart
		ret.OnDBReaderStart = func(f FedTopicReaderDBreaderStartStartInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(f)
			}
			if h2 != nil {
				h2(f)
			}
		}
	}
	{
		h1 := t.OnDBReaderClose
		h2 := x.OnDBReaderClose
		ret.OnDBReaderClose = func(f FedTopicReaderDBCloseStartInfo) func(FedTopicReaderDBCloseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(FedTopicReaderDBCloseDoneInfo)
			if h1 != nil {
				r = h1(f)
			}
			if h2 != nil {
				r1 = h2(f)
			}
			return func(info FedTopicReaderDBCloseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(info)
				}
				if r1 != nil {
					r1(info)
				}
			}
		}
	}
	return &ret
}
func (t *FedTopicReader) onDBReaderStart(f FedTopicReaderDBreaderStartStartInfo) {
	fn := t.OnDBReaderStart
	if fn == nil {
		return
	}
	fn(f)
}
func (t *FedTopicReader) onDBReaderClose(f FedTopicReaderDBCloseStartInfo) func(info FedTopicReaderDBCloseDoneInfo) {
	fn := t.OnDBReaderClose
	if fn == nil {
		return func(FedTopicReaderDBCloseDoneInfo) {
			return
		}
	}
	res := fn(f)
	if res == nil {
		return func(FedTopicReaderDBCloseDoneInfo) {
			return
		}
	}
	return res
}
// fedTopicWriterComposeOptions is a holder of options
type fedTopicWriterComposeOptions struct {
	panicCallback func(e interface{})
}

// FedTopicWriterOption specified FedTopicWriter compose option
type FedTopicWriterComposeOption func(o *fedTopicWriterComposeOptions)

// WithFedTopicWriterPanicCallback specified behavior on panic
func WithFedTopicWriterPanicCallback(cb func(e interface{})) FedTopicWriterComposeOption {
	return func(o *fedTopicWriterComposeOptions) {
		o.panicCallback = cb
	}
}

// Compose returns a new FedTopicWriter which has functional fields composed both from t and x.
func (t *FedTopicWriter) Compose(x *FedTopicWriter, opts ...FedTopicWriterComposeOption) *FedTopicWriter {
	var ret FedTopicWriter
	options := fedTopicWriterComposeOptions{}
	for _, opt := range opts {
		if opt != nil {
			opt(&options)
		}
	}
	{
		h1 := t.OnDBWriterStart
		h2 := x.OnDBWriterStart
		ret.OnDBWriterStart = func(f FedTopicWriterDBWriterConnectionStartInfo) func(FedTopicWriterDBWriterConnectionDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(FedTopicWriterDBWriterConnectionDoneInfo)
			if h1 != nil {
				r = h1(f)
			}
			if h2 != nil {
				r1 = h2(f)
			}
			return func(f FedTopicWriterDBWriterConnectionDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(f)
				}
				if r1 != nil {
					r1(f)
				}
			}
		}
	}
	{
		h1 := t.OnDBWriterClose
		h2 := x.OnDBWriterClose
		ret.OnDBWriterClose = func(f FedTopicWriterDBWriterDisconnectionStartInfo) func(FedTopicWriterDBWriterDisconnectionDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(FedTopicWriterDBWriterDisconnectionDoneInfo)
			if h1 != nil {
				r = h1(f)
			}
			if h2 != nil {
				r1 = h2(f)
			}
			return func(info FedTopicWriterDBWriterDisconnectionDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(info)
				}
				if r1 != nil {
					r1(info)
				}
			}
		}
	}
	{
		h1 := t.OnWrite
		h2 := x.OnWrite
		ret.OnWrite = func(f FedTopicWriterDBWriteStartInfo) func(FedTopicWriterDBWriteDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(FedTopicWriterDBWriteDoneInfo)
			if h1 != nil {
				r = h1(f)
			}
			if h2 != nil {
				r1 = h2(f)
			}
			return func(f FedTopicWriterDBWriteDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(f)
				}
				if r1 != nil {
					r1(f)
				}
			}
		}
	}
	return &ret
}
func (t *FedTopicWriter) onDBWriterStart(f FedTopicWriterDBWriterConnectionStartInfo) func(FedTopicWriterDBWriterConnectionDoneInfo) {
	fn := t.OnDBWriterStart
	if fn == nil {
		return func(FedTopicWriterDBWriterConnectionDoneInfo) {
			return
		}
	}
	res := fn(f)
	if res == nil {
		return func(FedTopicWriterDBWriterConnectionDoneInfo) {
			return
		}
	}
	return res
}
func (t *FedTopicWriter) onDBWriterClose(f FedTopicWriterDBWriterDisconnectionStartInfo) func(info FedTopicWriterDBWriterDisconnectionDoneInfo) {
	fn := t.OnDBWriterClose
	if fn == nil {
		return func(FedTopicWriterDBWriterDisconnectionDoneInfo) {
			return
		}
	}
	res := fn(f)
	if res == nil {
		return func(FedTopicWriterDBWriterDisconnectionDoneInfo) {
			return
		}
	}
	return res
}
func (t *FedTopicWriter) onWrite(f FedTopicWriterDBWriteStartInfo) func(FedTopicWriterDBWriteDoneInfo) {
	fn := t.OnWrite
	if fn == nil {
		return func(FedTopicWriterDBWriteDoneInfo) {
			return
		}
	}
	res := fn(f)
	if res == nil {
		return func(FedTopicWriterDBWriteDoneInfo) {
			return
		}
	}
	return res
}
func FedDriverOnDiscovery(t *FedDriver, c *context.Context, oldDBInfo []fedtypes.DatabaseInfo) func(dBInfo []fedtypes.DatabaseInfo, _ error) {
	var p FedDriverDiscoveryStartInfo
	p.Context = c
	p.OldDBInfo = oldDBInfo
	res := t.onDiscovery(p)
	return func(dBInfo []fedtypes.DatabaseInfo, e error) {
		var p FedDriverDiscoveryDoneInfo
		p.DBInfo = dBInfo
		p.Error = e
		res(p)
	}
}
func FedDriverOnDiscoveryStop(t *FedDriver, c *context.Context, lastDBInfo []fedtypes.DatabaseInfo, reason error) {
	var p FedDriverDiscoveryStopInfo
	p.Context = c
	p.LastDBInfo = lastDBInfo
	p.Reason = reason
	t.onDiscoveryStop(p)
}
func FedDriverOnConnect(t *FedDriver, c *context.Context, dBInfo fedtypes.DatabaseInfo) func(error) {
	var p FedDriverClusterConnectionStartInfo
	p.Context = c
	p.DBInfo = dBInfo
	res := t.onConnect(p)
	return func(e error) {
		var p FedDriverClusterConnectionDoneInfo
		p.Error = e
		res(p)
	}
}
func FedTopicReaderOnDBReaderStart(t *FedTopicReader, c *context.Context) {
	var p FedTopicReaderDBreaderStartStartInfo
	p.Context = c
	t.onDBReaderStart(p)
}
func FedTopicReaderOnDBReaderClose(t *FedTopicReader, c *context.Context) func(err error) {
	var p FedTopicReaderDBCloseStartInfo
	p.Context = c
	res := t.onDBReaderClose(p)
	return func(err error) {
		var p FedTopicReaderDBCloseDoneInfo
		p.Err = err
		res(p)
	}
}
func FedTopicWriterOnDBWriterStart(t *FedTopicWriter, c *context.Context, dBInfo fedtypes.DatabaseInfo) func(error) {
	var p FedTopicWriterDBWriterConnectionStartInfo
	p.Context = c
	p.DBInfo = dBInfo
	res := t.onDBWriterStart(p)
	return func(e error) {
		var p FedTopicWriterDBWriterConnectionDoneInfo
		p.Error = e
		res(p)
	}
}
func FedTopicWriterOnDBWriterClose(t *FedTopicWriter, c *context.Context, reason error) func(error) {
	var p FedTopicWriterDBWriterDisconnectionStartInfo
	p.Context = c
	p.Reason = reason
	res := t.onDBWriterClose(p)
	return func(e error) {
		var p FedTopicWriterDBWriterDisconnectionDoneInfo
		p.Error = e
		res(p)
	}
}
func FedTopicWriterOnWrite(t *FedTopicWriter, c *context.Context, firstMessageSeqNo int64, lastMessageSeqNo int64, messagesCount int) func(error) {
	var p FedTopicWriterDBWriteStartInfo
	p.Context = c
	p.FirstMessageSeqNo = firstMessageSeqNo
	p.LastMessageSeqNo = lastMessageSeqNo
	p.MessagesCount = messagesCount
	res := t.onWrite(p)
	return func(e error) {
		var p FedTopicWriterDBWriteDoneInfo
		p.Error = e
		res(p)
	}
}
